

----- components\features\league\divisions\DivisionCard.tsx -----

// src/components/features/league/divisions/DivisionCard.tsx

/**
 * SOLID - Single Responsibility Principle (SRP)
 * Single division card display ONLY
 */

"use client";

import { useState } from "react";
import { useRouter } from "next/navigation";
import { Card, CardContent, CardHeader } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import {
  MapPin,
  TrendingUp,
  Calendar,
  Clock,
  Users,
  MoreVertical,
  Pencil,
  Power,
  UserCheck,
} from "lucide-react";
import { format } from "date-fns";
import { toast } from "sonner";
import { PopulatedDivision } from "@/types/division";
import Link from "next/link";

interface DivisionCardProps {
  division: PopulatedDivision;
  cityId: string;
}

export function DivisionCard({ division, cityId }: DivisionCardProps) {
  const router = useRouter();
  const [isUpdating, setIsUpdating] = useState(false);

  const getStatusBadge = () => {
    if (!division.active && !division.register) {
      return (
        <Badge
          variant="outline"
          className="bg-gray-100 text-gray-800 border-gray-200"
        >
          Finished
        </Badge>
      );
    }
    if (!division.active && division.register) {
      return (
        <Badge
          variant="outline"
          className="bg-yellow-100 text-yellow-800 border-yellow-200"
        >
          Registration
        </Badge>
      );
    }
    if (division.active && !division.register) {
      return (
        <Badge
          variant="outline"
          className="bg-green-100 text-green-800 border-green-200"
        >
          Active - Closed
        </Badge>
      );
    }
    if (division.active && division.register) {
      return (
        <Badge
          variant="outline"
          className="bg-blue-100 text-blue-800 border-blue-200"
        >
          Active - Open
        </Badge>
      );
    }
  };

  const handleToggleActive = async () => {
    setIsUpdating(true);
    try {
      const response = await fetch(`/api/v1/${cityId}/divisions`, {
        method: "PATCH",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          id: division._id,
          active: !division.active,
        }),
      });

      if (!response.ok) throw new Error("Failed to update division");

      toast.success(
        `Division ${division.active ? "deactivated" : "activated"}`
      );
      router.refresh();
    } catch (error) {
      toast.error("Failed to update division status");
    } finally {
      setIsUpdating(false);
    }
  };

  const handleToggleRegister = async () => {
    setIsUpdating(true);
    try {
      const response = await fetch(`/api/v1/${cityId}/divisions`, {
        method: "PATCH",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          id: division._id,
          register: !division.register,
        }),
      });

      if (!response.ok) throw new Error("Failed to update division");

      toast.success(`Registration ${division.register ? "closed" : "opened"}`);
      router.refresh();
    } catch (error) {
      toast.error("Failed to update registration status");
    } finally {
      setIsUpdating(false);
    }
  };

  return (
    <Card className="hover:shadow-lg transition-shadow">
      <CardHeader className="pb-3">
        <div className="flex items-start justify-between">
          <div className="space-y-1 flex-1">
            <div className="flex items-center gap-2">{getStatusBadge()}</div>
            <Link href={`/admin/${cityId}/league/divisions/${division._id}`}>
              <h3 className="font-semibold text-lg leading-tight hover:underline">
                {division.divisionName}
              </h3>
            </Link>
          </div>
          <DropdownMenu>
            <DropdownMenuTrigger asChild>
              <Button variant="ghost" size="icon" disabled={isUpdating}>
                <MoreVertical className="h-4 w-4" />
              </Button>
            </DropdownMenuTrigger>
            <DropdownMenuContent align="end">
              <DropdownMenuItem
                onClick={() =>
                  router.push(
                    `/admin/${cityId}/league/divisions/${division._id}/edit`
                  )
                }
              >
                <Pencil className="mr-2 h-4 w-4" />
                Edit Division
              </DropdownMenuItem>
              <DropdownMenuSeparator />
              <DropdownMenuItem onClick={handleToggleActive}>
                <Power className="mr-2 h-4 w-4" />
                {division.active ? "Deactivate" : "Activate"}
              </DropdownMenuItem>
              <DropdownMenuItem onClick={handleToggleRegister}>
                <UserCheck className="mr-2 h-4 w-4" />
                {division.register ? "Close Registration" : "Open Registration"}
              </DropdownMenuItem>
              <DropdownMenuSeparator />
              <DropdownMenuItem
                onClick={() =>
                  router.push(
                    `/admin/${cityId}/league/teams?division=${division._id}`
                  )
                }
              >
                <Users className="mr-2 h-4 w-4" />
                View Teams
              </DropdownMenuItem>
            </DropdownMenuContent>
          </DropdownMenu>
        </div>
      </CardHeader>

      <CardContent className="space-y-3 text-sm">
        <div className="flex items-center gap-2 text-gray-600">
          <MapPin className="h-4 w-4 flex-shrink-0" />
          <span>{division.location.name}</span>
        </div>

        <div className="flex items-center gap-2 text-gray-600">
          <TrendingUp className="h-4 w-4 flex-shrink-0" />
          <span>
            Grade {division.level?.grade} - {division.level?.name}
          </span>
        </div>

        <div className="flex items-center gap-2 text-gray-600">
          <Calendar className="h-4 w-4 flex-shrink-0" />
          <span>{division.day}s</span>
        </div>

        {division.startTime && division.endTime && (
          <div className="flex items-center gap-2 text-gray-600">
            <Clock className="h-4 w-4 flex-shrink-0" />
            <span>
              {division.startTime} - {division.endTime}
            </span>
          </div>
        )}

        {division.startDate && (
          <div className="pt-2 border-t text-gray-600">
            <span className="text-xs">
              Starts: {format(new Date(division.startDate), "MMM dd, yyyy")}
            </span>
          </div>
        )}
      </CardContent>
    </Card>
  );
}


----- components\features\league\divisions\DivisionsContent.tsx -----

// src/components/features/league/divisions/DivisionsContent.tsx

/**
 * SOLID - Single Responsibility Principle (SRP)
 * Division list orchestration with tabs and filters
 */

"use client";

import { useState } from "react";
import { useRouter, useSearchParams } from "next/navigation";
import { Tabs, TabsList, TabsTrigger } from "@/components/ui/tabs";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Input } from "@/components/ui/input";
import { Search } from "lucide-react";
import { DivisionsGrid } from "./DivisionsGrid";
import { Pagination } from "@/components/common/Pagination";
import { PopulatedDivision } from "@/types/division";
import { LeanLocation } from "@/types/location";
import { LeanLevel } from "@/types/level";

interface DivisionsContentProps {
  divisions: PopulatedDivision[];
  pagination: {
    total: number;
    page: number;
    limit: number;
    totalPages: number;
  };
  locations: LeanLocation[];
  levels: LeanLevel[];
  cityId: string;
  currentTab: string;
  currentFilters: {
    location?: string;
    level?: string;
    day?: string;
    search?: string;
  };
}

export function DivisionsContent({
  divisions,
  pagination,
  locations,
  levels,
  cityId,
  currentTab,
  currentFilters,
}: DivisionsContentProps) {
  const router = useRouter();
  const searchParams = useSearchParams();
  const [searchValue, setSearchValue] = useState(currentFilters.search || "");

  const updateFilters = (updates: Record<string, string | undefined>) => {
    const params = new URLSearchParams(searchParams.toString());

    Object.entries(updates).forEach(([key, value]) => {
      if (value) {
        params.set(key, value);
      } else {
        params.delete(key);
      }
    });

    // Reset to page 1 when filters change
    params.set("page", "1");

    router.push(`/admin/${cityId}/league/divisions?${params.toString()}`);
  };

  const handleTabChange = (tab: string) => {
    updateFilters({ tab });
  };

  const handleSearch = (value: string) => {
    setSearchValue(value);
    updateFilters({ search: value || undefined });
  };

  return (
    <div className="space-y-6">
      {/* Tabs */}
      <Tabs value={currentTab} onValueChange={handleTabChange}>
        <TabsList>
          <TabsTrigger value="all">All Divisions</TabsTrigger>
          <TabsTrigger value="active">Active</TabsTrigger>
          <TabsTrigger value="inactive">Inactive</TabsTrigger>
          <TabsTrigger value="registration">Registration Open</TabsTrigger>
        </TabsList>
      </Tabs>

      {/* Filters */}
      <div className="flex flex-col sm:flex-row gap-4">
        <div className="relative flex-1">
          <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400" />
          <Input
            placeholder="Search divisions..."
            value={searchValue}
            onChange={(e) => handleSearch(e.target.value)}
            className="pl-10"
          />
        </div>

        <Select
          value={currentFilters.location || "all"}
          onValueChange={(value) =>
            updateFilters({ location: value === "all" ? undefined : value })
          }
        >
          <SelectTrigger className="w-full sm:w-[200px]">
            <SelectValue placeholder="All Locations" />
          </SelectTrigger>
          <SelectContent>
            <SelectItem value="all">All Locations</SelectItem>
            {locations.map((location) => (
              <SelectItem key={location._id} value={location._id}>
                {location.name}
              </SelectItem>
            ))}
          </SelectContent>
        </Select>

        <Select
          value={currentFilters.level || "all"}
          onValueChange={(value) =>
            updateFilters({ level: value === "all" ? undefined : value })
          }
        >
          <SelectTrigger className="w-full sm:w-[200px]">
            <SelectValue placeholder="All Levels" />
          </SelectTrigger>
          <SelectContent>
            <SelectItem value="all">All Levels</SelectItem>
            {levels.map((level) => (
              <SelectItem key={level._id} value={level._id}>
                Grade {level.grade} - {level.name}
              </SelectItem>
            ))}
          </SelectContent>
        </Select>

        <Select
          value={currentFilters.day || "all"}
          onValueChange={(value) =>
            updateFilters({ day: value === "all" ? undefined : value })
          }
        >
          <SelectTrigger className="w-full sm:w-[200px]">
            <SelectValue placeholder="All Days" />
          </SelectTrigger>
          <SelectContent>
            <SelectItem value="all">All Days</SelectItem>
            <SelectItem value="Monday">Monday</SelectItem>
            <SelectItem value="Tuesday">Tuesday</SelectItem>
            <SelectItem value="Wednesday">Wednesday</SelectItem>
            <SelectItem value="Thursday">Thursday</SelectItem>
            <SelectItem value="Friday">Friday</SelectItem>
            <SelectItem value="Saturday">Saturday</SelectItem>
            <SelectItem value="Sunday">Sunday</SelectItem>
          </SelectContent>
        </Select>
      </div>

      {/* Division Cards Grid */}
      <DivisionsGrid divisions={divisions} cityId={cityId} />

      {/* Pagination */}
      {pagination.totalPages > 1 && (
        <Pagination
          currentPage={pagination.page}
          totalPages={pagination.totalPages}
          total={pagination.total}
          limit={pagination.limit}
          onPageChange={(page) => updateFilters({ page: page.toString() })}
        />
      )}
    </div>
  );
}


----- components\features\league\divisions\DivisionsGrid.tsx -----

// src/components/features/league/divisions/DivisionsGrid.tsx

/**
 * SOLID - Single Responsibility Principle (SRP)
 * Display divisions in responsive card grid ONLY
 */

"use client";

import { DivisionCard } from "./DivisionCard";
import { Calendar } from "lucide-react";
import { PopulatedDivision } from "@/types/division";

interface DivisionsGridProps {
  divisions: PopulatedDivision[];
  cityId: string;
}

export function DivisionsGrid({ divisions, cityId }: DivisionsGridProps) {
  if (divisions.length === 0) {
    return (
      <div className="text-center py-12 bg-white rounded-lg shadow">
        <Calendar className="mx-auto h-12 w-12 text-gray-400" />
        <h3 className="mt-4 text-lg font-medium text-gray-900">
          No divisions found
        </h3>
        <p className="mt-2 text-sm text-gray-500">
          Try adjusting your filters or create a new division.
        </p>
      </div>
    );
  }

  return (
    <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-3">
      {divisions.map((division) => (
        <DivisionCard key={division._id} division={division} cityId={cityId} />
      ))}
    </div>
  );
}


----- components\features\league\divisions\EditDivisionForm.tsx -----

// src/components/features/league/divisions/EditDivisionForm.tsx

/**
 * SOLID - Single Responsibility Principle (SRP)
 * Division edit form ONLY
 */

"use client";

import { useState, useMemo, useEffect } from "react";
import { useRouter } from "next/navigation";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { Checkbox } from "@/components/ui/checkbox";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Loader2, AlertCircle, Info, Lock } from "lucide-react";
import { toast } from "sonner";
import {
  updateDivisionSchema,
  UpdateDivisionInput,
} from "@/lib/validations/division";
import { format, subDays } from "date-fns";
import { PopulatedDivision } from "@/types/division";
import { LeanCity } from "@/types/city";
import { LeanLevel } from "@/types/level";

interface EditDivisionFormProps {
  division: PopulatedDivision; // Will be PopulatedDivision from DB
  cityId: string;
  cities: LeanCity[];
  levels: LeanLevel[];
}

export function EditDivisionForm({
  division,
  cityId,
  cities,
  levels,
}: EditDivisionFormProps) {
  const router = useRouter();
  const [isLoading, setIsLoading] = useState(false);
  const [selectedCity, setSelectedCity] = useState(
    typeof division.city === "object" ? division.city._id : division.city
  );
  const [selectedStartDate, setSelectedStartDate] = useState<string>(
    division.startDate ? format(new Date(division.startDate), "yyyy-MM-dd") : ""
  );
  const [conflictWarning, setConflictWarning] = useState<string | null>(null);

  const {
    register,
    handleSubmit,
    formState: { errors },
    setValue,
    watch,
  } = useForm<UpdateDivisionInput>({
    resolver: zodResolver(updateDivisionSchema),
    defaultValues: {
      id: division._id.toString(),
      divisionName: division.divisionName,
      description: division.description,
      location:
        typeof division.location === "object"
          ? division.location._id.toString()
          : division.location,
      level:
        typeof division.level === "object"
          ? division.level._id.toString()
          : division.level,
      day: division.day as
        | "Monday"
        | "Tuesday"
        | "Wednesday"
        | "Thursday"
        | "Friday"
        | "Saturday"
        | "Sunday", // Add type assertion
      startDate: division.startDate
        ? format(new Date(division.startDate), "yyyy-MM-dd")
        : undefined,
      startTime: division.startTime,
      endTime: division.endTime,
      active: division.active,
      register: division.register,
    },
  });

  const selectedLocation = watch("location");
  const selectedLevel = watch("level");
  const selectedDay = watch("day");
  const active = watch("active");
  const registerOpen = watch("register");

  // Filter locations by selected city
  const availableLocations = useMemo(() => {
    const city = cities.find((c) => c._id === selectedCity);
    return city?.locations || [];
  }, [cities, selectedCity]);

  // Calculate early bird end date
  const earlyBirdEndDate = useMemo(() => {
    if (!selectedStartDate) return null;
    const startDate = new Date(selectedStartDate);
    return subDays(startDate, 42);
  }, [selectedStartDate]);

  const onSubmit = async (data: UpdateDivisionInput) => {
    setIsLoading(true);
    setConflictWarning(null);

    try {
      const response = await fetch(`/api/v1/${cityId}/divisions`, {
        method: "PATCH",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(data),
      });

      const result = await response.json();

      if (!response.ok) {
        throw new Error(result.error || "Failed to update division");
      }

      // Show conflict warning if exists
      if (result.warning) {
        setConflictWarning(result.warning.message);
      }

      toast.success("Division updated successfully!");
      router.push(`/admin/${cityId}/league/divisions`);
      router.refresh();
    } catch (err: any) {
      toast.error(err.message || "Failed to update division");
      console.error("Update division error:", err);
    } finally {
      setIsLoading(false);
    }
  };

  const onError = (errors: any) => {
    console.log("Form validation errors:", errors);
    toast.error("Please fill in all required fields");
  };

  return (
    <form onSubmit={handleSubmit(onSubmit, onError)} className="space-y-6">
      {/* Basic Information */}
      <Card>
        <CardHeader>
          <CardTitle>Basic Information</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div>
            <Label htmlFor="divisionName">Division Name *</Label>
            <Input
              {...register("divisionName")}
              id="divisionName"
              disabled={isLoading}
            />
            {errors.divisionName && (
              <p className="text-sm text-red-600 mt-1">
                {errors.divisionName.message}
              </p>
            )}
          </div>

          <div>
            <Label htmlFor="description">Description *</Label>
            <Textarea
              {...register("description")}
              id="description"
              rows={3}
              disabled={isLoading}
            />
            {errors.description && (
              <p className="text-sm text-red-600 mt-1">
                {errors.description.message}
              </p>
            )}
          </div>
        </CardContent>
      </Card>

      {/* Location & Level */}
      <Card>
        <CardHeader>
          <CardTitle>Location & Level</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div>
            <Label htmlFor="city">City (Cannot be changed)</Label>
            <Select
              value={selectedCity}
              onValueChange={(value) => {
                setSelectedCity(value);
                // Reset location when city changes since locations are filtered by city
                setValue("location", "", { shouldValidate: false });
              }}
              disabled={isLoading}
            >
              <SelectTrigger>
                <SelectValue />
              </SelectTrigger>
              <SelectContent>
                {cities.map((city) => (
                  <SelectItem key={city._id} value={city._id}>
                    {city.cityName}, {city.region}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
          </div>

          <div>
            <Label htmlFor="location">Location *</Label>
            <Select
              value={selectedLocation}
              onValueChange={(value) =>
                setValue("location", value, { shouldValidate: true })
              }
              disabled={isLoading}
            >
              <SelectTrigger>
                <SelectValue />
              </SelectTrigger>
              <SelectContent>
                {availableLocations.map((location: any) => (
                  <SelectItem
                    key={location._id || location}
                    value={location._id || location}
                  >
                    {location.name || "Location"}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
            {errors.location && (
              <p className="text-sm text-red-600 mt-1">
                {errors.location.message}
              </p>
            )}
            {conflictWarning && (
              <div className="flex items-start gap-2 mt-2 p-3 bg-yellow-50 border border-yellow-200 rounded-lg">
                <AlertCircle className="h-5 w-5 text-yellow-600 flex-shrink-0 mt-0.5" />
                <p className="text-sm text-yellow-800">{conflictWarning}</p>
              </div>
            )}
          </div>

          <div>
            <Label htmlFor="level">Skill Level *</Label>
            <Select
              value={selectedLevel}
              onValueChange={(value) =>
                setValue("level", value, { shouldValidate: true })
              }
              disabled={isLoading}
            >
              <SelectTrigger>
                <SelectValue />
              </SelectTrigger>
              <SelectContent>
                {levels.map((level: any) => (
                  <SelectItem key={level._id} value={level._id}>
                    Grade {level.grade} - {level.name}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
            {errors.level && (
              <p className="text-sm text-red-600 mt-1">
                {errors.level.message}
              </p>
            )}
          </div>
        </CardContent>
      </Card>

      {/* Schedule */}
      <Card>
        <CardHeader>
          <CardTitle>Schedule</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div>
            <Label htmlFor="day">Day *</Label>
            <Select
              value={selectedDay}
              onValueChange={(value) =>
                setValue("day", value as any, { shouldValidate: true })
              }
              disabled={isLoading}
            >
              <SelectTrigger>
                <SelectValue />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="Monday">Monday</SelectItem>
                <SelectItem value="Tuesday">Tuesday</SelectItem>
                <SelectItem value="Wednesday">Wednesday</SelectItem>
                <SelectItem value="Thursday">Thursday</SelectItem>
                <SelectItem value="Friday">Friday</SelectItem>
                <SelectItem value="Saturday">Saturday</SelectItem>
                <SelectItem value="Sunday">Sunday</SelectItem>
              </SelectContent>
            </Select>
            {errors.day && (
              <p className="text-sm text-red-600 mt-1">{errors.day.message}</p>
            )}
          </div>

          <div className="grid gap-4 md:grid-cols-3">
            <div>
              <Label htmlFor="startDate">Start Date</Label>
              <Input
                {...register("startDate")}
                id="startDate"
                type="date"
                disabled={isLoading}
                onChange={(e) => {
                  setSelectedStartDate(e.target.value);
                  setValue("startDate", e.target.value);
                }}
              />
            </div>

            <div>
              <Label htmlFor="startTime">Start Time</Label>
              <Input
                {...register("startTime")}
                id="startTime"
                type="time"
                disabled={isLoading}
              />
            </div>

            <div>
              <Label htmlFor="endTime">End Time</Label>
              <Input
                {...register("endTime")}
                id="endTime"
                type="time"
                disabled={isLoading}
              />
            </div>
          </div>

          {earlyBirdEndDate && (
            <div className="flex items-start gap-2 p-3 bg-blue-50 border border-blue-200 rounded-lg">
              <Info className="h-5 w-5 text-blue-600 flex-shrink-0 mt-0.5" />
              <p className="text-sm text-blue-800">
                Early bird pricing ends 42 days (6 weeks) before start date on{" "}
                <strong>{format(earlyBirdEndDate, "MMM dd, yyyy")}</strong>
              </p>
            </div>
          )}
        </CardContent>
      </Card>

      {/* Pricing (Locked) */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Lock className="h-5 w-5" />
            Pricing (Locked)
          </CardTitle>
          <p className="text-sm text-gray-600">
            Pricing cannot be changed after division creation
          </p>
        </CardHeader>
        <CardContent>
          <div className="bg-gray-50 border border-gray-200 rounded-lg p-4 space-y-3">
            <div className="grid gap-3 md:grid-cols-2">
              <div>
                <span className="text-xs text-gray-500">Early Bird</span>
                <p className="font-medium">
                  ${division.prices?.earlyBird?.amount?.toFixed(2) || "0.00"} -{" "}
                  {division.prices?.earlyBird?.name || "N/A"}
                </p>
              </div>
              <div>
                <span className="text-xs text-gray-500">Regular</span>
                <p className="font-medium">
                  ${division.prices?.regular?.amount?.toFixed(2) || "0.00"} -{" "}
                  {division.prices?.regular?.name || "N/A"}
                </p>
              </div>
              <div>
                <span className="text-xs text-gray-500">Down Payment</span>
                <p className="font-medium">
                  $
                  {division.prices?.firstInstallment?.amount?.toFixed(2) ||
                    "0.00"}{" "}
                  - {division.prices?.firstInstallment?.name || "N/A"}
                </p>
              </div>
              <div>
                <span className="text-xs text-gray-500">
                  Weekly (Early Bird)
                </span>
                <p className="font-medium">
                  ${division.prices?.installment?.amount?.toFixed(2) || "0.00"}
                  /week - {division.prices?.installment?.name || "N/A"}
                </p>
              </div>
              <div>
                <span className="text-xs text-gray-500">Weekly (Regular)</span>
                <p className="font-medium">
                  $
                  {division.prices?.regularInstallment?.amount?.toFixed(2) ||
                    "0.00"}
                  /week - {division.prices?.regularInstallment?.name || "N/A"}
                </p>
              </div>
              <div>
                <span className="text-xs text-gray-500">Free</span>
                <p className="font-medium">
                  ${division.prices?.free?.amount?.toFixed(2) || "0.00"} -{" "}
                  {division.prices?.free?.name || "N/A"}
                </p>
              </div>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Status */}
      <Card>
        <CardHeader>
          <CardTitle>Status</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="flex items-center space-x-2">
            <Checkbox
              id="active"
              checked={active}
              onCheckedChange={(checked) =>
                setValue("active", checked as boolean)
              }
              disabled={isLoading}
            />
            <label
              htmlFor="active"
              className="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
            >
              Active (Games are being played)
            </label>
          </div>

          <div className="flex items-center space-x-2">
            <Checkbox
              id="register"
              checked={registerOpen}
              onCheckedChange={(checked) =>
                setValue("register", checked as boolean)
              }
              disabled={isLoading}
            />
            <label
              htmlFor="register"
              className="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
            >
              Registration Open (Teams can join)
            </label>
          </div>
        </CardContent>
      </Card>

      {/* Submit */}
      <div className="flex gap-4">
        <Button type="submit" disabled={isLoading}>
          {isLoading ? (
            <>
              <Loader2 className="mr-2 h-4 w-4 animate-spin" />
              Updating...
            </>
          ) : (
            "Update Division"
          )}
        </Button>
        <Button
          type="button"
          variant="outline"
          onClick={() => router.back()}
          disabled={isLoading}
        >
          Cancel
        </Button>
      </div>
    </form>
  );
}


----- components\features\league\levels\CreateLevelForm.tsx -----

// src/components/features/league/levels/CreateLevelForm.tsx

/**
 * SOLID - Single Responsibility Principle (SRP)
 * Level creation form ONLY
 */

"use client";

import { useState } from "react";
import { useRouter } from "next/navigation";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Loader2 } from "lucide-react";
import { toast } from "sonner";
import { createLevelSchema, CreateLevelInput } from "@/lib/validations/level";

interface CreateLevelFormProps {
  cityId: string;
}

export function CreateLevelForm({ cityId }: CreateLevelFormProps) {
  const router = useRouter();
  const [isLoading, setIsLoading] = useState(false);

  const {
    register,
    handleSubmit,
    formState: { errors },
  } = useForm<CreateLevelInput>({
    resolver: zodResolver(createLevelSchema),
  });

  const onSubmit = async (data: CreateLevelInput) => {
    setIsLoading(true);

    try {
      const response = await fetch("/api/v1/league/levels", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(data),
      });

      const result = await response.json();

      if (!response.ok) {
        throw new Error(result.error || "Failed to create level");
      }

      toast.success("Level created successfully!");
      router.push(`/admin/${cityId}/league/levels`);
      router.refresh();
    } catch (err: any) {
      toast.error(err.message || "Failed to create level");
      console.error("Create level error:", err);
    } finally {
      setIsLoading(false);
    }
  };

  const onError = (errors: any) => {
    console.log("Form validation errors:", errors);
    toast.error("Please fill in all required fields");
  };

  return (
    <form
      onSubmit={handleSubmit(onSubmit, onError)}
      className="space-y-6 bg-white p-6 rounded-lg shadow"
    >
      <div className="space-y-4">
        <div>
          <Label htmlFor="name">Level Name *</Label>
          <Input
            {...register("name")}
            id="name"
            placeholder="Elite / Competitive / Recreational"
            disabled={isLoading}
          />
          {errors.name && (
            <p className="text-sm text-red-600 mt-1">{errors.name.message}</p>
          )}
        </div>

        <div>
          <Label htmlFor="grade">Grade *</Label>
          <Input
            {...register("grade", { valueAsNumber: true })}
            id="grade"
            type="number"
            min="1"
            placeholder="1"
            disabled={isLoading}
          />
          {errors.grade && (
            <p className="text-sm text-red-600 mt-1">{errors.grade.message}</p>
          )}
          <p className="text-sm text-gray-500 mt-1">
            Grade 1 = Highest skill level. Each grade must be unique.
          </p>
        </div>
      </div>

      <div className="flex gap-4">
        <Button type="submit" disabled={isLoading}>
          {isLoading ? (
            <>
              <Loader2 className="mr-2 h-4 w-4 animate-spin" />
              Creating...
            </>
          ) : (
            "Create Level"
          )}
        </Button>
        <Button
          type="button"
          variant="outline"
          onClick={() => router.back()}
          disabled={isLoading}
        >
          Cancel
        </Button>
      </div>
    </form>
  );
}


----- components\features\league\levels\EditLevelDialog.tsx -----

// src/components/features/league/levels/EditLevelDialog.tsx

/**
 * SOLID - Single Responsibility Principle (SRP)
 * Edit level dialog ONLY
 */

"use client";

import { useState, useEffect } from "react";
import { useRouter } from "next/navigation";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Loader2 } from "lucide-react";
import { toast } from "sonner";
import { createLevelSchema, CreateLevelInput } from "@/lib/validations/level";

interface Level {
  _id: string;
  name: string;
  grade: number;
}

interface EditLevelDialogProps {
  level: Level;
  open: boolean;
  onOpenChange: (open: boolean) => void;
}

export function EditLevelDialog({
  level,
  open,
  onOpenChange,
}: EditLevelDialogProps) {
  const router = useRouter();
  const [isLoading, setIsLoading] = useState(false);

  const {
    register,
    handleSubmit,
    formState: { errors },
    reset,
  } = useForm<CreateLevelInput>({
    resolver: zodResolver(createLevelSchema),
    defaultValues: {
      name: level.name,
      grade: level.grade,
    },
  });

  useEffect(() => {
    if (open) {
      reset({
        name: level.name,
        grade: level.grade,
      });
    }
  }, [open, level, reset]);

  const onSubmit = async (data: CreateLevelInput) => {
    setIsLoading(true);

    try {
      const response = await fetch("/api/v1/league/levels", {
        method: "PATCH",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          id: level._id,
          ...data,
        }),
      });

      const result = await response.json();

      if (!response.ok) {
        throw new Error(result.error || "Failed to update level");
      }

      toast.success("Level updated successfully!");
      onOpenChange(false);
      router.refresh();
    } catch (err: any) {
      toast.error(err.message || "Failed to update level");
      console.error("Update level error:", err);
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent>
        <DialogHeader>
          <DialogTitle>Edit Level</DialogTitle>
          <DialogDescription>Update skill level information</DialogDescription>
        </DialogHeader>

        <form onSubmit={handleSubmit(onSubmit)} className="space-y-4">
          <div>
            <Label htmlFor="edit-name">Level Name *</Label>
            <Input {...register("name")} id="edit-name" disabled={isLoading} />
            {errors.name && (
              <p className="text-sm text-red-600 mt-1">{errors.name.message}</p>
            )}
          </div>

          <div>
            <Label htmlFor="edit-grade">Grade *</Label>
            <Input
              {...register("grade", { valueAsNumber: true })}
              id="edit-grade"
              type="number"
              min="1"
              disabled={isLoading}
            />
            {errors.grade && (
              <p className="text-sm text-red-600 mt-1">
                {errors.grade.message}
              </p>
            )}
            <p className="text-sm text-gray-500 mt-1">
              Grade 1 = Highest skill level. Each grade must be unique.
            </p>
          </div>

          <div className="flex gap-4 justify-end">
            <Button
              type="button"
              variant="outline"
              onClick={() => onOpenChange(false)}
              disabled={isLoading}
            >
              Cancel
            </Button>
            <Button type="submit" disabled={isLoading}>
              {isLoading ? (
                <>
                  <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                  Saving...
                </>
              ) : (
                "Save Changes"
              )}
            </Button>
          </div>
        </form>
      </DialogContent>
    </Dialog>
  );
}


----- components\features\league\levels\LevelsTable.tsx -----

// src/components/features/league/levels/LevelsTable.tsx

/**
 * SOLID - Single Responsibility Principle (SRP)
 * Display levels table ONLY
 */

"use client";

import { useState } from "react";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { MoreHorizontal, Pencil, TrendingUp } from "lucide-react";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import { EditLevelDialog } from "./EditLevelDialog";

interface Level {
  _id: string;
  name: string;
  grade: number;
}

interface LevelsTableProps {
  levels: Level[];
  cityId: string;
}

export function LevelsTable({ levels, cityId }: LevelsTableProps) {
  const [editDialogOpen, setEditDialogOpen] = useState(false);
  const [selectedLevel, setSelectedLevel] = useState<Level | null>(null);

  const handleEdit = (level: Level) => {
    setSelectedLevel(level);
    setEditDialogOpen(true);
  };

  const getGradeBadgeColor = (grade: number) => {
    if (grade === 1) return "bg-yellow-100 text-yellow-800 border-yellow-200";
    if (grade === 2) return "bg-blue-100 text-blue-800 border-blue-200";
    if (grade === 3) return "bg-green-100 text-green-800 border-green-200";
    return "bg-gray-100 text-gray-800 border-gray-200";
  };

  return (
    <>
      <div className="bg-white rounded-lg shadow">
        <Table>
          <TableHeader>
            <TableRow>
              <TableHead>Grade</TableHead>
              <TableHead>Level Name</TableHead>
              <TableHead>Description</TableHead>
              <TableHead className="w-[70px]"></TableHead>
            </TableRow>
          </TableHeader>
          <TableBody>
            {levels.length === 0 ? (
              <TableRow>
                <TableCell
                  colSpan={4}
                  className="text-center py-8 text-gray-500"
                >
                  No skill levels found. Create your first level to get started.
                </TableCell>
              </TableRow>
            ) : (
              levels.map((level) => (
                <TableRow key={level._id}>
                  <TableCell>
                    <Badge
                      variant="outline"
                      className={getGradeBadgeColor(level.grade)}
                    >
                      <TrendingUp className="h-3 w-3 mr-1" />
                      Grade {level.grade}
                    </Badge>
                  </TableCell>
                  <TableCell className="font-medium">{level.name}</TableCell>
                  <TableCell className="text-sm text-gray-600">
                    {level.grade === 1 && "Highest skill level"}
                    {level.grade === 2 && "Intermediate skill level"}
                    {level.grade === 3 && "Recreational skill level"}
                    {level.grade > 3 && "Custom skill level"}
                  </TableCell>
                  <TableCell>
                    <DropdownMenu>
                      <DropdownMenuTrigger asChild>
                        <Button variant="ghost" size="icon">
                          <MoreHorizontal className="h-4 w-4" />
                        </Button>
                      </DropdownMenuTrigger>
                      <DropdownMenuContent align="end">
                        <DropdownMenuItem onClick={() => handleEdit(level)}>
                          <Pencil className="mr-2 h-4 w-4" />
                          Edit
                        </DropdownMenuItem>
                      </DropdownMenuContent>
                    </DropdownMenu>
                  </TableCell>
                </TableRow>
              ))
            )}
          </TableBody>
        </Table>
      </div>

      {selectedLevel && (
        <EditLevelDialog
          level={selectedLevel}
          open={editDialogOpen}
          onOpenChange={setEditDialogOpen}
        />
      )}
    </>
  );
}


----- components\features\league\locations\CreateLocationForm.tsx -----

// src/components/features/league/locations/CreateLocationForm.tsx

/**
 * SOLID - Single Responsibility Principle (SRP)
 * Location creation form ONLY
 */

"use client";

import { useState } from "react";
import { useRouter } from "next/navigation";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Loader2 } from "lucide-react";
import { toast } from "sonner";
import {
  createLocationSchema,
  CreateLocationInput,
} from "@/lib/validations/location";

interface City {
  _id: string;
  cityName: string;
  region: string;
  country: string;
}

interface CreateLocationFormProps {
  cities: City[];
  cityId: string;
}

export function CreateLocationForm({
  cities,
  cityId,
}: CreateLocationFormProps) {
  const router = useRouter();
  const [isLoading, setIsLoading] = useState(false);

  const {
    register,
    handleSubmit,
    formState: { errors },
    setValue,
    watch,
  } = useForm<CreateLocationInput>({
    resolver: zodResolver(createLocationSchema),
  });

  const selectedCity = watch("city");

  const onSubmit = async (data: CreateLocationInput) => {
    setIsLoading(true);

    try {
      const response = await fetch("/api/v1/league/locations", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(data),
      });

      const result = await response.json();

      if (!response.ok) {
        throw new Error(result.error || "Failed to create location");
      }

      toast.success("Location created successfully!");
      router.push(`/admin/${cityId}/league/locations`);
      router.refresh();
    } catch (err: any) {
      toast.error(err.message || "Failed to create location");
      console.error("Create location error:", err);
    } finally {
      setIsLoading(false);
    }
  };

  const onError = (errors: any) => {
    console.log("Form validation errors:", errors);
    toast.error("Please fill in all required fields");
  };

  return (
    <form
      onSubmit={handleSubmit(onSubmit, onError)}
      className="space-y-6 bg-white p-6 rounded-lg shadow"
    >
      <div className="space-y-4">
        <div>
          <Label htmlFor="city">City *</Label>
          <Select
            value={selectedCity}
            onValueChange={(value) =>
              setValue("city", value, { shouldValidate: true })
            }
            disabled={isLoading}
          >
            <SelectTrigger>
              <SelectValue placeholder="Select city" />
            </SelectTrigger>
            <SelectContent>
              {cities.map((city) => (
                <SelectItem key={city._id} value={city._id}>
                  {city.cityName}, {city.region}
                </SelectItem>
              ))}
            </SelectContent>
          </Select>
          {errors.city && (
            <p className="text-sm text-red-600 mt-1">{errors.city.message}</p>
          )}
        </div>

        <div>
          <Label htmlFor="name">Location Name *</Label>
          <Input
            {...register("name")}
            id="name"
            placeholder="Downtown Community Center"
            disabled={isLoading}
          />
          {errors.name && (
            <p className="text-sm text-red-600 mt-1">{errors.name.message}</p>
          )}
        </div>

        <div>
          <Label htmlFor="address">Address *</Label>
          <Input
            {...register("address")}
            id="address"
            placeholder="123 Main Street, City, State 12345"
            disabled={isLoading}
          />
          {errors.address && (
            <p className="text-sm text-red-600 mt-1">
              {errors.address.message}
            </p>
          )}
        </div>

        <div className="border-t pt-4">
          <h3 className="text-sm font-medium mb-3">Coordinates (Optional)</h3>
          <div className="grid gap-4 md:grid-cols-2">
            <div>
              <Label htmlFor="latitude">Latitude</Label>
              <Input
                {...register("coordinates.latitude", {
                  valueAsNumber: true,
                  setValueAs: (v) => (v === "" ? undefined : parseFloat(v)),
                })}
                id="latitude"
                type="number"
                step="any"
                placeholder="43.6532"
                disabled={isLoading}
              />
            </div>

            <div>
              <Label htmlFor="longitude">Longitude</Label>
              <Input
                {...register("coordinates.longitude", {
                  valueAsNumber: true,
                  setValueAs: (v) => (v === "" ? undefined : parseFloat(v)),
                })}
                id="longitude"
                type="number"
                step="any"
                placeholder="-79.3832"
                disabled={isLoading}
              />
            </div>
          </div>
          <p className="text-sm text-gray-500 mt-2">
            Add coordinates for map integration (optional)
          </p>
        </div>
      </div>

      <div className="flex gap-4">
        <Button type="submit" disabled={isLoading}>
          {isLoading ? (
            <>
              <Loader2 className="mr-2 h-4 w-4 animate-spin" />
              Creating...
            </>
          ) : (
            "Create Location"
          )}
        </Button>
        <Button
          type="button"
          variant="outline"
          onClick={() => router.back()}
          disabled={isLoading}
        >
          Cancel
        </Button>
      </div>
    </form>
  );
}


----- components\features\league\locations\DeleteLocationDialog.tsx -----

// src/components/features/league/locations/DeleteLocationDialog.tsx

/**
 * SOLID - Single Responsibility Principle (SRP)
 * Delete location confirmation dialog ONLY
 */

"use client";

import { useState } from "react";
import { useRouter } from "next/navigation";
import {
  AlertDialog,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
} from "@/components/ui/alert-dialog";
import { Button } from "@/components/ui/button";
import { Loader2 } from "lucide-react";
import { toast } from "sonner";

interface Location {
  _id: string;
  name: string;
  address: string;
}

interface DeleteLocationDialogProps {
  location: Location;
  open: boolean;
  onOpenChange: (open: boolean) => void;
}

export function DeleteLocationDialog({
  location,
  open,
  onOpenChange,
}: DeleteLocationDialogProps) {
  const router = useRouter();
  const [isLoading, setIsLoading] = useState(false);

  const handleDelete = async () => {
    setIsLoading(true);

    try {
      const response = await fetch(
        `/api/v1/league/locations?id=${location._id}`,
        {
          method: "DELETE",
        }
      );

      const result = await response.json();

      if (!response.ok) {
        throw new Error(result.error || "Failed to delete location");
      }

      toast.success("Location deleted successfully");
      onOpenChange(false);
      router.refresh();
    } catch (err: any) {
      toast.error(err.message || "Failed to delete location");
      console.error("Delete location error:", err);
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <AlertDialog open={open} onOpenChange={onOpenChange}>
      <AlertDialogContent>
        <AlertDialogHeader>
          <AlertDialogTitle>Delete Location</AlertDialogTitle>
          <AlertDialogDescription>
            Are you sure you want to delete{" "}
            <span className="font-semibold">{location.name}</span>?
            <br />
            <br />
            This action cannot be undone. You can only delete locations that
            have no active divisions.
          </AlertDialogDescription>
        </AlertDialogHeader>
        <AlertDialogFooter>
          <Button
            variant="outline"
            onClick={() => onOpenChange(false)}
            disabled={isLoading}
          >
            Cancel
          </Button>
          <Button
            variant="destructive"
            onClick={handleDelete}
            disabled={isLoading}
          >
            {isLoading ? (
              <>
                <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                Deleting...
              </>
            ) : (
              "Delete Location"
            )}
          </Button>
        </AlertDialogFooter>
      </AlertDialogContent>
    </AlertDialog>
  );
}


----- components\features\league\locations\EditLocationDialog.tsx -----

// src/components/features/league/locations/EditLocationDialog.tsx

/**
 * SOLID - Single Responsibility Principle (SRP)
 * Edit location dialog ONLY
 */

"use client";

import { useState, useEffect } from "react";
import { useRouter } from "next/navigation";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Loader2 } from "lucide-react";
import { toast } from "sonner";
import {
  createLocationSchema,
  CreateLocationInput,
} from "@/lib/validations/location";

interface Location {
  _id: string;
  name: string;
  address: string;
  coordinates?: {
    latitude?: number;
    longitude?: number;
  };
}

interface City {
  _id: string;
  cityName: string;
}

interface EditLocationDialogProps {
  location: Location;
  cities: City[];
  open: boolean;
  onOpenChange: (open: boolean) => void;
}

export function EditLocationDialog({
  location,
  cities,
  open,
  onOpenChange,
}: EditLocationDialogProps) {
  const router = useRouter();
  const [isLoading, setIsLoading] = useState(false);

  const {
    register,
    handleSubmit,
    formState: { errors },
    reset,
  } = useForm<Omit<CreateLocationInput, "city">>({
    resolver: zodResolver(createLocationSchema.omit({ city: true })),
    defaultValues: {
      name: location.name,
      address: location.address,
      coordinates: location.coordinates,
    },
  });

  useEffect(() => {
    if (open) {
      reset({
        name: location.name,
        address: location.address,
        coordinates: location.coordinates,
      });
    }
  }, [open, location, reset]);

  const onSubmit = async (data: Omit<CreateLocationInput, "city">) => {
    setIsLoading(true);

    try {
      const response = await fetch("/api/v1/league/locations", {
        method: "PATCH",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          id: location._id,
          ...data,
        }),
      });

      const result = await response.json();

      if (!response.ok) {
        throw new Error(result.error || "Failed to update location");
      }

      toast.success("Location updated successfully!");
      onOpenChange(false);
      router.refresh();
    } catch (err: any) {
      toast.error(err.message || "Failed to update location");
      console.error("Update location error:", err);
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent>
        <DialogHeader>
          <DialogTitle>Edit Location</DialogTitle>
          <DialogDescription>Update location information</DialogDescription>
        </DialogHeader>

        <form onSubmit={handleSubmit(onSubmit)} className="space-y-4">
          <div>
            <Label htmlFor="edit-name">Location Name *</Label>
            <Input {...register("name")} id="edit-name" disabled={isLoading} />
            {errors.name && (
              <p className="text-sm text-red-600 mt-1">{errors.name.message}</p>
            )}
          </div>

          <div>
            <Label htmlFor="edit-address">Address *</Label>
            <Input
              {...register("address")}
              id="edit-address"
              disabled={isLoading}
            />
            {errors.address && (
              <p className="text-sm text-red-600 mt-1">
                {errors.address.message}
              </p>
            )}
          </div>

          <div className="border-t pt-4">
            <h3 className="text-sm font-medium mb-3">Coordinates (Optional)</h3>
            <div className="grid gap-4 md:grid-cols-2">
              <div>
                <Label htmlFor="edit-latitude">Latitude</Label>
                <Input
                  {...register("coordinates.latitude", {
                    valueAsNumber: true,
                    setValueAs: (v) => (v === "" ? undefined : parseFloat(v)),
                  })}
                  id="edit-latitude"
                  type="number"
                  step="any"
                  disabled={isLoading}
                />
              </div>

              <div>
                <Label htmlFor="edit-longitude">Longitude</Label>
                <Input
                  {...register("coordinates.longitude", {
                    valueAsNumber: true,
                    setValueAs: (v) => (v === "" ? undefined : parseFloat(v)),
                  })}
                  id="edit-longitude"
                  type="number"
                  step="any"
                  disabled={isLoading}
                />
              </div>
            </div>
          </div>

          <div className="flex gap-4 justify-end">
            <Button
              type="button"
              variant="outline"
              onClick={() => onOpenChange(false)}
              disabled={isLoading}
            >
              Cancel
            </Button>
            <Button type="submit" disabled={isLoading}>
              {isLoading ? (
                <>
                  <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                  Saving...
                </>
              ) : (
                "Save Changes"
              )}
            </Button>
          </div>
        </form>
      </DialogContent>
    </Dialog>
  );
}


----- components\features\league\locations\LocationsTable.tsx -----

// src/components/features/league/locations/LocationsTable.tsx

/**
 * SOLID - Single Responsibility Principle (SRP)
 * Display locations table ONLY
 */

"use client";

import { useState, useMemo } from "react";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import { Button } from "@/components/ui/button";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { MoreHorizontal, Pencil, Trash2, MapPin } from "lucide-react";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import { DeleteLocationDialog } from "./DeleteLocationDialog";
import { EditLocationDialog } from "./EditLocationDialog";

interface Location {
  _id: string;
  name: string;
  address: string;
  coordinates?: {
    latitude?: number;
    longitude?: number;
  };
}

interface City {
  _id: string;
  cityName: string;
  region: string;
  country: string;
  locations: any[];
}

interface LocationsTableProps {
  locations: Location[];
  cities: City[];
  cityId: string;
}

export function LocationsTable({
  locations,
  cities,
  cityId,
}: LocationsTableProps) {
  const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);
  const [editDialogOpen, setEditDialogOpen] = useState(false);
  const [selectedLocation, setSelectedLocation] = useState<Location | null>(
    null
  );
  const [filterCity, setFilterCity] = useState<string>("all");

  // Create a map of location IDs to city info
  const locationCityMap = useMemo(() => {
    const map = new Map<string, { cityName: string; cityId: string }>();
    cities.forEach((city) => {
      city.locations.forEach((loc: any) => {
        map.set(loc._id || loc, {
          cityName: `${city.cityName}, ${city.region}`,
          cityId: city._id,
        });
      });
    });
    return map;
  }, [cities]);

  const filteredLocations = useMemo(() => {
    if (filterCity === "all") return locations;

    return locations.filter((location) => {
      const cityInfo = locationCityMap.get(location._id);
      return cityInfo?.cityId === filterCity;
    });
  }, [locations, filterCity, locationCityMap]);

  const handleDelete = (location: Location) => {
    setSelectedLocation(location);
    setDeleteDialogOpen(true);
  };

  const handleEdit = (location: Location) => {
    setSelectedLocation(location);
    setEditDialogOpen(true);
  };

  return (
    <>
      <div className="mb-4">
        <div className="flex items-center gap-4">
          <label className="text-sm font-medium">Filter by City:</label>
          <Select value={filterCity} onValueChange={setFilterCity}>
            <SelectTrigger className="w-64">
              <SelectValue />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="all">All Cities</SelectItem>
              {cities.map((city) => (
                <SelectItem key={city._id} value={city._id}>
                  {city.cityName}, {city.region}
                </SelectItem>
              ))}
            </SelectContent>
          </Select>
        </div>
      </div>

      <div className="bg-white rounded-lg shadow">
        <Table>
          <TableHeader>
            <TableRow>
              <TableHead>Location Name</TableHead>
              <TableHead>Address</TableHead>
              <TableHead>City</TableHead>
              <TableHead>Coordinates</TableHead>
              <TableHead className="w-[70px]"></TableHead>
            </TableRow>
          </TableHeader>
          <TableBody>
            {filteredLocations.length === 0 ? (
              <TableRow>
                <TableCell
                  colSpan={5}
                  className="text-center py-8 text-gray-500"
                >
                  No locations found. Create your first location to get started.
                </TableCell>
              </TableRow>
            ) : (
              filteredLocations.map((location) => {
                const cityInfo = locationCityMap.get(location._id);
                return (
                  <TableRow key={location._id}>
                    <TableCell className="font-medium">
                      <div className="flex items-center gap-2">
                        <MapPin className="h-4 w-4 text-gray-400" />
                        {location.name}
                      </div>
                    </TableCell>
                    <TableCell>{location.address}</TableCell>
                    <TableCell className="text-sm text-gray-600">
                      {cityInfo?.cityName || "Unknown"}
                    </TableCell>
                    <TableCell className="text-sm text-gray-600">
                      {location.coordinates?.latitude &&
                      location.coordinates?.longitude
                        ? `${location.coordinates.latitude}, ${location.coordinates.longitude}`
                        : "Not set"}
                    </TableCell>
                    <TableCell>
                      <DropdownMenu>
                        <DropdownMenuTrigger asChild>
                          <Button variant="ghost" size="icon">
                            <MoreHorizontal className="h-4 w-4" />
                          </Button>
                        </DropdownMenuTrigger>
                        <DropdownMenuContent align="end">
                          <DropdownMenuItem
                            onClick={() => handleEdit(location)}
                          >
                            <Pencil className="mr-2 h-4 w-4" />
                            Edit
                          </DropdownMenuItem>
                          <DropdownMenuItem
                            onClick={() => handleDelete(location)}
                            className="text-red-600"
                          >
                            <Trash2 className="mr-2 h-4 w-4" />
                            Delete
                          </DropdownMenuItem>
                        </DropdownMenuContent>
                      </DropdownMenu>
                    </TableCell>
                  </TableRow>
                );
              })
            )}
          </TableBody>
        </Table>
      </div>

      {selectedLocation && (
        <>
          <DeleteLocationDialog
            location={selectedLocation}
            open={deleteDialogOpen}
            onOpenChange={setDeleteDialogOpen}
          />
          <EditLocationDialog
            location={selectedLocation}
            cities={cities}
            open={editDialogOpen}
            onOpenChange={setEditDialogOpen}
          />
        </>
      )}
    </>
  );
}


----- components\features\league\players\CreatePlayerForm.tsx -----

// src/components/features/league/players/CreatePlayerForm.tsx

/**
 * SOLID - Single Responsibility Principle (SRP)
 * Player creation form ONLY
 */

"use client";

import { useState, useEffect } from "react"; // Changed: Remove useMemo, add useEffect
import { useRouter } from "next/navigation";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Loader2, Info } from "lucide-react";
import { toast } from "sonner";
import {
  CreatePlayerInput,
  createPlayerSchema,
} from "@/lib/validations/player";
import { formatTime } from "@/lib/utils/time";

interface CreatePlayerFormProps {
  cityId: string;
  cities: any[];
}

export function CreatePlayerForm({ cityId, cities }: CreatePlayerFormProps) {
  const router = useRouter();
  const [isLoading, setIsLoading] = useState(false);
  const [selectedCity, setSelectedCity] = useState(cityId);
  const [loadingDivisions, setLoadingDivisions] = useState(false);
  const [divisions, setDivisions] = useState<any[]>([]);
  const [loadingTeams, setLoadingTeams] = useState(false);
  const [teams, setTeams] = useState<any[]>([]);

  const {
    register,
    handleSubmit,
    formState: { errors },
    setValue,
    watch,
  } = useForm<CreatePlayerInput>({
    resolver: zodResolver(createPlayerSchema),
  });

  const selectedDivision = watch("division");
  const selectedTeam = watch("team");

  // Define functions before using them
  const fetchDivisions = async (cityId: string) => {
    setLoadingDivisions(true);
    try {
      const response = await fetch(
        `/api/v1/${cityId}/divisions?page=1&limit=100`
      );
      const result = await response.json();

      if (result.success) {
        setDivisions(result.data.divisions || []);
      }
    } catch (error) {
      console.error("Error fetching divisions:", error);
      setDivisions([]);
    } finally {
      setLoadingDivisions(false);
    }
  };

  const fetchTeams = async (divisionId: string) => {
    setLoadingTeams(true);
    try {
      const response = await fetch(
        `/api/v1/${selectedCity}/teams?division=${divisionId}&limit=100`
      );
      const result = await response.json();

      if (result.success) {
        setTeams(result.data.teams || []);
      }
    } catch (error) {
      console.error("Error fetching teams:", error);
      setTeams([]);
    } finally {
      setLoadingTeams(false);
    }
  };

  // Fetch divisions when city changes
  useEffect(() => {
    if (selectedCity) {
      fetchDivisions(selectedCity);
    }
  }, [selectedCity]);

  // Fetch teams when division changes
  useEffect(() => {
    if (selectedDivision) {
      fetchTeams(selectedDivision);
    } else {
      setTeams([]);
    }
  }, [selectedDivision]);

  const onSubmit = async (data: CreatePlayerInput) => {
    setIsLoading(true);

    try {
      const response = await fetch(`/api/v1/${cityId}/players`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(data),
      });

      const result = await response.json();

      if (!response.ok) {
        throw new Error(result.error || "Failed to create player");
      }

      toast.success("Player created successfully!");
      router.push(`/admin/${cityId}/league/players/${result.data._id}`);
      router.refresh();
    } catch (err: any) {
      toast.error(err.message || "Failed to create player");
      console.error("Create player error:", err);
    } finally {
      setIsLoading(false);
    }
  };

  const onError = (errors: any) => {
    console.log("Form validation errors:", errors);
    toast.error("Please fill in all required fields");
  };

  return (
    <form onSubmit={handleSubmit(onSubmit, onError)} className="space-y-6">
      {/* Division Assignment */}
      <Card>
        <CardHeader>
          <CardTitle>Division Assignment</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div>
            <Label htmlFor="city">City *</Label>
            <Select
              value={selectedCity}
              onValueChange={(value) => {
                setSelectedCity(value);
                setValue("division", "", { shouldValidate: false });
                setValue("team", "", { shouldValidate: false });
                setDivisions([]);
                setTeams([]);
              }}
              disabled={isLoading}
            >
              <SelectTrigger>
                <SelectValue />
              </SelectTrigger>
              <SelectContent>
                {cities.map((city) => (
                  <SelectItem key={city._id} value={city._id}>
                    {city.cityName}, {city.region}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
          </div>

          <div>
            <Label htmlFor="division">Division *</Label>
            <Select
              value={selectedDivision}
              onValueChange={(value) => {
                setValue("division", value, { shouldValidate: true });
                setValue("team", "", { shouldValidate: false });
              }}
              disabled={isLoading || loadingDivisions || divisions.length === 0}
            >
              <SelectTrigger>
                <SelectValue
                  placeholder={
                    loadingDivisions ? "Loading..." : "Select division"
                  }
                />
              </SelectTrigger>
              <SelectContent>
                {divisions.map((division: any) => (
                  <SelectItem key={division._id} value={division._id}>
                    {division.location?.name} - {division.divisionName}:{" "}
                    {division.day} {formatTime(division.startTime)} -{" "}
                    {formatTime(division.endTime)}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
            {errors.division && (
              <p className="text-sm text-red-600 mt-1">
                {errors.division.message}
              </p>
            )}
          </div>

          <div>
            <Label htmlFor="team">Team (Optional)</Label>
            <Select
              value={selectedTeam}
              onValueChange={(value) =>
                setValue("team", value === "none" ? undefined : value)
              }
              disabled={isLoading || loadingTeams || !selectedDivision}
            >
              <SelectTrigger>
                <SelectValue
                  placeholder={
                    loadingTeams ? "Loading..." : "Free agent (no team)"
                  }
                />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="none">Free agent (no team)</SelectItem>
                {teams.map((team: any) => (
                  <SelectItem key={team._id} value={team._id}>
                    {team.teamName}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
            <p className="text-sm text-gray-500 mt-1">
              Leave as free agent or assign to a team in the selected division
            </p>
          </div>
        </CardContent>
      </Card>

      {/* Player Information */}
      <Card>
        <CardHeader>
          <CardTitle>Player Information</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div>
            <Label htmlFor="playerName">Player Name *</Label>
            <Input
              {...register("playerName")}
              id="playerName"
              placeholder="John Doe"
              disabled={isLoading}
            />
            {errors.playerName && (
              <p className="text-sm text-red-600 mt-1">
                {errors.playerName.message}
              </p>
            )}
          </div>

          <div>
            <Label htmlFor="instagram">Instagram (Optional)</Label>
            <Input
              {...register("instagram")}
              id="instagram"
              placeholder="@username"
              disabled={isLoading}
            />
          </div>
        </CardContent>
      </Card>

      {/* Jersey Information */}
      <Card>
        <CardHeader>
          <CardTitle>Jersey Information</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="grid gap-4 md:grid-cols-3">
            <div>
              <Label htmlFor="jerseyNumber">Jersey Number</Label>
              <Input
                {...register("jerseyNumber", { valueAsNumber: true })}
                id="jerseyNumber"
                type="number"
                min="0"
                max="99"
                placeholder="23"
                disabled={isLoading}
              />
              {errors.jerseyNumber && (
                <p className="text-sm text-red-600 mt-1">
                  {errors.jerseyNumber.message}
                </p>
              )}
            </div>

            <div>
              <Label htmlFor="jerseySize">Jersey Size</Label>
              <Select
                onValueChange={(value) =>
                  setValue(
                    "jerseySize",
                    value as "S" | "M" | "L" | "XL" | "2XL"
                  )
                }
                disabled={isLoading}
              >
                <SelectTrigger>
                  <SelectValue placeholder="Select size" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="S">Small</SelectItem>
                  <SelectItem value="M">Medium</SelectItem>
                  <SelectItem value="L">Large</SelectItem>
                  <SelectItem value="XL">XL</SelectItem>
                  <SelectItem value="2XL">2XL</SelectItem>
                </SelectContent>
              </Select>
            </div>

            <div>
              <Label htmlFor="jerseyName">Jersey Name</Label>
              <Input
                {...register("jerseyName")}
                id="jerseyName"
                placeholder="DOE"
                disabled={isLoading}
              />
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Info Message */}
      <div className="flex items-start gap-2 p-4 bg-blue-50 border border-blue-200 rounded-lg">
        <Info className="h-5 w-5 text-blue-600 flex-shrink-0 mt-0.5" />
        <div className="text-sm text-blue-800">
          <p className="font-medium">After creating this player:</p>
          <ul className="list-disc list-inside mt-1 space-y-1">
            <li>Set up payment in Payment Management section</li>
            <li>Optionally link to an existing User account</li>
            <li>Player stats will be tracked automatically during games</li>
          </ul>
        </div>
      </div>

      {/* Submit */}
      <div className="flex gap-4">
        <Button type="submit" disabled={isLoading}>
          {isLoading ? (
            <>
              <Loader2 className="mr-2 h-4 w-4 animate-spin" />
              Creating...
            </>
          ) : (
            "Create Player"
          )}
        </Button>
        <Button
          type="button"
          variant="outline"
          onClick={() => router.back()}
          disabled={isLoading}
        >
          Cancel
        </Button>
      </div>
    </form>
  );
}


----- components\features\league\players\EditPlayerForm.tsx -----

// src/components/features/league/players/EditPlayerForm.tsx

/**
 * SOLID - Single Responsibility Principle (SRP)
 * Player edit form ONLY
 */

"use client";

import { useState, useMemo, useEffect } from "react";
import { useRouter } from "next/navigation";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Loader2, AlertCircle } from "lucide-react";
import { toast } from "sonner";
import {
  updatePlayerSchema,
  UpdatePlayerInput,
} from "@/lib/validations/player";
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
} from "@/components/ui/alert-dialog";
import { UserSearchSelect } from "./UserSearchSelect";

interface EditPlayerFormProps {
  player: any;
  cityId: string;
  cities: any[];
}

export function EditPlayerForm({
  player,
  cityId,
  cities,
}: EditPlayerFormProps) {
  const router = useRouter();
  const [isLoading, setIsLoading] = useState(false);
  const [selectedCity, setSelectedCity] = useState(
    typeof player.division?.city === "object"
      ? player.division.city._id
      : player.division?.city || cityId
  );
  const [loadingDivisions, setLoadingDivisions] = useState(false);
  const [divisions, setDivisions] = useState<any[]>([]);
  const [loadingTeams, setLoadingTeams] = useState(false);
  const [teams, setTeams] = useState<any[]>([]);
  const [showDivisionChangeWarning, setShowDivisionChangeWarning] =
    useState(false);
  const [pendingDivisionChange, setPendingDivisionChange] = useState<
    string | null
  >(null);

  const {
    register,
    handleSubmit,
    formState: { errors },
    setValue,
    watch,
  } = useForm<UpdatePlayerInput>({
    resolver: zodResolver(updatePlayerSchema),
    defaultValues: {
      id: player._id.toString(),
      playerName: player.playerName,
      division:
        typeof player.division === "object"
          ? player.division._id.toString()
          : player.division,
      team: player.team?._id?.toString() || null,
      jerseyNumber: player.jerseyNumber || null,
      jerseySize: player.jerseySize || null,
      jerseyName: player.jerseyName || null,
      instagram: player.instagram || null,
      user: player.user?._id?.toString() || null,
    },
  });

  const selectedDivision = watch("division");
  const selectedTeam = watch("team");

  // Fetch divisions when city changes
  useEffect(() => {
    if (selectedCity) {
      fetchDivisions(selectedCity);
    }
  }, [selectedCity]);

  // Fetch teams when division changes
  useEffect(() => {
    if (selectedDivision) {
      fetchTeams(selectedDivision);
    } else {
      setTeams([]);
    }
  }, [selectedDivision]);

  const fetchDivisions = async (cityId: string) => {
    setLoadingDivisions(true);
    try {
      const response = await fetch(
        `/api/v1/${cityId}/divisions?page=1&limit=100`
      );
      const result = await response.json();

      if (result.success) {
        setDivisions(result.data.divisions || []);
      }
    } catch (error) {
      console.error("Error fetching divisions:", error);
      setDivisions([]);
    } finally {
      setLoadingDivisions(false);
    }
  };

  const fetchTeams = async (divisionId: string) => {
    setLoadingTeams(true);
    try {
      const response = await fetch(
        `/api/v1/${selectedCity}/teams?division=${divisionId}&limit=100`
      );
      const result = await response.json();

      if (result.success) {
        setTeams(result.data.teams || []);
      }
    } catch (error) {
      console.error("Error fetching teams:", error);
      setTeams([]);
    } finally {
      setLoadingTeams(false);
    }
  };

  const handleDivisionChange = (newDivisionId: string) => {
    const newDivision = divisions.find((d) => d._id === newDivisionId);
    const currentDivision = divisions.find((d) => d._id === selectedDivision);

    // Check if moving to different city
    if (
      newDivision &&
      currentDivision &&
      newDivision.city._id !== currentDivision.city._id
    ) {
      setPendingDivisionChange(newDivisionId);
      setShowDivisionChangeWarning(true);
    } else {
      setValue("division", newDivisionId, { shouldValidate: true });
      setValue("team", null, { shouldValidate: false });
    }
  };

  const confirmDivisionChange = () => {
    if (pendingDivisionChange) {
      setValue("division", pendingDivisionChange, { shouldValidate: true });
      setValue("team", null, { shouldValidate: false });
      const newDivision = divisions.find(
        (d) => d._id === pendingDivisionChange
      );
      if (newDivision) {
        setSelectedCity(newDivision.city._id);
      }
    }
    setShowDivisionChangeWarning(false);
    setPendingDivisionChange(null);
  };

  const onSubmit = async (data: UpdatePlayerInput) => {
    setIsLoading(true);

    try {
      const response = await fetch(`/api/v1/${cityId}/players/${player._id}`, {
        method: "PATCH",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(data),
      });

      const result = await response.json();

      if (!response.ok) {
        throw new Error(result.error || "Failed to update player");
      }

      toast.success("Player updated successfully!");
      router.push(`/admin/${cityId}/league/players/${player._id}`);
      router.refresh();
    } catch (err: any) {
      toast.error(err.message || "Failed to update player");
      console.error("Update player error:", err);
    } finally {
      setIsLoading(false);
    }
  };

  const onError = (errors: any) => {
    console.log("Form validation errors:", errors);
    toast.error("Please check the form for errors");
  };

  return (
    <>
      <form onSubmit={handleSubmit(onSubmit, onError)} className="space-y-6">
        {/* Division Assignment */}
        <Card>
          <CardHeader>
            <CardTitle>Division & Team</CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            <div>
              <Label htmlFor="division">Division *</Label>
              <Select
                value={selectedDivision}
                onValueChange={handleDivisionChange}
                disabled={isLoading || loadingDivisions}
              >
                <SelectTrigger>
                  <SelectValue
                    placeholder={
                      loadingDivisions ? "Loading..." : "Select division"
                    }
                  />
                </SelectTrigger>
                <SelectContent>
                  {divisions.map((division: any) => (
                    <SelectItem key={division._id} value={division._id}>
                      {division.divisionName} ({division.city?.cityName})
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
              {errors.division && (
                <p className="text-sm text-red-600 mt-1">
                  {errors.division.message}
                </p>
              )}
            </div>

            <div>
              <Label htmlFor="team">Team</Label>
              <Select
                value={selectedTeam || "none"}
                onValueChange={(value) =>
                  setValue("team", value === "none" ? null : value)
                }
                disabled={isLoading || loadingTeams || !selectedDivision}
              >
                <SelectTrigger>
                  <SelectValue
                    placeholder={loadingTeams ? "Loading..." : "Free agent"}
                  />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="none">Free agent (no team)</SelectItem>
                  {teams.map((team: any) => (
                    <SelectItem key={team._id} value={team._id}>
                      {team.teamName}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>
          </CardContent>
        </Card>

        {/* Player Information */}
        <Card>
          <CardHeader>
            <CardTitle>Player Information</CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            <div>
              <Label htmlFor="playerName">Player Name *</Label>
              <Input
                {...register("playerName")}
                id="playerName"
                disabled={isLoading}
              />
              {errors.playerName && (
                <p className="text-sm text-red-600 mt-1">
                  {errors.playerName.message}
                </p>
              )}
            </div>

            <div>
              <Label htmlFor="instagram">Instagram</Label>
              <Input
                {...register("instagram")}
                id="instagram"
                placeholder="@username"
                disabled={isLoading}
              />
            </div>
          </CardContent>
        </Card>

        {/* Jersey Information */}
        <Card>
          <CardHeader>
            <CardTitle>Jersey Information</CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="grid gap-4 md:grid-cols-3">
              <div>
                <Label htmlFor="jerseyNumber">Jersey Number</Label>
                <Input
                  {...register("jerseyNumber", { valueAsNumber: true })}
                  id="jerseyNumber"
                  type="number"
                  min="0"
                  max="99"
                  disabled={isLoading}
                />
                {errors.jerseyNumber && (
                  <p className="text-sm text-red-600 mt-1">
                    {errors.jerseyNumber.message}
                  </p>
                )}
              </div>

              <div>
                <Label htmlFor="jerseySize">Jersey Size</Label>
                <Select
                  value={watch("jerseySize") || "none"}
                  onValueChange={(value) =>
                    setValue(
                      "jerseySize",
                      value === "none"
                        ? null
                        : (value as "S" | "M" | "L" | "XL" | "2XL")
                    )
                  }
                  disabled={isLoading}
                >
                  <SelectTrigger>
                    <SelectValue placeholder="Select size" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="none">Not specified</SelectItem>
                    <SelectItem value="S">Small</SelectItem>
                    <SelectItem value="M">Medium</SelectItem>
                    <SelectItem value="L">Large</SelectItem>
                    <SelectItem value="XL">XL</SelectItem>
                    <SelectItem value="2XL">2XL</SelectItem>
                  </SelectContent>
                </Select>
              </div>

              <div>
                <Label htmlFor="jerseyName">Jersey Name</Label>
                <Input
                  {...register("jerseyName")}
                  id="jerseyName"
                  placeholder="DOE"
                  disabled={isLoading}
                />
              </div>
            </div>
          </CardContent>
        </Card>

        {/* User Account Link */}
        <Card>
          <CardHeader>
            <CardTitle>User Account</CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            {watch("user") ? (
              <div>
                <div className="flex items-center justify-between p-4 bg-green-50 border border-green-200 rounded-lg">
                  <div>
                    <p className="text-sm font-medium text-green-900">
                      Linked to User Account
                    </p>
                    <p className="text-sm text-green-700">
                      {(player.user as any)?.email || "User email"}
                    </p>
                  </div>
                  <Button
                    type="button"
                    variant="outline"
                    size="sm"
                    onClick={() => setValue("user", null)}
                    disabled={isLoading}
                  >
                    Unlink
                  </Button>
                </div>
                <p className="text-xs text-gray-500 mt-2">
                  Unlinking will not delete the user account, only remove the
                  connection to this player profile.
                </p>
              </div>
            ) : (
              <div>
                <div className="p-4 bg-gray-50 border border-gray-200 rounded-lg">
                  <p className="text-sm text-gray-500">
                    No user account linked to this player
                  </p>
                </div>
                <div className="mt-3">
                  <Label htmlFor="userLink">Link to Existing User</Label>
                  <UserSearchSelect
                    onSelectUser={(userId) => setValue("user", userId)}
                    disabled={isLoading}
                    cityId={cityId}
                  />
                  <p className="text-xs text-gray-500 mt-2">
                    Search by email to link this player to an existing user
                    account
                  </p>
                </div>
              </div>
            )}
          </CardContent>
        </Card>
        {/* Submit */}
        <div className="flex gap-4">
          <Button type="submit" disabled={isLoading}>
            {isLoading ? (
              <>
                <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                Updating...
              </>
            ) : (
              "Update Player"
            )}
          </Button>
          <Button
            type="button"
            variant="outline"
            onClick={() => router.back()}
            disabled={isLoading}
          >
            Cancel
          </Button>
        </div>
      </form>

      {/* Division Change Warning Dialog */}
      <AlertDialog
        open={showDivisionChangeWarning}
        onOpenChange={setShowDivisionChangeWarning}
      >
        <AlertDialogContent>
          <AlertDialogHeader>
            <AlertDialogTitle>Change Player Division?</AlertDialogTitle>
            <AlertDialogDescription>
              {pendingDivisionChange && (
                <>
                  You are moving this player from{" "}
                  <strong>
                    {
                      divisions.find((d) => d._id === selectedDivision)?.city
                        ?.cityName
                    }
                  </strong>{" "}
                  to{" "}
                  <strong>
                    {
                      divisions.find((d) => d._id === pendingDivisionChange)
                        ?.city?.cityName
                    }
                  </strong>
                  . The player will be removed from their current team and
                  become a free agent.
                </>
              )}
            </AlertDialogDescription>
          </AlertDialogHeader>
          <AlertDialogFooter>
            <AlertDialogCancel onClick={() => setPendingDivisionChange(null)}>
              Cancel
            </AlertDialogCancel>
            <AlertDialogAction onClick={confirmDivisionChange}>
              Confirm Change
            </AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>
    </>
  );
}


----- components\features\league\players\PlayerCard.tsx -----

// src/components/features/league/players/PlayerCard.tsx

/**
 * SOLID - Single Responsibility Principle (SRP)
 * Single player card display ONLY
 */

"use client";

import { useRouter } from "next/navigation";
import Link from "next/link";
import { Card, CardContent, CardHeader } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import { Trophy, Mail, User, MoreVertical, Pencil } from "lucide-react";
import { InstallmentProgress } from "@/components/features/payments/InstallmentProgress";

interface PlayerCardProps {
  player: any;
  cityId: string;
}

export function PlayerCard({ player, cityId }: PlayerCardProps) {
  const router = useRouter();

  const getPaymentBadge = () => {
    if (player.paymentStatus === "paid") {
      return (
        <Badge
          variant="outline"
          className="bg-green-100 text-green-800 border-green-200"
        >
          Paid
        </Badge>
      );
    }

    if (player.paymentStatus === "in_progress") {
      return (
        <div className="flex flex-col gap-2">
          <Badge
            variant="outline"
            className="bg-blue-100 text-blue-800 border-blue-200"
          >
            Installments
          </Badge>
          {player.installmentProgress && (
            <InstallmentProgress
              progress={player.installmentProgress}
              size="sm"
            />
          )}
        </div>
      );
    }

    return (
      <Badge
        variant="outline"
        className="bg-red-100 text-red-800 border-red-200"
      >
        Unpaid
      </Badge>
    );
  };

  return (
    <Card className="hover:shadow-lg transition-shadow">
      <CardHeader className="pb-3">
        <div className="flex items-start justify-between">
          <div className="space-y-1 flex-1">
            <div className="flex items-center gap-2 flex-wrap">
              {getPaymentBadge()}
              {!player.team && (
                <Badge
                  variant="outline"
                  className="bg-yellow-100 text-yellow-800 border-yellow-200"
                >
                  Free Agent
                </Badge>
              )}
            </div>
            <Link href={`/admin/${cityId}/league/players/${player._id}`}>
              <h3 className="font-semibold text-lg leading-tight hover:underline">
                {player.playerName}
              </h3>
            </Link>
            {player.jerseyNumber && (
              <p className="text-sm text-gray-500">#{player.jerseyNumber}</p>
            )}
          </div>
          <DropdownMenu>
            <DropdownMenuTrigger asChild>
              <Button variant="ghost" size="icon">
                <MoreVertical className="h-4 w-4" />
              </Button>
            </DropdownMenuTrigger>
            <DropdownMenuContent align="end">
              <DropdownMenuItem
                onClick={() =>
                  router.push(
                    `/admin/${cityId}/league/players/${player._id}/edit`
                  )
                }
              >
                <Pencil className="mr-2 h-4 w-4" />
                Edit Player
              </DropdownMenuItem>
            </DropdownMenuContent>
          </DropdownMenu>
        </div>
      </CardHeader>

      <CardContent className="space-y-3 text-sm">
        <div className="flex items-center gap-2 text-gray-600">
          <Trophy className="h-4 w-4 flex-shrink-0" />
          <span>
            {player.team?.teamName || "Free Agent"} -{" "}
            {player.division?.divisionName || "N/A"}
          </span>
        </div>

        {player.user && (
          <div className="flex items-center gap-2 text-gray-600">
            <Mail className="h-4 w-4 flex-shrink-0" />
            <span className="truncate">{player.user.email}</span>
          </div>
        )}

        {!player.user && (
          <div className="flex items-center gap-2 text-gray-500">
            <User className="h-4 w-4 flex-shrink-0" />
            <span className="text-xs">No user account linked</span>
          </div>
        )}

        {player.jerseySize && (
          <div className="pt-2 border-t">
            <span className="text-xs text-gray-500">Jersey: </span>
            <span className="text-xs font-medium">
              {player.jerseySize}
              {player.jerseyName && ` - ${player.jerseyName}`}
            </span>
          </div>
        )}
      </CardContent>
    </Card>
  );
}


----- components\features\league\players\PlayersContent.tsx -----

// src/components/features/league/players/PlayersContent.tsx

/**
 * SOLID - Single Responsibility Principle (SRP)
 * Player list orchestration with filters
 */

"use client";

import { useEffect, useMemo, useState } from "react";
import { useRouter, useSearchParams } from "next/navigation";
import { Tabs, TabsList, TabsTrigger } from "@/components/ui/tabs";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Input } from "@/components/ui/input";
import { Checkbox } from "@/components/ui/checkbox";
import { Label } from "@/components/ui/label";
import { Search } from "lucide-react";
import { PlayersGrid } from "./PlayersGrid";
import { Pagination } from "@/components/common/Pagination";
import { debounce } from "lodash";

interface PlayersContentProps {
  players: any[];
  pagination: {
    total: number;
    page: number;
    limit: number;
    totalPages: number;
  };
  divisions: any[];
  cityId: string;
  currentFilters: {
    payment?: string;
    division?: string;
    team?: string;
    freeAgents?: boolean;
    hasUser?: boolean;
    search?: string;
  };
}

export function PlayersContent({
  players,
  pagination,
  divisions,
  cityId,
  currentFilters,
}: PlayersContentProps) {
  const router = useRouter();
  const searchParams = useSearchParams();
  const [searchValue, setSearchValue] = useState(currentFilters.search || "");

  const updateFilters = (updates: Record<string, string | undefined>) => {
    const params = new URLSearchParams(searchParams.toString());

    Object.entries(updates).forEach(([key, value]) => {
      if (value) {
        params.set(key, value);
      } else {
        params.delete(key);
      }
    });

    if (!updates.page) {
      params.set("page", "1");
    }

    router.push(`/admin/${cityId}/league/players?${params.toString()}`);
  };

  // create a stable debounced version of updateFilters
  const debouncedUpdateFilters = useMemo(
    () =>
      debounce((value: string) => {
        updateFilters({ search: value || undefined });
      }, 500), // 500ms delay
    [searchParams] // dependencies
  );

  const handleSearch = (value: string) => {
    setSearchValue(value);
    debouncedUpdateFilters(value);
  };

  useEffect(() => {
    return () => {
      debouncedUpdateFilters.cancel();
    };
  }, [debouncedUpdateFilters]);

  console.log("players:", players);

  return (
    <div className="space-y-6">
      {/* Payment Status Tabs */}
      <Tabs
        value={currentFilters.payment || "all"}
        onValueChange={(value) => updateFilters({ payment: value })}
      >
        <TabsList>
          <TabsTrigger value="all">All Players</TabsTrigger>
          <TabsTrigger value="paid">Paid</TabsTrigger>
          <TabsTrigger value="in_progress">Installments</TabsTrigger>
          <TabsTrigger value="unpaid">Unpaid</TabsTrigger>
        </TabsList>
      </Tabs>

      {/* Filters */}
      <div className="flex flex-col gap-4">
        <div className="flex flex-col sm:flex-row gap-4">
          <div className="relative flex-1">
            <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400" />
            <Input
              placeholder="Search players..."
              value={searchValue}
              onChange={(e) => handleSearch(e.target.value)}
              className="pl-10"
            />
          </div>

          <Select
            value={currentFilters.division || "all"}
            onValueChange={(value) =>
              updateFilters({ division: value === "all" ? undefined : value })
            }
          >
            <SelectTrigger className="w-full sm:w-[200px]">
              <SelectValue placeholder="All Divisions" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="all">All Divisions</SelectItem>
              {divisions.map((division: any) => (
                <SelectItem key={division._id} value={division._id}>
                  {division.divisionName}
                </SelectItem>
              ))}
            </SelectContent>
          </Select>
        </div>

        <div className="flex flex-wrap gap-4">
          <div className="flex items-center space-x-2">
            <Checkbox
              id="freeAgents"
              checked={currentFilters.freeAgents}
              onCheckedChange={(checked) =>
                updateFilters({ freeAgents: checked ? "true" : undefined })
              }
            />
            <Label htmlFor="freeAgents" className="text-sm cursor-pointer">
              Free agents only
            </Label>
          </div>

          <div className="flex items-center space-x-2">
            <Checkbox
              id="hasUser"
              checked={currentFilters.hasUser}
              onCheckedChange={(checked) =>
                updateFilters({ hasUser: checked ? "true" : undefined })
              }
            />
            <Label htmlFor="hasUser" className="text-sm cursor-pointer">
              Has user account
            </Label>
          </div>
        </div>
      </div>

      {/* Players Grid */}
      <PlayersGrid players={players} cityId={cityId} />

      {/* Pagination */}
      <Pagination
        currentPage={pagination.page}
        totalPages={pagination.totalPages}
        total={pagination.total}
        limit={pagination.limit}
        onPageChange={(page) => updateFilters({ page: page.toString() })}
      />
    </div>
  );
}


----- components\features\league\players\PlayersGrid.tsx -----

// src/components/features/league/players/PlayersGrid.tsx

/**
 * SOLID - Single Responsibility Principle (SRP)
 * Display players in responsive card grid ONLY
 */

"use client";

import { Users } from "lucide-react";
import { PlayerCard } from "./PlayerCard";

interface PlayersGridProps {
  players: any[];
  cityId: string;
}

export function PlayersGrid({ players, cityId }: PlayersGridProps) {
  if (players.length === 0) {
    return (
      <div className="text-center py-12 bg-white rounded-lg shadow">
        <Users className="mx-auto h-12 w-12 text-gray-400" />
        <h3 className="mt-4 text-lg font-medium text-gray-900">
          No players found
        </h3>
        <p className="mt-2 text-sm text-gray-500">
          Try adjusting your filters or create a new player.
        </p>
      </div>
    );
  }

  return (
    <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-3">
      {players.map((player) => (
        <PlayerCard key={player._id} player={player} cityId={cityId} />
      ))}
    </div>
  );
}


----- components\features\league\players\UserSearchSelect.tsx -----

// src/components/features/league/players/UserSearchSelect.tsx

/**
 * SOLID - Single Responsibility Principle (SRP)
 * User search and select component ONLY
 */

"use client";

import { useState, useEffect } from "react";
import {
  Command,
  CommandEmpty,
  CommandGroup,
  CommandInput,
  CommandItem,
  CommandList,
} from "@/components/ui/command";
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/ui/popover";
import { Button } from "@/components/ui/button";
import { Check, ChevronsUpDown } from "lucide-react";
import { cn } from "@/lib/utils";

interface UserSearchSelectProps {
  onSelectUser: (userId: string) => void;
  disabled?: boolean;
  cityId: string;
}

export function UserSearchSelect({
  onSelectUser,
  disabled,
  cityId,
}: UserSearchSelectProps) {
  const [open, setOpen] = useState(false);
  const [users, setUsers] = useState<any[]>([]);
  const [loading, setLoading] = useState(false);
  const [searchQuery, setSearchQuery] = useState("");
  const [selectedUser, setSelectedUser] = useState<any>(null);

  useEffect(() => {
    if (searchQuery.length >= 2) {
      fetchUsers(searchQuery);
    } else {
      setUsers([]);
    }
  }, [searchQuery]);

  const fetchUsers = async (query: string) => {
    setLoading(true);
    try {
      const response = await fetch(
        `/api/v1/${cityId}/users/search?q=${encodeURIComponent(query)}`
      );
      const result = await response.json();

      if (result.success) {
        setUsers(result.data || []);
      }
    } catch (error) {
      console.error("Error fetching users:", error);
      setUsers([]);
    } finally {
      setLoading(false);
    }
  };

  const handleSelect = (user: any) => {
    setSelectedUser(user);
    onSelectUser(user._id);
    setOpen(false);
  };

  return (
    <Popover open={open} onOpenChange={setOpen}>
      <PopoverTrigger asChild>
        <Button
          variant="outline"
          role="combobox"
          aria-expanded={open}
          className="w-full justify-between"
          disabled={disabled}
        >
          {selectedUser ? selectedUser.email : "Search by email..."}
          <ChevronsUpDown className="ml-2 h-4 w-4 shrink-0 opacity-50" />
        </Button>
      </PopoverTrigger>
      <PopoverContent className="w-full p-0">
        <Command>
          <CommandInput
            placeholder="Type email to search..."
            value={searchQuery}
            onValueChange={setSearchQuery}
          />
          <CommandList>
            {loading && <CommandEmpty>Searching...</CommandEmpty>}
            {!loading && searchQuery.length < 2 && (
              <CommandEmpty>Type at least 2 characters to search</CommandEmpty>
            )}
            {!loading && searchQuery.length >= 2 && users.length === 0 && (
              <CommandEmpty>No users found</CommandEmpty>
            )}
            {users.length > 0 && (
              <CommandGroup>
                {users.map((user) => (
                  <CommandItem
                    key={user._id}
                    value={user._id}
                    onSelect={() => handleSelect(user)}
                  >
                    <Check
                      className={cn(
                        "mr-2 h-4 w-4",
                        selectedUser?._id === user._id
                          ? "opacity-100"
                          : "opacity-0"
                      )}
                    />
                    <div>
                      <p className="font-medium">{user.email}</p>
                      <p className="text-sm text-gray-500">{user.name}</p>
                    </div>
                  </CommandItem>
                ))}
              </CommandGroup>
            )}
          </CommandList>
        </Command>
      </PopoverContent>
    </Popover>
  );
}


----- components\features\league\prices\CreatePriceForm.tsx -----

// src/components/features/league/prices/CreatePriceForm.tsx

/**
 * SOLID - Single Responsibility Principle (SRP)
 * Price creation form ONLY
 */

"use client";

import { useState } from "react";
import { useRouter } from "next/navigation";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Loader2 } from "lucide-react";
import { toast } from "sonner";
import { createPriceSchema, CreatePriceInput } from "@/lib/validations/price";

interface CreatePriceFormProps {
  cityId: string;
}

export function CreatePriceForm({ cityId }: CreatePriceFormProps) {
  const router = useRouter();
  const [isLoading, setIsLoading] = useState(false);

  const {
    register,
    handleSubmit,
    formState: { errors },
    setValue,
    watch,
  } = useForm<CreatePriceInput>({
    resolver: zodResolver(createPriceSchema),
  });

  const selectedType = watch("type");

  const onSubmit = async (data: CreatePriceInput) => {
    setIsLoading(true);

    try {
      const response = await fetch("/api/v1/league/prices", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(data),
      });

      const result = await response.json();

      if (!response.ok) {
        throw new Error(result.error || "Failed to create price");
      }

      toast.success("Price created successfully!");
      router.push(`/admin/${cityId}/league/prices`);
      router.refresh();
    } catch (err: any) {
      toast.error(err.message || "Failed to create price");
      console.error("Create price error:", err);
    } finally {
      setIsLoading(false);
    }
  };

  const onError = (errors: any) => {
    console.log("Form validation errors:", errors);
    toast.error("Please fill in all required fields");
  };

  return (
    <form
      onSubmit={handleSubmit(onSubmit, onError)}
      className="space-y-6 bg-white p-6 rounded-lg shadow"
    >
      <div className="space-y-4">
        <div>
          <Label htmlFor="name">Display Name *</Label>
          <Input
            {...register("name")}
            id="name"
            placeholder="Winter 2025 Early Bird"
            disabled={isLoading}
          />
          {errors.name && (
            <p className="text-sm text-red-600 mt-1">{errors.name.message}</p>
          )}
        </div>

        <div>
          <Label htmlFor="priceId">Stripe Price ID *</Label>
          <Input
            {...register("priceId")}
            id="priceId"
            placeholder="price_1234567890abcdef"
            disabled={isLoading}
          />
          {errors.priceId && (
            <p className="text-sm text-red-600 mt-1">
              {errors.priceId.message}
            </p>
          )}
          <p className="text-sm text-gray-500 mt-1">
            Must start with "price_" from your Stripe account
          </p>
        </div>

        <div>
          <Label htmlFor="amount">Amount (USD) *</Label>
          <Input
            {...register("amount", { valueAsNumber: true })}
            id="amount"
            type="number"
            step="0.01"
            min="0"
            placeholder="150.00"
            disabled={isLoading}
          />
          {errors.amount && (
            <p className="text-sm text-red-600 mt-1">{errors.amount.message}</p>
          )}
        </div>

        <div>
          <Label htmlFor="type">Price Type *</Label>
          <Select
            value={selectedType}
            onValueChange={(value) =>
              setValue("type", value as any, { shouldValidate: true })
            }
            disabled={isLoading}
          >
            <SelectTrigger>
              <SelectValue placeholder="Select price type" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="earlyBird">
                Early Bird (Single Payment)
              </SelectItem>
              <SelectItem value="regular">Regular (Single Payment)</SelectItem>
              <SelectItem value="firstInstallment">
                First Installment (Down Payment)
              </SelectItem>
              <SelectItem value="installment">
                Installment - Early Bird (Weekly)
              </SelectItem>
              <SelectItem value="regularInstallment">
                Installment - Regular (Weekly)
              </SelectItem>
              <SelectItem value="free">Free</SelectItem>
            </SelectContent>
          </Select>
          {errors.type && (
            <p className="text-sm text-red-600 mt-1">{errors.type.message}</p>
          )}
        </div>
      </div>

      <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-4">
        <p className="text-sm text-yellow-800">
          <strong>Note:</strong> Prices are permanent once created and cannot be
          edited or deleted.
        </p>
      </div>

      <div className="flex gap-4">
        <Button type="submit" disabled={isLoading}>
          {isLoading ? (
            <>
              <Loader2 className="mr-2 h-4 w-4 animate-spin" />
              Creating...
            </>
          ) : (
            "Create Price"
          )}
        </Button>
        <Button
          type="button"
          variant="outline"
          onClick={() => router.back()}
          disabled={isLoading}
        >
          Cancel
        </Button>
      </div>
    </form>
  );
}


----- components\features\league\prices\PricesGrid.tsx -----

// src/components/features/league/prices/PricesGrid.tsx

/**
 * SOLID - Single Responsibility Principle (SRP)
 * Display prices in responsive card grid ONLY
 */

"use client";

import { useMemo } from "react";
import { Badge } from "@/components/ui/badge";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { DollarSign, Tag } from "lucide-react";

interface Price {
  _id: string;
  name: string;
  priceId: string;
  amount: number;
  type:
    | "earlyBird"
    | "regular"
    | "installment"
    | "regularInstallment"
    | "firstInstallment"
    | "free";
}

interface PricesGridProps {
  prices: Price[];
}

export function PricesGrid({ prices }: PricesGridProps) {
  const groupedPrices = useMemo(() => {
    return {
      earlyBird: prices.filter((p) => p.type === "earlyBird"),
      regular: prices.filter((p) => p.type === "regular"),
      installment: prices.filter((p) => p.type === "installment"),
      regularInstallment: prices.filter((p) => p.type === "regularInstallment"),
      firstInstallment: prices.filter((p) => p.type === "firstInstallment"),
      free: prices.filter((p) => p.type === "free"),
    };
  }, [prices]);

  const getTypeBadge = (type: string) => {
    const badges = {
      earlyBird: {
        label: "Early Bird",
        className: "bg-blue-100 text-blue-800 border-blue-200",
      },
      regular: {
        label: "Regular",
        className: "bg-gray-100 text-gray-800 border-gray-200",
      },
      installment: {
        label: "Installment (EB)",
        className: "bg-green-100 text-green-800 border-green-200",
      },
      regularInstallment: {
        label: "Installment (Reg)",
        className: "bg-orange-100 text-orange-800 border-orange-200",
      },
      firstInstallment: {
        label: "Down Payment",
        className: "bg-purple-100 text-purple-800 border-purple-200",
      },
      free: {
        label: "Free",
        className: "bg-yellow-100 text-yellow-800 border-yellow-200",
      },
    };
    return badges[type as keyof typeof badges] || badges.regular;
  };

  if (prices.length === 0) {
    return (
      <div className="text-center py-12 bg-white rounded-lg shadow">
        <DollarSign className="mx-auto h-12 w-12 text-gray-400" />
        <h3 className="mt-4 text-lg font-medium text-gray-900">
          No prices yet
        </h3>
        <p className="mt-2 text-sm text-gray-500">
          Get started by creating your first price from your Stripe account.
        </p>
      </div>
    );
  }

  const renderPriceSection = (title: string, prices: Price[]) => {
    if (prices.length === 0) return null;

    return (
      <div key={title} className="space-y-3">
        <h3 className="text-lg font-semibold text-gray-900">{title}</h3>
        <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
          {prices.map((price) => {
            const badge = getTypeBadge(price.type);
            return (
              <Card key={price._id}>
                <CardHeader className="pb-3">
                  <div className="flex items-start justify-between">
                    <CardTitle className="text-base">{price.name}</CardTitle>
                    <Badge variant="outline" className={badge.className}>
                      {badge.label}
                    </Badge>
                  </div>
                </CardHeader>
                <CardContent className="space-y-2">
                  <div className="flex items-center justify-between">
                    <span className="text-2xl font-bold text-gray-900">
                      ${price.amount.toFixed(2)}
                    </span>
                  </div>
                  <div className="text-xs text-gray-500 flex items-center gap-1">
                    <Tag className="h-3 w-3" />
                    {price.priceId}
                  </div>
                </CardContent>
              </Card>
            );
          })}
        </div>
      </div>
    );
  };

  return (
    <div className="space-y-8">
      {renderPriceSection("Single Payment", [
        ...groupedPrices.earlyBird,
        ...groupedPrices.regular,
      ])}
      {renderPriceSection("Installment Payments", [
        ...groupedPrices.firstInstallment,
        ...groupedPrices.installment,
        ...groupedPrices.regularInstallment,
      ])}
      {renderPriceSection("Free", groupedPrices.free)}
    </div>
  );
}


----- components\features\league\teams\AddPlayerDialog.tsx -----

// src/components/features/league/teams/AddPlayerDialog.tsx

/**
 * SOLID - Single Responsibility Principle (SRP)
 * Add player dialog ONLY
 */

"use client";

import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { ScrollArea } from "@/components/ui/scroll-area";
import { UserPlus } from "lucide-react";

interface AddPlayerDialogProps {
  open: boolean;
  onOpenChange: (open: boolean) => void;
  freeAgents: any[];
  onAddPlayer: (playerId: string) => void;
  isProcessing: boolean;
}

export function AddPlayerDialog({
  open,
  onOpenChange,
  freeAgents,
  onAddPlayer,
  isProcessing,
}: AddPlayerDialogProps) {
  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="max-w-md">
        <DialogHeader>
          <DialogTitle>Add Player to Roster</DialogTitle>
          <DialogDescription>
            Select a free agent from this division to add to the team
          </DialogDescription>
        </DialogHeader>

        <ScrollArea className="max-h-[400px] pr-4">
          <div className="space-y-2">
            {freeAgents.map((player) => (
              <div
                key={player._id}
                className="flex items-center justify-between p-3 rounded-lg border hover:bg-gray-50"
              >
                <div className="flex items-center gap-3">
                  <div className="flex items-center justify-center w-10 h-10 rounded-full bg-gray-100 font-bold text-gray-600">
                    {player.jerseyNumber || "—"}
                  </div>
                  <div>
                    <p className="font-medium">{player.playerName}</p>
                  </div>
                </div>
                <Button
                  size="sm"
                  onClick={() => onAddPlayer(player._id)}
                  disabled={isProcessing}
                >
                  <UserPlus className="h-4 w-4 mr-2" />
                  Add
                </Button>
              </div>
            ))}
          </div>
        </ScrollArea>
      </DialogContent>
    </Dialog>
  );
}


----- components\features\league\teams\CreateTeamForm.tsx -----

// src/components/features/league/teams/CreateTeamForm.tsx

/**
 * SOLID - Single Responsibility Principle (SRP)
 * Team creation form ONLY
 */

"use client";

import { useState, useMemo } from "react";
import { useRouter } from "next/navigation";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Loader2, Info } from "lucide-react";
import { toast } from "sonner";
import { createTeamSchema, CreateTeamInput } from "@/lib/validations/team";

interface CreateTeamFormProps {
  cityId: string;
  cities: any[];
}

export function CreateTeamForm({ cityId, cities }: CreateTeamFormProps) {
  const router = useRouter();
  const [isLoading, setIsLoading] = useState(false);
  const [selectedCity, setSelectedCity] = useState(cityId);
  const [loadingDivisions, setLoadingDivisions] = useState(false);
  const [divisions, setDivisions] = useState<any[]>([]);

  const {
    register,
    handleSubmit,
    formState: { errors },
    setValue,
    watch,
  } = useForm<CreateTeamInput>({
    resolver: zodResolver(createTeamSchema),
    defaultValues: {
      city: cityId,
    },
  });

  const selectedLocation = watch("location");
  const selectedDivision = watch("division");

  // Filter locations by selected city
  const availableLocations = useMemo(() => {
    const city = cities.find((c) => c._id === selectedCity);
    return city?.locations || [];
  }, [cities, selectedCity]);

  // Fetch divisions when city or location changes
  const fetchDivisions = async (cityId: string, locationId?: string) => {
    setLoadingDivisions(true);
    try {
      const params = new URLSearchParams({
        page: "1",
        limit: "100",
      });
      if (locationId) params.append("location", locationId);

      const response = await fetch(
        `/api/v1/${cityId}/divisions?${params.toString()}`
      );
      const result = await response.json();

      if (result.success) {
        setDivisions(result.data.divisions || []);
      }
    } catch (error) {
      console.error("Error fetching divisions:", error);
      setDivisions([]);
    } finally {
      setLoadingDivisions(false);
    }
  };

  // Fetch divisions when city changes
  useMemo(() => {
    if (selectedCity) {
      fetchDivisions(selectedCity, selectedLocation);
    }
  }, [selectedCity, selectedLocation]);

  const onSubmit = async (data: CreateTeamInput) => {
    setIsLoading(true);

    try {
      const response = await fetch(`/api/v1/${cityId}/teams`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(data),
      });

      const result = await response.json();

      if (!response.ok) {
        throw new Error(result.error || "Failed to create team");
      }

      toast.success("Team created successfully!");
      router.push(`/admin/${cityId}/league/teams/${result.data._id}`);
      router.refresh();
    } catch (err: any) {
      toast.error(err.message || "Failed to create team");
      console.error("Create team error:", err);
    } finally {
      setIsLoading(false);
    }
  };

  const onError = (errors: any) => {
    console.log("Form validation errors:", errors);
    toast.error("Please fill in all required fields");
  };

  return (
    <form onSubmit={handleSubmit(onSubmit, onError)} className="space-y-6">
      {/* Location Selection */}
      <Card>
        <CardHeader>
          <CardTitle>Location</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div>
            <Label htmlFor="city">City *</Label>
            <Select
              value={selectedCity}
              onValueChange={(value) => {
                setSelectedCity(value);
                setValue("city", value, { shouldValidate: true });
                setValue("location", "", { shouldValidate: false });
                setValue("division", "", { shouldValidate: false });
                setDivisions([]);
              }}
              disabled={isLoading}
            >
              <SelectTrigger>
                <SelectValue />
              </SelectTrigger>
              <SelectContent>
                {cities.map((city) => (
                  <SelectItem key={city._id} value={city._id}>
                    {city.cityName}, {city.region}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
            {errors.city && (
              <p className="text-sm text-red-600 mt-1">{errors.city.message}</p>
            )}
          </div>

          <div>
            <Label htmlFor="location">Location *</Label>
            <Select
              value={selectedLocation}
              onValueChange={(value) => {
                setValue("location", value, { shouldValidate: true });
                setValue("division", "", { shouldValidate: false });
              }}
              disabled={isLoading || availableLocations.length === 0}
            >
              <SelectTrigger>
                <SelectValue placeholder="Select location" />
              </SelectTrigger>
              <SelectContent>
                {availableLocations.map((location: any) => (
                  <SelectItem
                    key={location._id || location}
                    value={location._id || location}
                  >
                    {location.name || "Location"}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
            {errors.location && (
              <p className="text-sm text-red-600 mt-1">
                {errors.location.message}
              </p>
            )}
          </div>

          <div>
            <Label htmlFor="division">Division *</Label>
            <Select
              value={selectedDivision}
              onValueChange={(value) =>
                setValue("division", value, { shouldValidate: true })
              }
              disabled={isLoading || loadingDivisions || divisions.length === 0}
            >
              <SelectTrigger>
                <SelectValue
                  placeholder={
                    loadingDivisions ? "Loading..." : "Select division"
                  }
                />
              </SelectTrigger>
              <SelectContent>
                {divisions.map((division: any) => (
                  <SelectItem key={division._id} value={division._id}>
                    {division.divisionName}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
            {errors.division && (
              <p className="text-sm text-red-600 mt-1">
                {errors.division.message}
              </p>
            )}
          </div>
        </CardContent>
      </Card>

      {/* Team Information */}
      <Card>
        <CardHeader>
          <CardTitle>Team Information</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div>
            <Label htmlFor="teamName">Team Name *</Label>
            <Input
              {...register("teamName")}
              id="teamName"
              placeholder="Toronto Raptors"
              disabled={isLoading}
            />
            {errors.teamName && (
              <p className="text-sm text-red-600 mt-1">
                {errors.teamName.message}
              </p>
            )}
          </div>

          <div>
            <Label htmlFor="teamNameShort">Team Name Short *</Label>
            <Input
              {...register("teamNameShort")}
              id="teamNameShort"
              placeholder="Raptors"
              disabled={isLoading}
            />
            {errors.teamNameShort && (
              <p className="text-sm text-red-600 mt-1">
                {errors.teamNameShort.message}
              </p>
            )}
          </div>

          <div>
            <Label htmlFor="teamCode">Team Code *</Label>
            <Input
              {...register("teamCode")}
              id="teamCode"
              placeholder="TOR-RAP"
              disabled={isLoading}
              onChange={(e) => {
                const upper = e.target.value.toUpperCase();
                setValue("teamCode", upper);
              }}
            />
            {errors.teamCode && (
              <p className="text-sm text-red-600 mt-1">
                {errors.teamCode.message}
              </p>
            )}
            <p className="text-sm text-gray-500 mt-1">
              Will be converted to uppercase. Must be unique within the
              division.
            </p>
          </div>
        </CardContent>
      </Card>

      {/* Info Message */}
      <div className="flex items-start gap-2 p-4 bg-blue-50 border border-blue-200 rounded-lg">
        <Info className="h-5 w-5 text-blue-600 flex-shrink-0 mt-0.5" />
        <div className="text-sm text-blue-800">
          <p className="font-medium">What happens after creation:</p>
          <ul className="list-disc list-inside mt-1 space-y-1">
            <li>Add players to the roster</li>
            <li>Assign a team captain from the roster</li>
            <li>Configure jersey colors and design (in Jersey Management)</li>
            <li>Stats will update automatically as games are played</li>
          </ul>
        </div>
      </div>

      {/* Submit */}
      <div className="flex gap-4">
        <Button type="submit" disabled={isLoading}>
          {isLoading ? (
            <>
              <Loader2 className="mr-2 h-4 w-4 animate-spin" />
              Creating...
            </>
          ) : (
            "Create Team"
          )}
        </Button>
        <Button
          type="button"
          variant="outline"
          onClick={() => router.back()}
          disabled={isLoading}
        >
          Cancel
        </Button>
      </div>
    </form>
  );
}


----- components\features\league\teams\EditTeamForm.tsx -----

// src/components/features/league/teams/EditTeamForm.tsx

/**
 * SOLID - Single Responsibility Principle (SRP)
 * Team edit form ONLY
 */

"use client";

import { useState, useMemo, useEffect } from "react";
import { useRouter } from "next/navigation";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Loader2, AlertCircle } from "lucide-react";
import { toast } from "sonner";
import { updateTeamSchema, UpdateTeamInput } from "@/lib/validations/team";
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
} from "@/components/ui/alert-dialog";

interface EditTeamFormProps {
  team: any;
  cityId: string;
  cities: any[];
}

export function EditTeamForm({ team, cityId, cities }: EditTeamFormProps) {
  const router = useRouter();
  const [isLoading, setIsLoading] = useState(false);
  const [selectedCity, setSelectedCity] = useState(
    typeof team.division?.city === "object"
      ? team.division.city._id
      : team.division?.city || cityId
  );
  const [loadingDivisions, setLoadingDivisions] = useState(false);
  const [divisions, setDivisions] = useState<any[]>([]);
  const [showMoveWarning, setShowMoveWarning] = useState(false);
  const [pendingDivisionChange, setPendingDivisionChange] = useState<
    string | null
  >(null);

  const {
    register,
    handleSubmit,
    formState: { errors },
    setValue,
    watch,
  } = useForm<UpdateTeamInput>({
    resolver: zodResolver(updateTeamSchema),
    defaultValues: {
      id: team._id.toString(),
      teamName: team.teamName,
      teamNameShort: team.teamNameShort,
      teamCode: team.teamCode,
      division:
        typeof team.division === "object"
          ? team.division._id.toString()
          : team.division,
      teamCaptain: team.teamCaptain?._id?.toString() || null,
    },
  });

  const selectedDivision = watch("division");
  const selectedCaptain = watch("teamCaptain");

  // Filter locations by selected city
  const availableLocations = useMemo(() => {
    const city = cities.find((c) => c._id === selectedCity);
    return city?.locations || [];
  }, [cities, selectedCity]);

  // Fetch divisions when city changes
  const fetchDivisions = async (cityId: string) => {
    setLoadingDivisions(true);
    try {
      const response = await fetch(
        `/api/v1/${cityId}/divisions?page=1&limit=100`
      );
      const result = await response.json();

      if (result.success) {
        setDivisions(result.data.divisions || []);
      }
    } catch (error) {
      console.error("Error fetching divisions:", error);
      setDivisions([]);
    } finally {
      setLoadingDivisions(false);
    }
  };

  // Fetch divisions when city changes
  useEffect(() => {
    if (selectedCity) {
      fetchDivisions(selectedCity);
    }
  }, [selectedCity]);

  const handleDivisionChange = (newDivisionId: string) => {
    const newDivision = divisions.find((d) => d._id === newDivisionId);
    const currentDivision = divisions.find((d) => d._id === selectedDivision);

    // Check if moving to different city
    if (
      newDivision &&
      currentDivision &&
      newDivision.city._id !== currentDivision.city._id
    ) {
      setPendingDivisionChange(newDivisionId);
      setShowMoveWarning(true);
    } else {
      setValue("division", newDivisionId, { shouldValidate: true });
    }
  };

  const confirmDivisionChange = () => {
    if (pendingDivisionChange) {
      setValue("division", pendingDivisionChange, { shouldValidate: true });
      const newDivision = divisions.find(
        (d) => d._id === pendingDivisionChange
      );
      if (newDivision) {
        setSelectedCity(newDivision.city._id);
      }
    }
    setShowMoveWarning(false);
    setPendingDivisionChange(null);
  };

  const onSubmit = async (data: UpdateTeamInput) => {
    setIsLoading(true);

    try {
      const response = await fetch(`/api/v1/${cityId}/teams`, {
        method: "PATCH",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(data),
      });

      const result = await response.json();

      if (!response.ok) {
        throw new Error(result.error || "Failed to update team");
      }

      toast.success("Team updated successfully!");
      router.push(`/admin/${cityId}/league/teams/${team._id}`);
      router.refresh();
    } catch (err: any) {
      toast.error(err.message || "Failed to update team");
      console.error("Update team error:", err);
    } finally {
      setIsLoading(false);
    }
  };

  const onError = (errors: any) => {
    console.log("Form validation errors:", errors);
    toast.error("Please fill in all required fields");
  };

  return (
    <>
      <form onSubmit={handleSubmit(onSubmit, onError)} className="space-y-6">
        {/* Division */}
        <Card>
          <CardHeader>
            <CardTitle>Division</CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            <div>
              <Label htmlFor="division">Division *</Label>
              <Select
                value={selectedDivision}
                onValueChange={handleDivisionChange}
                disabled={isLoading || loadingDivisions}
              >
                <SelectTrigger>
                  <SelectValue
                    placeholder={
                      loadingDivisions ? "Loading..." : "Select division"
                    }
                  />
                </SelectTrigger>
                <SelectContent>
                  {divisions.map((division: any) => (
                    <SelectItem key={division._id} value={division._id}>
                      {division.divisionName} ({division.city?.cityName})
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
              {errors.division && (
                <p className="text-sm text-red-600 mt-1">
                  {errors.division.message}
                </p>
              )}
            </div>
          </CardContent>
        </Card>

        {/* Team Information */}
        <Card>
          <CardHeader>
            <CardTitle>Team Information</CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            <div>
              <Label htmlFor="teamName">Team Name *</Label>
              <Input
                {...register("teamName")}
                id="teamName"
                disabled={isLoading}
              />
              {errors.teamName && (
                <p className="text-sm text-red-600 mt-1">
                  {errors.teamName.message}
                </p>
              )}
            </div>

            <div>
              <Label htmlFor="teamNameShort">Team Name Short *</Label>
              <Input
                {...register("teamNameShort")}
                id="teamNameShort"
                disabled={isLoading}
              />
              {errors.teamNameShort && (
                <p className="text-sm text-red-600 mt-1">
                  {errors.teamNameShort.message}
                </p>
              )}
            </div>

            <div>
              <Label htmlFor="teamCode">Team Code *</Label>
              <Input
                {...register("teamCode")}
                id="teamCode"
                disabled={isLoading}
                onChange={(e) => {
                  const upper = e.target.value.toUpperCase();
                  setValue("teamCode", upper);
                }}
              />
              {errors.teamCode && (
                <p className="text-sm text-red-600 mt-1">
                  {errors.teamCode.message}
                </p>
              )}
              <p className="text-sm text-gray-500 mt-1">
                Must be unique within the division
              </p>
            </div>
          </CardContent>
        </Card>

        {/* Team Captain */}
        <Card>
          <CardHeader>
            <CardTitle>Team Captain</CardTitle>
          </CardHeader>
          <CardContent>
            {team.players && team.players.length > 0 ? (
              <div>
                <Label htmlFor="teamCaptain">Select Captain</Label>
                <Select
                  value={selectedCaptain || "none"}
                  onValueChange={(value) =>
                    setValue("teamCaptain", value === "none" ? null : value)
                  }
                  disabled={isLoading}
                >
                  <SelectTrigger>
                    <SelectValue placeholder="No captain assigned" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="none">No captain</SelectItem>
                    {team.players.map((player: any) => (
                      <SelectItem
                        key={player._id}
                        value={player._id.toString()}
                      >
                        {player.playerName}
                        {player.jerseyNumber && ` (#${player.jerseyNumber})`}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
                {!selectedCaptain && (
                  <div className="flex items-start gap-2 mt-2 p-3 bg-yellow-50 border border-yellow-200 rounded-lg">
                    <AlertCircle className="h-5 w-5 text-yellow-600 flex-shrink-0 mt-0.5" />
                    <p className="text-sm text-yellow-800">
                      No captain assigned. Consider assigning a team captain.
                    </p>
                  </div>
                )}
              </div>
            ) : (
              <div className="text-sm text-gray-500 p-4 bg-gray-50 rounded-lg">
                Add players to the roster before assigning a captain.
              </div>
            )}
          </CardContent>
        </Card>

        {/* Submit */}
        <div className="flex gap-4">
          <Button type="submit" disabled={isLoading}>
            {isLoading ? (
              <>
                <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                Updating...
              </>
            ) : (
              "Update Team"
            )}
          </Button>
          <Button
            type="button"
            variant="outline"
            onClick={() => router.back()}
            disabled={isLoading}
          >
            Cancel
          </Button>
        </div>
      </form>

      {/* Move Team Warning Dialog */}
      <AlertDialog open={showMoveWarning} onOpenChange={setShowMoveWarning}>
        <AlertDialogContent>
          <AlertDialogHeader>
            <AlertDialogTitle>Move Team to Different City?</AlertDialogTitle>
            <AlertDialogDescription>
              {pendingDivisionChange && (
                <>
                  You are moving this team from{" "}
                  <strong>
                    {
                      divisions.find((d) => d._id === selectedDivision)?.city
                        ?.cityName
                    }
                  </strong>{" "}
                  to{" "}
                  <strong>
                    {
                      divisions.find((d) => d._id === pendingDivisionChange)
                        ?.city?.cityName
                    }
                  </strong>
                  . All stats and history will be preserved.
                </>
              )}
            </AlertDialogDescription>
          </AlertDialogHeader>
          <AlertDialogFooter>
            <AlertDialogCancel onClick={() => setPendingDivisionChange(null)}>
              Cancel
            </AlertDialogCancel>
            <AlertDialogAction onClick={confirmDivisionChange}>
              Confirm Move
            </AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>
    </>
  );
}


----- components\features\league\teams\QuickCreatePlayerDialog.tsx -----

// src/components/features/league/teams/QuickCreatePlayerDialog.tsx

/**
 * SOLID - Single Responsibility Principle (SRP)
 * Quick create player and add to team dialog ONLY
 */

"use client";

import { useState } from "react";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Loader2 } from "lucide-react";
import { toast } from "sonner";
import { z } from "zod";

// Simplified schema for quick create
const quickCreateSchema = z.object({
  playerName: z.string().min(2, "Player name must be at least 2 characters"),
  jerseyNumber: z
    .number()
    .min(0, "Jersey number must be 0 or greater")
    .max(99, "Jersey number must be 99 or less")
    .optional()
    .nullable(),
  jerseySize: z.enum(["S", "M", "L", "XL", "2XL"]).optional(),
});

type QuickCreateInput = z.infer<typeof quickCreateSchema>;

interface QuickCreatePlayerDialogProps {
  open: boolean;
  onOpenChange: (open: boolean) => void;
  team: any;
  cityId: string;
  onSuccess: () => void;
}

export function QuickCreatePlayerDialog({
  open,
  onOpenChange,
  team,
  cityId,
  onSuccess,
}: QuickCreatePlayerDialogProps) {
  const [isLoading, setIsLoading] = useState(false);

  const {
    register,
    handleSubmit,
    formState: { errors },
    setValue,
    reset,
  } = useForm<QuickCreateInput>({
    resolver: zodResolver(quickCreateSchema),
  });

  const onSubmit = async (data: QuickCreateInput) => {
    setIsLoading(true);

    try {
      // Create player with team assignment
      const createPayload = {
        playerName: data.playerName,
        division:
          typeof team.division === "object" ? team.division._id : team.division,
        team: team._id,
        jerseyNumber: data.jerseyNumber,
        jerseySize: data.jerseySize,
      };

      const response = await fetch(`/api/v1/${cityId}/players`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(createPayload),
      });

      const result = await response.json();

      if (!response.ok) {
        throw new Error(result.error || "Failed to create player");
      }

      toast.success("Player created and added to roster!");
      reset();
      onSuccess();
    } catch (err: any) {
      toast.error(err.message || "Failed to create player");
      console.error("Quick create player error:", err);
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="max-w-md">
        <DialogHeader>
          <DialogTitle>Quick Create Player</DialogTitle>
          <DialogDescription>
            Create a new player and add them to {team.teamName}
          </DialogDescription>
        </DialogHeader>

        <form onSubmit={handleSubmit(onSubmit)} className="space-y-4">
          <div>
            <Label htmlFor="playerName">Player Name *</Label>
            <Input
              {...register("playerName")}
              id="playerName"
              placeholder="John Doe"
              disabled={isLoading}
            />
            {errors.playerName && (
              <p className="text-sm text-red-600 mt-1">
                {errors.playerName.message}
              </p>
            )}
          </div>

          <div className="grid gap-4 md:grid-cols-2">
            <div>
              <Label htmlFor="jerseyNumber">Jersey Number</Label>
              <Input
                {...register("jerseyNumber", { valueAsNumber: true })}
                id="jerseyNumber"
                type="number"
                min="0"
                max="99"
                placeholder="23"
                disabled={isLoading}
              />
              {errors.jerseyNumber && (
                <p className="text-sm text-red-600 mt-1">
                  {errors.jerseyNumber.message}
                </p>
              )}
            </div>

            <div>
              <Label htmlFor="jerseySize">Jersey Size</Label>
              <Select
                onValueChange={(value) =>
                  setValue(
                    "jerseySize",
                    value as "S" | "M" | "L" | "XL" | "2XL"
                  )
                }
                disabled={isLoading}
              >
                <SelectTrigger>
                  <SelectValue placeholder="Select size" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="S">Small</SelectItem>
                  <SelectItem value="M">Medium</SelectItem>
                  <SelectItem value="L">Large</SelectItem>
                  <SelectItem value="XL">XL</SelectItem>
                  <SelectItem value="2XL">2XL</SelectItem>
                </SelectContent>
              </Select>
            </div>
          </div>

          <div className="flex gap-3 pt-4">
            <Button type="submit" disabled={isLoading} className="flex-1">
              {isLoading ? (
                <>
                  <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                  Creating...
                </>
              ) : (
                "Create & Add to Roster"
              )}
            </Button>
            <Button
              type="button"
              variant="outline"
              onClick={() => onOpenChange(false)}
              disabled={isLoading}
            >
              Cancel
            </Button>
          </div>
        </form>
      </DialogContent>
    </Dialog>
  );
}


----- components\features\league\teams\RemovePlayerDialog.tsx -----

// src/components/features/league/teams/RemovePlayerDialog.tsx

/**
 * SOLID - Single Responsibility Principle (SRP)
 * Remove player confirmation dialog ONLY
 */

"use client";

import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
} from "@/components/ui/alert-dialog";
import { AlertCircle } from "lucide-react";

interface RemovePlayerDialogProps {
  open: boolean;
  onOpenChange: (open: boolean) => void;
  player: any;
  onRemove: (playerId: string) => void;
  isProcessing: boolean;
  isCaptain: boolean;
}

export function RemovePlayerDialog({
  open,
  onOpenChange,
  player,
  onRemove,
  isProcessing,
  isCaptain,
}: RemovePlayerDialogProps) {
  if (!player) return null;

  return (
    <AlertDialog open={open} onOpenChange={onOpenChange}>
      <AlertDialogContent>
        <AlertDialogHeader>
          <AlertDialogTitle>Remove Player from Roster?</AlertDialogTitle>
          <AlertDialogDescription>
            Are you sure you want to remove <strong>{player.playerName}</strong>{" "}
            from the team? This player will become a free agent in the division.
            {isCaptain && (
              <div className="flex items-start gap-2 mt-3 p-3 bg-yellow-50 border border-yellow-200 rounded-lg">
                <AlertCircle className="h-5 w-5 text-yellow-600 flex-shrink-0 mt-0.5" />
                <p className="text-sm text-yellow-800">
                  This player is the team captain. Removing them will also
                  remove the captain assignment.
                </p>
              </div>
            )}
          </AlertDialogDescription>
        </AlertDialogHeader>
        <AlertDialogFooter>
          <AlertDialogCancel>Cancel</AlertDialogCancel>
          <AlertDialogAction
            onClick={() => onRemove(player._id)}
            disabled={isProcessing}
            className="bg-red-600 hover:bg-red-700"
          >
            {isProcessing ? "Removing..." : "Remove Player"}
          </AlertDialogAction>
        </AlertDialogFooter>
      </AlertDialogContent>
    </AlertDialog>
  );
}


----- components\features\league\teams\RosterManager.tsx -----

// src/components/features/league/teams/RosterManager.tsx - Add quick create

/**
 * SOLID - Single Responsibility Principle (SRP)
 * Roster management orchestration ONLY
 */

"use client";

import { useState, useEffect } from "react";
import { useRouter } from "next/navigation";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Users, UserPlus, Trash2, AlertCircle, Plus } from "lucide-react";
import { toast } from "sonner";
import { AddPlayerDialog } from "./AddPlayerDialog";
import { RemovePlayerDialog } from "./RemovePlayerDialog";
import { QuickCreatePlayerDialog } from "./QuickCreatePlayerDialog";

interface RosterManagerProps {
  team: any;
  cityId: string;
}

export function RosterManager({ team, cityId }: RosterManagerProps) {
  const router = useRouter();
  const [freeAgents, setFreeAgents] = useState<any[]>([]);
  const [loadingFreeAgents, setLoadingFreeAgents] = useState(true);
  const [showAddDialog, setShowAddDialog] = useState(false);
  const [showRemoveDialog, setShowRemoveDialog] = useState(false);
  const [showQuickCreateDialog, setShowQuickCreateDialog] = useState(false);
  const [selectedPlayer, setSelectedPlayer] = useState<any>(null);
  const [isProcessing, setIsProcessing] = useState(false);

  useEffect(() => {
    fetchFreeAgents();
  }, [team._id]);

  const fetchFreeAgents = async () => {
    setLoadingFreeAgents(true);
    try {
      const response = await fetch(
        `/api/v1/${cityId}/teams/${team._id}/roster`
      );
      const result = await response.json();

      if (result.success) {
        setFreeAgents(result.data || []);
      }
    } catch (error) {
      console.error("Error fetching free agents:", error);
      toast.error("Failed to load free agents");
    } finally {
      setLoadingFreeAgents(false);
    }
  };

  const handleAddPlayer = async (playerId: string) => {
    setIsProcessing(true);
    try {
      const response = await fetch(
        `/api/v1/${cityId}/teams/${team._id}/roster`,
        {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ playerId }),
        }
      );

      const result = await response.json();

      if (!response.ok) {
        throw new Error(result.error || "Failed to add player");
      }

      toast.success("Player added to roster");
      setShowAddDialog(false);
      router.refresh();
      fetchFreeAgents();
    } catch (error: any) {
      toast.error(error.message || "Failed to add player");
    } finally {
      setIsProcessing(false);
    }
  };

  const handleRemovePlayer = async (playerId: string) => {
    setIsProcessing(true);
    try {
      const response = await fetch(
        `/api/v1/${cityId}/teams/${team._id}/roster?playerId=${playerId}`,
        {
          method: "DELETE",
        }
      );

      const result = await response.json();

      if (!response.ok) {
        throw new Error(result.error || "Failed to remove player");
      }

      toast.success("Player removed from roster");
      setShowRemoveDialog(false);
      setSelectedPlayer(null);
      router.refresh();
      fetchFreeAgents();
    } catch (error: any) {
      toast.error(error.message || "Failed to remove player");
    } finally {
      setIsProcessing(false);
    }
  };

  const handleQuickCreateSuccess = () => {
    setShowQuickCreateDialog(false);
    router.refresh();
    fetchFreeAgents();
  };

  return (
    <div className="grid gap-6 md:grid-cols-2">
      {/* Current Roster */}
      <Card>
        <CardHeader>
          <div className="flex items-center justify-between">
            <CardTitle>Current Roster ({team.players?.length || 0})</CardTitle>
            <div className="flex gap-2">
              <Button
                size="sm"
                variant="outline"
                onClick={() => setShowQuickCreateDialog(true)}
              >
                <Plus className="h-4 w-4 mr-2" />
                Create New
              </Button>
              <Button
                size="sm"
                onClick={() => setShowAddDialog(true)}
                disabled={loadingFreeAgents || freeAgents.length === 0}
              >
                <UserPlus className="h-4 w-4 mr-2" />
                Add Existing
              </Button>
            </div>
          </div>
        </CardHeader>
        <CardContent>
          {!team.players || team.players.length === 0 ? (
            <div className="text-center py-8">
              <Users className="mx-auto h-12 w-12 text-gray-400" />
              <p className="mt-2 text-sm text-gray-500">No players on roster</p>
              <div className="flex gap-2 justify-center mt-4">
                <Button
                  variant="outline"
                  size="sm"
                  onClick={() => setShowQuickCreateDialog(true)}
                >
                  Create New Player
                </Button>
                <Button
                  variant="outline"
                  size="sm"
                  onClick={() => setShowAddDialog(true)}
                  disabled={loadingFreeAgents || freeAgents.length === 0}
                >
                  Add Existing Player
                </Button>
              </div>
            </div>
          ) : (
            <div className="space-y-2">
              {team.players.map((player: any) => (
                <div
                  key={player._id}
                  className="flex items-center justify-between p-3 rounded-lg border hover:bg-gray-50"
                >
                  <div className="flex items-center gap-3">
                    <div className="flex items-center justify-center w-10 h-10 rounded-full bg-gray-100 font-bold text-gray-600">
                      {player.jerseyNumber || "—"}
                    </div>
                    <div>
                      <p className="font-medium">{player.playerName}</p>
                      {player._id === team.teamCaptain?._id && (
                        <Badge variant="outline" className="mt-1">
                          Captain
                        </Badge>
                      )}
                    </div>
                  </div>
                  <Button
                    variant="ghost"
                    size="sm"
                    onClick={() => {
                      setSelectedPlayer(player);
                      setShowRemoveDialog(true);
                    }}
                  >
                    <Trash2 className="h-4 w-4 text-red-600" />
                  </Button>
                </div>
              ))}
            </div>
          )}
        </CardContent>
      </Card>

      {/* Available Free Agents */}
      <Card>
        <CardHeader>
          <CardTitle>Available Free Agents ({freeAgents.length})</CardTitle>
        </CardHeader>
        <CardContent>
          {loadingFreeAgents ? (
            <div className="text-center py-8">
              <p className="text-sm text-gray-500">Loading free agents...</p>
            </div>
          ) : freeAgents.length === 0 ? (
            <div className="text-center py-8">
              <Users className="mx-auto h-12 w-12 text-gray-400" />
              <p className="mt-2 text-sm text-gray-500">
                No free agents available in this division
              </p>
              <p className="text-xs text-gray-400 mt-1">
                Create a new player to add them to the roster
              </p>
            </div>
          ) : (
            <div className="space-y-2 max-h-[500px] overflow-y-auto">
              {freeAgents.map((player: any) => (
                <div
                  key={player._id}
                  className="flex items-center justify-between p-3 rounded-lg border hover:bg-gray-50"
                >
                  <div className="flex items-center gap-3">
                    <div className="flex items-center justify-center w-10 h-10 rounded-full bg-gray-100 font-bold text-gray-600">
                      {player.jerseyNumber || "—"}
                    </div>
                    <div>
                      <p className="font-medium">{player.playerName}</p>
                    </div>
                  </div>
                  <Button
                    size="sm"
                    onClick={() => handleAddPlayer(player._id)}
                    disabled={isProcessing}
                  >
                    <UserPlus className="h-4 w-4 mr-2" />
                    Add
                  </Button>
                </div>
              ))}
            </div>
          )}
        </CardContent>
      </Card>

      {/* Dialogs */}
      <AddPlayerDialog
        open={showAddDialog}
        onOpenChange={setShowAddDialog}
        freeAgents={freeAgents}
        onAddPlayer={handleAddPlayer}
        isProcessing={isProcessing}
      />

      <RemovePlayerDialog
        open={showRemoveDialog}
        onOpenChange={setShowRemoveDialog}
        player={selectedPlayer}
        onRemove={handleRemovePlayer}
        isProcessing={isProcessing}
        isCaptain={selectedPlayer?._id === team.teamCaptain?._id}
      />

      <QuickCreatePlayerDialog
        open={showQuickCreateDialog}
        onOpenChange={setShowQuickCreateDialog}
        team={team}
        cityId={cityId}
        onSuccess={handleQuickCreateSuccess}
      />
    </div>
  );
}


----- components\features\league\teams\TeamCard.tsx -----

// src/components/features/league/teams/TeamCard.tsx

/**
 * SOLID - Single Responsibility Principle (SRP)
 * Single team card display ONLY
 */

"use client";

import { useState } from "react";
import { useRouter } from "next/navigation";
import Link from "next/link";
import { Card, CardContent, CardHeader } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import {
  MapPin,
  Users,
  Trophy,
  MoreVertical,
  Pencil,
  Trash2,
  AlertCircle,
  Building2,
} from "lucide-react";
import { toast } from "sonner";
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
} from "@/components/ui/alert-dialog";

interface TeamCardProps {
  team: any;
  cityId: string;
}

export function TeamCard({ team, cityId }: TeamCardProps) {
  const router = useRouter();
  const [isDeleting, setIsDeleting] = useState(false);
  const [showDeleteDialog, setShowDeleteDialog] = useState(false);

  const getPaymentBadge = () => {
    if (team.paymentStatus === "paid") {
      return (
        <Badge
          variant="outline"
          className="bg-green-100 text-green-800 border-green-200"
        >
          Paid
        </Badge>
      );
    }
    if (team.paymentStatus === "unpaid") {
      return (
        <Badge
          variant="outline"
          className="bg-red-100 text-red-800 border-red-200"
        >
          Unpaid
        </Badge>
      );
    }
    return (
      <Badge
        variant="outline"
        className="bg-gray-100 text-gray-800 border-gray-200"
      >
        No Players
      </Badge>
    );
  };

  const handleDelete = async () => {
    setIsDeleting(true);
    try {
      const response = await fetch(`/api/v1/${cityId}/teams?id=${team._id}`, {
        method: "DELETE",
      });

      const result = await response.json();

      if (!response.ok) {
        throw new Error(result.error || "Failed to delete team");
      }

      toast.success("Team deleted successfully");
      router.refresh();
    } catch (error: any) {
      toast.error(error.message || "Failed to delete team");
    } finally {
      setIsDeleting(false);
      setShowDeleteDialog(false);
    }
  };

  const noCaptainWarning = !team.teamCaptain && team.players?.length > 0;

  return (
    <>
      <Card className="hover:shadow-lg transition-shadow">
        <CardHeader className="pb-3">
          <div className="flex items-start justify-between">
            <div className="space-y-1 flex-1">
              <div className="flex items-center gap-2 flex-wrap">
                {getPaymentBadge()}
                {noCaptainWarning && (
                  <Badge
                    variant="outline"
                    className="bg-yellow-100 text-yellow-800 border-yellow-200"
                  >
                    <AlertCircle className="h-3 w-3 mr-1" />
                    No Captain
                  </Badge>
                )}
              </div>
              <Link href={`/admin/${cityId}/league/teams/${team._id}`}>
                <h3 className="font-semibold text-lg leading-tight hover:underline">
                  {team.teamName}
                </h3>
              </Link>
              <p className="text-sm text-gray-500">{team.teamNameShort}</p>
              <p className="text-xs text-gray-400 font-mono">{team.teamCode}</p>
            </div>
            <DropdownMenu>
              <DropdownMenuTrigger asChild>
                <Button variant="ghost" size="icon">
                  <MoreVertical className="h-4 w-4" />
                </Button>
              </DropdownMenuTrigger>
              <DropdownMenuContent align="end">
                <DropdownMenuItem
                  onClick={() =>
                    router.push(
                      `/admin/${cityId}/league/teams/${team._id}/edit`
                    )
                  }
                >
                  <Pencil className="mr-2 h-4 w-4" />
                  Edit Team
                </DropdownMenuItem>
                <DropdownMenuSeparator />
                <DropdownMenuItem
                  onClick={() => setShowDeleteDialog(true)}
                  className="text-red-600"
                >
                  <Trash2 className="mr-2 h-4 w-4" />
                  Delete Team
                </DropdownMenuItem>
              </DropdownMenuContent>
            </DropdownMenu>
          </div>
        </CardHeader>

        <CardContent className="space-y-3 text-sm">
          <div className="flex items-center gap-2 text-gray-600">
            <Building2 className="h-4 w-4 flex-shrink-0" />
            <span>{team.division?.city?.cityName || "N/A"}</span>
          </div>

          <div className="flex items-center gap-2 text-gray-600">
            <MapPin className="h-4 w-4 flex-shrink-0" />
            <span>{team.division?.location?.name || "N/A"}</span>
          </div>

          <div className="flex items-center gap-2 text-gray-600">
            <Trophy className="h-4 w-4 flex-shrink-0" />
            <span>{team.division?.divisionName || "N/A"}</span>
          </div>

          <div className="flex items-center gap-2 text-gray-600">
            <Users className="h-4 w-4 flex-shrink-0" />
            <span>{team.players?.length || 0} players</span>
          </div>

          <div className="pt-2 border-t">
            <div className="flex items-center justify-between">
              <span className="text-xs text-gray-500">Record:</span>
              <span className="font-medium">
                {team.wins}-{team.losses} ({team.pointDifference > 0 ? "+" : ""}
                {team.pointDifference})
              </span>
            </div>
            {team.teamCaptain && (
              <div className="flex items-center justify-between mt-1">
                <span className="text-xs text-gray-500">Captain:</span>
                <span className="text-xs">{team.teamCaptain.playerName}</span>
              </div>
            )}
          </div>
        </CardContent>
      </Card>

      {/* Delete Confirmation Dialog */}
      <AlertDialog open={showDeleteDialog} onOpenChange={setShowDeleteDialog}>
        <AlertDialogContent>
          <AlertDialogHeader>
            <AlertDialogTitle>Delete Team?</AlertDialogTitle>
            <AlertDialogDescription>
              Are you sure you want to delete "{team.teamName}"? This action
              cannot be undone.
              {(team.players?.length > 0 || team.games?.length > 0) && (
                <p className="mt-2 text-red-600 font-medium">
                  This team has {team.players?.length || 0} players and{" "}
                  {team.games?.length || 0} games. Remove all players and game
                  history before deleting.
                </p>
              )}
            </AlertDialogDescription>
          </AlertDialogHeader>
          <AlertDialogFooter>
            <AlertDialogCancel>Cancel</AlertDialogCancel>
            <AlertDialogAction
              onClick={handleDelete}
              disabled={
                isDeleting || team.players?.length > 0 || team.games?.length > 0
              }
              className="bg-red-600 hover:bg-red-700"
            >
              {isDeleting ? "Deleting..." : "Delete"}
            </AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>
    </>
  );
}


----- components\features\league\teams\TeamsContent.tsx -----

// src/components/features/league/teams/TeamsContent.tsx

/**
 * SOLID - Single Responsibility Principle (SRP)
 * Team list orchestration with tabs, filters, and view modes
 */

"use client";

import { useState } from "react";
import { useRouter, useSearchParams } from "next/navigation";
import { Tabs, TabsList, TabsTrigger } from "@/components/ui/tabs";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { Search, LayoutGrid, List } from "lucide-react";
import { TeamsGrid } from "./TeamsGrid";
import { TeamsList } from "./TeamsList";
import { Pagination } from "@/components/common/Pagination";

interface TeamsContentProps {
  teams: any[];
  pagination: {
    total: number;
    page: number;
    limit: number;
    totalPages: number;
  };
  divisions: any[];
  locations: any[];
  cityId: string;
  currentTab: string;
  currentView: "card" | "list";
  currentFilters: {
    division?: string;
    location?: string;
    search?: string;
  };
}

export function TeamsContent({
  teams,
  pagination,
  divisions,
  locations,
  cityId,
  currentTab,
  currentView,
  currentFilters,
}: TeamsContentProps) {
  const router = useRouter();
  const searchParams = useSearchParams();
  const [searchValue, setSearchValue] = useState(currentFilters.search || "");

  const updateFilters = (updates: Record<string, string | undefined>) => {
    const params = new URLSearchParams(searchParams.toString());

    Object.entries(updates).forEach(([key, value]) => {
      if (value) {
        params.set(key, value);
      } else {
        params.delete(key);
      }
    });

    // Reset to page 1 when filters change
    if (!updates.page) {
      params.set("page", "1");
    }

    router.push(`/admin/${cityId}/league/teams?${params.toString()}`);
  };

  const handleTabChange = (tab: string) => {
    updateFilters({ tab });
  };

  const handleSearch = (value: string) => {
    setSearchValue(value);
    updateFilters({ search: value || undefined });
  };

  const handleViewChange = (view: "card" | "list") => {
    updateFilters({ view });
  };

  return (
    <div className="space-y-6">
      {/* Tabs */}
      <Tabs value={currentTab} onValueChange={handleTabChange}>
        <TabsList>
          <TabsTrigger value="all">All Teams</TabsTrigger>
          <TabsTrigger value="paid">Paid</TabsTrigger>
          <TabsTrigger value="unpaid">Unpaid</TabsTrigger>
        </TabsList>
      </Tabs>

      {/* Filters & View Toggle */}
      <div className="flex flex-col sm:flex-row gap-4 items-start sm:items-center justify-between">
        <div className="flex flex-col sm:flex-row gap-4 flex-1">
          <div className="relative flex-1">
            <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400" />
            <Input
              placeholder="Search teams..."
              value={searchValue}
              onChange={(e) => handleSearch(e.target.value)}
              className="pl-10"
            />
          </div>

          <Select
            value={currentFilters.division || "all"}
            onValueChange={(value) =>
              updateFilters({ division: value === "all" ? undefined : value })
            }
          >
            <SelectTrigger className="w-full sm:w-[200px]">
              <SelectValue placeholder="All Divisions" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="all">All Divisions</SelectItem>
              {divisions.map((division: any) => (
                <SelectItem key={division._id} value={division._id}>
                  {division.divisionName}
                </SelectItem>
              ))}
            </SelectContent>
          </Select>

          <Select
            value={currentFilters.location || "all"}
            onValueChange={(value) =>
              updateFilters({ location: value === "all" ? undefined : value })
            }
          >
            <SelectTrigger className="w-full sm:w-[200px]">
              <SelectValue placeholder="All Locations" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="all">All Locations</SelectItem>
              {locations.map((location: any) => (
                <SelectItem key={location._id} value={location._id}>
                  {location.name}
                </SelectItem>
              ))}
            </SelectContent>
          </Select>
        </div>

        {/* View Toggle */}
        <div className="flex gap-2">
          <Button
            variant={currentView === "card" ? "default" : "outline"}
            size="sm"
            onClick={() => handleViewChange("card")}
          >
            <LayoutGrid className="h-4 w-4" />
          </Button>
          <Button
            variant={currentView === "list" ? "default" : "outline"}
            size="sm"
            onClick={() => handleViewChange("list")}
          >
            <List className="h-4 w-4" />
          </Button>
        </div>
      </div>

      {/* Teams Display */}
      {currentView === "card" ? (
        <TeamsGrid teams={teams} cityId={cityId} />
      ) : (
        <TeamsList teams={teams} cityId={cityId} />
      )}

      {/* Pagination */}
      {pagination.totalPages > 1 && (
        <Pagination
          currentPage={pagination.page}
          totalPages={pagination.totalPages}
          total={pagination.total}
          limit={pagination.limit}
          onPageChange={(page) => updateFilters({ page: page.toString() })}
        />
      )}
    </div>
  );
}


----- components\features\league\teams\TeamsGrid.tsx -----

// src/components/features/league/teams/TeamsGrid.tsx

/**
 * SOLID - Single Responsibility Principle (SRP)
 * Display teams in responsive card grid ONLY
 */

"use client";

import { Users } from "lucide-react";
import { TeamCard } from "./TeamCard";

interface TeamsGridProps {
  teams: any[];
  cityId: string;
}

export function TeamsGrid({ teams, cityId }: TeamsGridProps) {
  if (teams.length === 0) {
    return (
      <div className="text-center py-12 bg-white rounded-lg shadow">
        <Users className="mx-auto h-12 w-12 text-gray-400" />
        <h3 className="mt-4 text-lg font-medium text-gray-900">
          No teams found
        </h3>
        <p className="mt-2 text-sm text-gray-500">
          Try adjusting your filters or create a new team.
        </p>
      </div>
    );
  }

  return (
    <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-3">
      {teams.map((team) => (
        <TeamCard key={team._id} team={team} cityId={cityId} />
      ))}
    </div>
  );
}


----- components\features\league\teams\TeamsList.tsx -----

// src/components/features/league/teams/TeamsList.tsx

/**
 * SOLID - Single Responsibility Principle (SRP)
 * Display teams in list/table view ONLY
 */

"use client";

import Link from "next/link";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Users, AlertCircle, ExternalLink } from "lucide-react";

interface TeamsListProps {
  teams: any[];
  cityId: string;
}

export function TeamsList({ teams, cityId }: TeamsListProps) {
  if (teams.length === 0) {
    return (
      <div className="text-center py-12 bg-white rounded-lg shadow">
        <Users className="mx-auto h-12 w-12 text-gray-400" />
        <h3 className="mt-4 text-lg font-medium text-gray-900">
          No teams found
        </h3>
        <p className="mt-2 text-sm text-gray-500">
          Try adjusting your filters or create a new team.
        </p>
      </div>
    );
  }

  return (
    <div className="bg-white rounded-lg shadow overflow-hidden">
      <div className="overflow-x-auto">
        <table className="min-w-full divide-y divide-gray-200">
          <thead className="bg-gray-50">
            <tr>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Team
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                City
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Location
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Division
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Record
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Players
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Captain
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Payment
              </th>
              <th className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                Actions
              </th>
            </tr>
          </thead>
          <tbody className="bg-white divide-y divide-gray-200">
            {teams.map((team) => (
              <tr key={team._id} className="hover:bg-gray-50">
                <td className="px-6 py-4 whitespace-nowrap">
                  <div>
                    <div className="font-medium text-gray-900">
                      {team.teamName}
                    </div>
                    <div className="text-sm text-gray-500">
                      {team.teamNameShort}
                    </div>
                    <div className="text-xs text-gray-400 font-mono">
                      {team.teamCode}
                    </div>
                  </div>
                </td>
                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                  {team.division?.city?.cityName || "N/A"}
                </td>
                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                  {team.division?.location?.name || "N/A"}
                </td>
                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                  {team.division?.divisionName || "N/A"}
                </td>
                <td className="px-6 py-4 whitespace-nowrap text-sm">
                  <span className="font-medium">
                    {team.wins}-{team.losses}
                  </span>
                  <span className="text-gray-500 ml-1">
                    ({team.pointDifference > 0 ? "+" : ""}
                    {team.pointDifference})
                  </span>
                </td>
                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                  {team.players?.length || 0}
                </td>
                <td className="px-6 py-4 whitespace-nowrap text-sm">
                  {team.teamCaptain ? (
                    <span className="text-gray-900">
                      {team.teamCaptain.playerName}
                    </span>
                  ) : team.players?.length > 0 ? (
                    <Badge
                      variant="outline"
                      className="bg-yellow-100 text-yellow-800 border-yellow-200"
                    >
                      <AlertCircle className="h-3 w-3 mr-1" />
                      No Captain
                    </Badge>
                  ) : (
                    <span className="text-gray-400">—</span>
                  )}
                </td>
                <td className="px-6 py-4 whitespace-nowrap">
                  {team.paymentStatus === "paid" ? (
                    <Badge
                      variant="outline"
                      className="bg-green-100 text-green-800 border-green-200"
                    >
                      Paid
                    </Badge>
                  ) : team.paymentStatus === "unpaid" ? (
                    <Badge
                      variant="outline"
                      className="bg-red-100 text-red-800 border-red-200"
                    >
                      Unpaid
                    </Badge>
                  ) : (
                    <Badge
                      variant="outline"
                      className="bg-gray-100 text-gray-800 border-gray-200"
                    >
                      No Players
                    </Badge>
                  )}
                </td>
                <td className="px-6 py-4 whitespace-nowrap text-right text-sm">
                  <Button variant="ghost" size="sm" asChild>
                    <Link href={`/admin/${cityId}/league/teams/${team._id}`}>
                      <ExternalLink className="h-4 w-4" />
                    </Link>
                  </Button>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    </div>
  );
}


----- components\features\payments\ChargeCardModal.tsx -----

// src/components/features/payments/ChargeCardModal.tsx

/**
 * SOLID - Single Responsibility Principle (SRP)
 * Charge card confirmation modal ONLY
 */

"use client";

import { useState } from "react";
import { useRouter } from "next/navigation";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogFooter,
} from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { Loader2, Zap, CreditCard, AlertCircle } from "lucide-react";
import { toast } from "sonner";

interface ChargeCardModalProps {
  open: boolean;
  onOpenChange: (open: boolean) => void;
  player: any;
  payment: any;
  cardInfo: any;
  paymentMethod: any;
  cityId: string;
}

export function ChargeCardModal({
  open,
  onOpenChange,
  player,
  payment,
  cardInfo,
  paymentMethod,
  cityId,
}: ChargeCardModalProps) {
  const router = useRouter();
  const [isCharging, setIsCharging] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const amount =
    payment.paymentNumber === 1
      ? 60
      : paymentMethod.pricingTier === "EARLY_BIRD"
      ? 25
      : 30;

  const brandDisplay =
    cardInfo.brand.charAt(0).toUpperCase() + cardInfo.brand.slice(1);

  const handleCharge = async () => {
    setIsCharging(true);
    setError(null);

    try {
      const response = await fetch(`/api/v1/${cityId}/payments/charge-card`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          playerId: player._id,
          paymentMethodId: paymentMethod._id,
          paymentNumber: payment.paymentNumber,
          amount: amount * 100, // Convert to cents
        }),
      });

      const data = await response.json();

      if (!response.ok) {
        throw new Error(data.error || "Failed to charge card");
      }

      toast.success("Card charged successfully!");
      onOpenChange(false);
      router.refresh();
    } catch (error: any) {
      setError(error.message);
      toast.error(error.message);
    } finally {
      setIsCharging(false);
    }
  };

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent>
        <DialogHeader>
          <DialogTitle className="flex items-center gap-2">
            <Zap className="h-5 w-5 text-blue-600" />
            Charge Card
          </DialogTitle>
          <DialogDescription>
            Charge payment #{payment.paymentNumber} to customer's card on file.
          </DialogDescription>
        </DialogHeader>

        <div className="space-y-4 py-4">
          {/* Charge Details */}
          <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
            <div className="space-y-2">
              <div className="flex justify-between text-sm">
                <span className="text-gray-600">Player:</span>
                <span className="font-medium">{player.playerName}</span>
              </div>
              <div className="flex justify-between text-sm">
                <span className="text-gray-600">Payment:</span>
                <span className="font-medium">
                  #{payment.paymentNumber}
                  {payment.paymentNumber === 1 && " (Down Payment)"}
                </span>
              </div>
              <div className="flex justify-between text-sm">
                <span className="text-gray-600">Amount:</span>
                <span className="font-bold text-lg">${amount}.00</span>
              </div>
            </div>
          </div>

          {/* Card Info */}
          <div className="flex items-center gap-3 p-3 bg-gray-50 rounded-lg">
            <CreditCard className="h-5 w-5 text-gray-400" />
            <div>
              <p className="text-sm font-medium text-gray-900">
                {brandDisplay} ****{cardInfo.last4}
              </p>
              <p className="text-xs text-gray-500">
                Expires {cardInfo.expMonth}/{cardInfo.expYear}
              </p>
            </div>
          </div>

          {/* Warning */}
          <Alert>
            <AlertCircle className="h-4 w-4" />
            <AlertDescription className="text-sm">
              This will immediately charge ${amount} to the customer's card. An
              SMS confirmation and Stripe receipt will be sent automatically.
            </AlertDescription>
          </Alert>

          {/* Error Display */}
          {error && (
            <Alert variant="destructive">
              <AlertCircle className="h-4 w-4" />
              <AlertDescription className="text-sm">{error}</AlertDescription>
            </Alert>
          )}
        </div>

        <DialogFooter>
          <Button
            variant="outline"
            onClick={() => onOpenChange(false)}
            disabled={isCharging}
          >
            Cancel
          </Button>
          <Button
            onClick={handleCharge}
            disabled={isCharging}
            className="bg-blue-600 hover:bg-blue-700"
          >
            {isCharging ? (
              <>
                <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                Charging...
              </>
            ) : (
              <>
                <Zap className="mr-2 h-4 w-4" />
                Charge ${amount}
              </>
            )}
          </Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
}


----- components\features\payments\CriticalPlayerView.tsx -----

// src/components/features/payments/CriticalPlayerView.tsx

/**
 * SOLID - Single Responsibility Principle (SRP)
 * Critical installment player detail view ONLY
 */

"use client";

import { useState } from "react";
import Link from "next/link";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import {
  ArrowLeft,
  AlertOctagon,
  Mail,
  Phone,
  Instagram as InstagramIcon,
  Calendar,
  Users,
  MapPin,
  CheckCircle2,
  XCircle,
  ExternalLink,
  MessageSquare,
  ShieldAlert,
} from "lucide-react";
import { format } from "date-fns";
import { SendSpecificReminderModal } from "./SendSpecificReminderModal";
import { EscalateToCaptainModal } from "./EscalateToCaptainModal";
import { SuspensionWarningModal } from "./SuspensionWarningModal";

interface CriticalPlayerViewProps {
  player: any;
  paymentMethod: any;
  cityId: string;
}

export function CriticalPlayerView({ player, paymentMethod, cityId }: CriticalPlayerViewProps) {
  const [selectedPayment, setSelectedPayment] = useState<any>(null);
  const [showReminderModal, setShowReminderModal] = useState(false);
  const [showEscalateModal, setShowEscalateModal] = useState(false);
  const [showSuspensionModal, setShowSuspensionModal] = useState(false);

  const subscriptionPayments = paymentMethod.installments?.subscriptionPayments || [];
  const completedPayments = subscriptionPayments.filter((p: any) => p.status === "succeeded").length;
  const failedPayments = subscriptionPayments.filter((p: any) => p.status === "failed");
  const totalPayments = 8;
  const progressPercentage = Math.round((completedPayments / totalPayments) * 100);

  const daysSinceRegistration = player.createdAt
    ? Math.floor((Date.now() - new Date(player.createdAt).getTime()) / (1000 * 60 * 60 * 24))
    : 0;

  const handleSendReminder = (payment: any) => {
    setSelectedPayment(payment);
    setShowReminderModal(true);
  };

  return (
    <div className="p-6 space-y-6">
      {/* Header */}
      <div className="flex items-center gap-4">
        <Button variant="ghost" size="sm" asChild>
          <Link href={`/admin/${cityId}/payments`}>
            <ArrowLeft className="h-4 w-4 mr-2" />
            Back to Payments
          </Link>
        </Button>
      </div>

      {/* Player Overview */}
      <div>
        <div className="flex items-center gap-3 mb-2">
          <h1 className="text-3xl font-bold tracking-tight">{player.playerName}</h1>
          <Badge className="bg-red-100 text-red-800 border-red-200">
            <AlertOctagon className="h-3 w-3 mr-1" />
            Critical
          </Badge>
        </div>
        <p className="text-gray-600">
          {player.team?.teamName || "No Team"} • {player.division?.divisionName}
        </p>
      </div>

      {/* Critical Alert */}
      <div className="bg-red-50 border-2 border-red-300 rounded-lg p-4 flex items-start gap-3">
        <AlertOctagon className="h-6 w-6 text-red-600 flex-shrink-0 mt-0.5" />
        <div>
          <p className="font-bold text-red-900">Immediate Action Required</p>
          <p className="text-sm text-red-700 mt-1">
            {failedPayments.length} payments failed. Registered {daysSinceRegistration} days ago. 
            Escalation or suspension consideration needed.
          </p>
        </div>
      </div>

      <div className="grid gap-6 md:grid-cols-3">
        {/* Main Content */}
        <div className="md:col-span-2 space-y-6">
          {/* Failed Payments */}
          <Card className="border-red-300 bg-red-50">
            <CardHeader>
              <CardTitle className="text-red-900">
                Critical Payment Failures ({failedPayments.length})
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-3">
              {failedPayments.map((payment: any) => (
                <div
                  key={payment.paymentNumber}
                  className="bg-white border-2 border-red-300 rounded-lg p-4"
                >
                  <div className="flex items-start justify-between mb-3">
                    <div>
                      <p className="font-bold text-red-900">
                        Payment #{payment.paymentNumber}
                        {payment.paymentNumber === 1 && " (Down Payment)"}
                      </p>
                      <p className="text-sm text-gray-600 mt-1">
                        Failed {payment.attemptCount || 1} time{payment.attemptCount > 1 ? "s" : ""}
                      </p>
                      {payment.lastAttempt && (
                        <p className="text-xs text-gray-500 mt-1">
                          Last attempt: {format(new Date(payment.lastAttempt), "MMM dd, yyyy")}
                        </p>
                      )}
                    </div>
                    <Badge className="bg-red-200 text-red-900 border-red-400 font-bold">
                      Failed
                    </Badge>
                  </div>

                  <div className="flex gap-2">
                    <Button
                      size="sm"
                      className="flex-1 bg-yellow-600 hover:bg-yellow-700"
                      onClick={() => handleSendReminder(payment)}
                    >
                      <MessageSquare className="h-4 w-4 mr-2" />
                      Send Reminder
                    </Button>
                    {payment.paymentLink && (
  <Button
    size="sm"
    variant="outline"
    className="border-red-300"
    asChild
  >
    <a
      href={payment.paymentLink}
      target="_blank"
      rel="noopener noreferrer"
    >
      <ExternalLink className="h-4 w-4 mr-2" />
      View Link
    </a>
  </Button>
)}

                  </div>
                </div>
              ))}
            </CardContent>
          </Card>

          {/* Payment Timeline */}
          <Card>
            <CardHeader>
              <CardTitle>Payment Timeline</CardTitle>
            </CardHeader>
            <CardContent className="space-y-3">
              {subscriptionPayments.map((payment: any) => (
                <div
                  key={payment.paymentNumber}
                  className={`flex items-center gap-4 p-3 rounded-lg border ${
                    payment.status === "failed" ? "bg-red-50 border-red-300" : ""
                  }`}
                >
                  <div
                    className={`flex items-center justify-center w-10 h-10 rounded-full ${
                      payment.status === "succeeded"
                        ? "bg-green-100"
                        : payment.status === "failed"
                        ? "bg-red-200"
                        : "bg-gray-100"
                    }`}
                  >
                    {payment.status === "succeeded" ? (
                      <CheckCircle2 className="h-5 w-5 text-green-600" />
                    ) : payment.status === "failed" ? (
                      <XCircle className="h-5 w-5 text-red-700" />
                    ) : (
                      <span className="text-sm font-medium text-gray-400">
                        {payment.paymentNumber}
                      </span>
                    )}
                  </div>
                  <div className="flex-1">
                    <p className="text-sm font-medium">
                      Payment #{payment.paymentNumber}
                      {payment.paymentNumber === 1 && " (Down Payment)"}
                    </p>
                    <p className="text-xs text-gray-500">
                      {payment.dueDate
                        ? format(new Date(payment.dueDate), "MMM dd, yyyy")
                        : "Date pending"}
                    </p>
                    {payment.status === "failed" && payment.attemptCount && (
                      <p className="text-xs text-red-600 font-medium mt-1">
                        {payment.attemptCount} attempt{payment.attemptCount > 1 ? "s" : ""}
                      </p>
                    )}
                  </div>
                  <Badge
                    className={
                      payment.status === "succeeded"
                        ? "bg-green-100 text-green-800 border-green-200"
                        : payment.status === "failed"
                        ? "bg-red-200 text-red-900 border-red-400"
                        : "bg-gray-100 text-gray-800 border-gray-200"
                    }
                  >
                    {payment.status === "succeeded"
                      ? "Paid"
                      : payment.status === "failed"
                      ? "Failed"
                      : "Pending"}
                  </Badge>
                </div>
              ))}

              {/* Visual Progress Dots */}
              <div className="flex items-center gap-2 pt-4 border-t">
                <span className="text-sm text-gray-500 mr-2">Progress:</span>
                {Array(8)
                  .fill(null)
                  .map((_, index) => {
                    const payment = subscriptionPayments.find(
                      (p: any) => p.paymentNumber === index + 1
                    );
                    return (
                      <div
                        key={index}
                        className={`w-3 h-3 rounded-full ${
                          payment?.status === "succeeded"
                            ? "bg-green-500"
                            : payment?.status === "failed"
                            ? "bg-red-600"
                            : "bg-gray-300"
                        }`}
                        title={`Payment ${index + 1}: ${
                          payment?.status || "pending"
                        }`}
                      />
                    );
                  })}
              </div>
            </CardContent>
          </Card>

          {/* Contact Information */}
          <Card>
            <CardHeader>
              <CardTitle>Contact Information</CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              {player.user?.email && (
                <div className="flex items-center gap-3">
                  <Mail className="h-5 w-5 text-gray-400" />
                  <div>
                    <p className="text-sm text-gray-500">Email</p>
                    <p className="font-medium">{player.user.email}</p>
                  </div>
                </div>
              )}

              {player.user?.phoneNumber && (
                <div className="flex items-center gap-3">
                  <Phone className="h-5 w-5 text-gray-400" />
                  <div>
                    <p className="text-sm text-gray-500">Phone</p>
                    <p className="font-medium">{player.user.phoneNumber}</p>
                  </div>
                </div>
              )}

              {player.instagram && (
                <div className="flex items-center gap-3">
                  <InstagramIcon className="h-5 w-5 text-gray-400" />
                  <div>
                    <p className="text-sm text-gray-500">Instagram</p>
                    <p className="font-medium">{player.instagram}</p>
                  </div>
                </div>
              )}
            </CardContent>
          </Card>
        </div>

        {/* Sidebar */}
        <div className="space-y-4">
          <Card className="border-red-300">
            <CardHeader>
              <CardTitle className="text-red-900">Escalation Actions</CardTitle>
            </CardHeader>
            <CardContent className="space-y-3">
              {player.team && (
                <Button
                  className="w-full bg-orange-600 hover:bg-orange-700"
                  onClick={() => setShowEscalateModal(true)}
                >
                  <AlertOctagon className="h-4 w-4 mr-2" />
                  Escalate to Captain
                </Button>
              )}

              <Button
                variant="destructive"
                className="w-full"
                onClick={() => setShowSuspensionModal(true)}
              >
                <ShieldAlert className="h-4 w-4 mr-2" />
                Consider Suspension
              </Button>
            </CardContent>
          </Card>

          <Card>
            <CardHeader>
              <CardTitle>Status Summary</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="text-center py-4">
                <AlertOctagon className="mx-auto h-12 w-12 text-red-600 mb-3" />
                <p className="font-bold text-red-900 mb-1">Critical Risk</p>
                <p className="text-sm text-gray-500">
                  Immediate intervention required
                </p>
              </div>

              <div className="mt-6 pt-4 border-t space-y-3">
                <div className="flex justify-between text-sm">
                  <span className="text-gray-500">Successful:</span>
                  <span className="font-medium text-green-600">{completedPayments}</span>
                </div>
                <div className="flex justify-between text-sm">
                  <span className="text-gray-500">Failed:</span>
                  <span className="font-bold text-red-600">{failedPayments.length}</span>
                </div>
                <div className="flex justify-between text-sm">
                  <span className="text-gray-500">Pending:</span>
                  <span className="font-medium text-gray-600">
                    {totalPayments - completedPayments - failedPayments.length}
                  </span>
                </div>
              </div>

              <div className="mt-4 pt-4 border-t">
                <div className="text-sm mb-2">
                  <span className="text-gray-500">Progress:</span>
                  <span className="font-medium ml-2">{progressPercentage}%</span>
                </div>
                <div className="w-full bg-gray-200 rounded-full h-2">
                  <div
                    className="bg-red-600 h-2 rounded-full transition-all"
                    style={{ width: `${progressPercentage}%` }}
                  />
                </div>
              </div>

              <div className="mt-4 pt-4 border-t text-sm text-gray-500">
                <p>Registered {daysSinceRegistration} days ago</p>
              </div>
            </CardContent>
          </Card>

          <Card>
            <CardHeader>
              <CardTitle>Payment Details</CardTitle>
            </CardHeader>
            <CardContent className="space-y-3">
              <div className="text-sm">
                <p className="text-gray-500">Payment Type</p>
                <p className="font-medium">Installments (8 payments)</p>
              </div>
              <div className="text-sm">
                <p className="text-gray-500">Pricing Tier</p>
                <p className="font-medium">
                  {paymentMethod.pricingTier === "EARLY_BIRD"
                    ? "Early Bird"
                    : "Regular"}
                </p>
              </div>
            </CardContent>
          </Card>
        </div>
      </div>

      {/* Modals */}
      {selectedPayment && (
        <SendSpecificReminderModal
          open={showReminderModal}
          onOpenChange={setShowReminderModal}
          player={player}
          payment={selectedPayment}
          cityId={cityId}
        />
      )}

      {player.team && (
        <EscalateToCaptainModal
          open={showEscalateModal}
          onOpenChange={setShowEscalateModal}
          player={player}
          failedPaymentsCount={failedPayments.length}
          teamId={player.team._id}
          cityId={cityId}
        />
      )}

      <SuspensionWarningModal
        open={showSuspensionModal}
        onOpenChange={setShowSuspensionModal}
        player={player}
        failedPaymentsCount={failedPayments.length}
        cityId={cityId}
      />
    </div>
  );
}

----- components\features\payments\EscalateToCaptainModal.tsx -----

// src/components/features/payments/EscalateToCaptainModal.tsx

/**
 * SOLID - Single Responsibility Principle (SRP)
 * Escalate to team captain modal ONLY
 */

"use client";

import { useState } from "react";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogFooter,
} from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Loader2, AlertOctagon } from "lucide-react";
import { toast } from "sonner";

interface EscalateToCaptainModalProps {
  open: boolean;
  onOpenChange: (open: boolean) => void;
  player: any;
  failedPaymentsCount: number;
  teamId: string;
  cityId: string;
}

export function EscalateToCaptainModal({
  open,
  onOpenChange,
  player,
  failedPaymentsCount,
  teamId,
  cityId,
}: EscalateToCaptainModalProps) {
  const [isEscalating, setIsEscalating] = useState(false);

  const handleEscalate = async () => {
    setIsEscalating(true);
    try {
      const response = await fetch(`/api/v1/${cityId}/payments/escalate-captain`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          playerId: player._id,
          teamId,
          failedPaymentsCount,
        }),
      });

      if (!response.ok) throw new Error("Failed to escalate");

      toast.success("Team captain has been notified!");
      onOpenChange(false);
    } catch (error) {
      toast.error("Failed to escalate. Please try again.");
    } finally {
      setIsEscalating(false);
    }
  };

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent>
        <DialogHeader>
          <DialogTitle className="flex items-center gap-2">
            <AlertOctagon className="h-5 w-5 text-orange-600" />
            Escalate to Team Captain
          </DialogTitle>
          <DialogDescription>
            Notify the team captain about {player.playerName}'s critical payment issues.
          </DialogDescription>
        </DialogHeader>

        <div className="py-4 space-y-4">
          <div className="bg-orange-50 border border-orange-200 rounded-lg p-4">
            <p className="text-sm font-medium text-orange-900">Critical Payment Situation</p>
            <ul className="mt-2 space-y-1 text-sm text-orange-800">
              <li>• {failedPaymentsCount} payments have failed</li>
              <li>• Multiple reminder attempts made</li>
              <li>• Team captain intervention needed</li>
            </ul>
          </div>

          <p className="text-sm text-gray-600">
            The team captain will be notified via email and SMS to follow up urgently with 
            this player about completing their outstanding payments.
          </p>
        </div>

        <DialogFooter>
          <Button variant="outline" onClick={() => onOpenChange(false)}>
            Cancel
          </Button>
          <Button 
            onClick={handleEscalate} 
            disabled={isEscalating}
            className="bg-orange-600 hover:bg-orange-700"
          >
            {isEscalating ? (
              <>
                <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                Escalating...
              </>
            ) : (
              "Escalate to Captain"
            )}
          </Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
}

----- components\features\payments\HasIssuesPlayerView.tsx -----

// src/components/features/payments/HasIssuesPlayerView.tsx

/**
 * SOLID - Single Responsibility Principle (SRP)
 * Has issues installment player detail view ONLY
 */

"use client";

import { useEffect, useState } from "react";
import Link from "next/link";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import {
  ArrowLeft,
  AlertTriangle,
  Mail,
  Phone,
  Instagram as InstagramIcon,
  Calendar,
  Users,
  MapPin,
  CheckCircle2,
  XCircle,
  ExternalLink,
  MessageSquare,
  CreditCard,
  Zap,
} from "lucide-react";
import { format } from "date-fns";
import { SendSpecificReminderModal } from "./SendSpecificReminderModal";
import { NotifyCaptainModal } from "./NotifyCaptainModal";
import { ChargeCardModal } from "./ChargeCardModal";
import { SendPaymentLinkModal } from "./SendPaymentLinkModal";

interface HasIssuesPlayerViewProps {
  player: any;
  paymentMethod: any;
  cityId: string;
}

export function HasIssuesPlayerView({
  player,
  paymentMethod,
  cityId,
}: HasIssuesPlayerViewProps) {
  const [selectedPayment, setSelectedPayment] = useState<any>(null);
  const [showReminderModal, setShowReminderModal] = useState(false);
  const [showCaptainModal, setShowCaptainModal] = useState(false);
  const [showChargeModal, setShowChargeModal] = useState(false);
  const [showPaymentLinkModal, setShowPaymentLinkModal] = useState(false);
  const [cardInfo, setCardInfo] = useState<any>(null);
  const [loadingCard, setLoadingCard] = useState(true);

  const subscriptionPayments =
    paymentMethod.installments?.subscriptionPayments || [];
  const completedPayments = subscriptionPayments.filter(
    (p: any) => p.status === "succeeded"
  ).length;
  const failedPayments = subscriptionPayments.filter(
    (p: any) => p.status === "failed"
  );
  const totalPayments = 8;
  const progressPercentage = Math.round(
    (completedPayments / totalPayments) * 100
  );

  const handleSendReminder = (payment: any) => {
    setSelectedPayment(payment);
    setShowReminderModal(true);
  };

  // Load card info on mount
  useEffect(() => {
    const loadCardInfo = async () => {
      if (!player.customerId) {
        setLoadingCard(false);
        return;
      }

      try {
        const response = await fetch(
          `/api/v1/${cityId}/payments/card-info/${player.customerId}`
        );
        console.log("response:", response);

        if (response.ok) {
          const data = await response.json();

          setCardInfo(data.data);
        }
      } catch (error) {
        console.error("Error loading card info:", error);
      } finally {
        setLoadingCard(false);
      }
    };

    loadCardInfo();
  }, [player.customerId, cityId]);

  console.log("player.customerId:", player.customerId);

  const handleChargeCard = (payment: any) => {
    setSelectedPayment(payment);
    setShowChargeModal(true);
  };

  const handleSendPaymentLink = (payment: any) => {
    setSelectedPayment(payment);
    setShowPaymentLinkModal(true);
  };

  const getCardDisplay = () => {
    if (loadingCard) {
      return (
        <div className="flex items-center gap-2 text-sm text-gray-500">
          <CreditCard className="h-4 w-4 animate-pulse" />
          <span>Loading card info...</span>
        </div>
      );
    }

    if (!cardInfo?.hasCard) {
      return (
        <div className="flex items-center gap-2 text-sm text-gray-500">
          <CreditCard className="h-4 w-4" />
          <span>No card on file</span>
        </div>
      );
    }

    const brandDisplay =
      cardInfo.brand.charAt(0).toUpperCase() + cardInfo.brand.slice(1);

    return (
      <div className="flex items-center gap-2 text-sm">
        <CreditCard className="h-4 w-4 text-gray-400" />
        <span
          className={cardInfo.isValid ? "text-gray-900" : "text-orange-600"}
        >
          {brandDisplay} ****{cardInfo.last4}
        </span>
        <span className="text-gray-500">
          (Exp: {cardInfo.expMonth}/{cardInfo.expYear})
        </span>
        {cardInfo.isValid ? (
          <Badge className="bg-green-100 text-green-800 border-green-200 text-xs">
            ✓ Valid
          </Badge>
        ) : (
          <Badge className="bg-orange-100 text-orange-800 border-orange-200 text-xs">
            ⚠️ Expired
          </Badge>
        )}
      </div>
    );
  };

  return (
    <div className="p-6 space-y-6">
      {/* Header */}
      <div className="flex items-center gap-4">
        <Button variant="ghost" size="sm" asChild>
          <Link href={`/admin/${cityId}/payments`}>
            <ArrowLeft className="h-4 w-4 mr-2" />
            Back to Payments
          </Link>
        </Button>
      </div>

      {/* Player Overview */}
      <div>
        <div className="flex items-center gap-3 mb-2">
          <h1 className="text-3xl font-bold tracking-tight">
            {player.playerName}
          </h1>
          <Badge className="bg-yellow-100 text-yellow-800 border-yellow-200">
            <AlertTriangle className="h-3 w-3 mr-1" />
            Has Issues
          </Badge>
        </div>
        <p className="text-gray-600">
          {player.team?.teamName || "No Team"} • {player.division?.divisionName}
        </p>
        <div className="mt-2">{getCardDisplay()}</div>
      </div>

      {/* Warning Message */}
      <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-4 flex items-start gap-3">
        <AlertTriangle className="h-5 w-5 text-yellow-600 flex-shrink-0 mt-0.5" />
        <div>
          <p className="font-medium text-yellow-900">Payment Issues Detected</p>
          <p className="text-sm text-yellow-700 mt-1">
            {failedPayments.length} payment
            {failedPayments.length > 1 ? "s" : ""} failed. Commissioner
            follow-up recommended.
          </p>
        </div>
      </div>

      <div className="grid gap-6 md:grid-cols-3">
        {/* Main Content */}
        <div className="md:col-span-2 space-y-6">
          {/* Failed Payments Alert */}
          <Card className="border-yellow-200 bg-yellow-50">
            <CardHeader>
              <CardTitle className="text-yellow-900">Failed Payments</CardTitle>
            </CardHeader>
            <CardContent className="space-y-3">
              {failedPayments.map((payment: any) => {
                const amount =
                  payment.paymentNumber === 1
                    ? 60
                    : paymentMethod.pricingTier === "EARLY_BIRD"
                    ? 25
                    : 30;

                return (
                  <div
                    key={payment.paymentNumber}
                    className="bg-white border border-red-200 rounded-lg p-4"
                  >
                    <div className="flex items-start justify-between mb-3">
                      <div>
                        <p className="font-medium text-red-900">
                          Payment #{payment.paymentNumber}
                          {payment.paymentNumber === 1 && " (Down Payment)"}
                        </p>
                        <p className="text-sm text-gray-600 mt-1">
                          Amount: ${amount} • Failed {payment.attemptCount || 1}{" "}
                          time
                          {payment.attemptCount > 1 ? "s" : ""}
                        </p>
                        {payment.lastAttempt && (
                          <p className="text-xs text-gray-500 mt-1">
                            Last attempt:{" "}
                            {format(
                              new Date(payment.lastAttempt),
                              "MMM dd, yyyy"
                            )}
                          </p>
                        )}
                      </div>
                      <Badge className="bg-red-100 text-red-800 border-red-200">
                        Failed
                      </Badge>
                    </div>

                    <div className="flex gap-2">
                      {cardInfo?.isValid ? (
                        <Button
                          size="sm"
                          className="flex-1 bg-blue-600 hover:bg-blue-700"
                          onClick={() => handleChargeCard(payment)}
                        >
                          <Zap className="h-4 w-4 mr-2" />
                          Charge Card Now
                        </Button>
                      ) : null}

                      <Button
                        size="sm"
                        variant="outline"
                        className={cardInfo?.isValid ? "flex-1" : "flex-1"}
                        onClick={() => handleSendPaymentLink(payment)}
                      >
                        <MessageSquare className="h-4 w-4 mr-2" />
                        Send Payment Link
                      </Button>

                      {payment.paymentLink && (
                        <Button size="sm" variant="outline" asChild>
                          <a
                            href={payment.paymentLink}
                            target="_blank"
                            rel="noopener noreferrer"
                          >
                            <ExternalLink className="h-4 w-4" />
                          </a>
                        </Button>
                      )}
                    </div>
                  </div>
                );
              })}
            </CardContent>
          </Card>

          {/* Payment Timeline */}
          <Card>
            <CardHeader>
              <CardTitle>Payment Timeline</CardTitle>
            </CardHeader>
            <CardContent className="space-y-3">
              {subscriptionPayments.map((payment: any) => (
                <div
                  key={payment.paymentNumber}
                  className={`flex items-center gap-4 p-3 rounded-lg border ${
                    payment.status === "failed"
                      ? "bg-red-50 border-red-200"
                      : ""
                  }`}
                >
                  <div
                    className={`flex items-center justify-center w-10 h-10 rounded-full ${
                      payment.status === "succeeded"
                        ? "bg-green-100"
                        : payment.status === "failed"
                        ? "bg-red-100"
                        : "bg-gray-100"
                    }`}
                  >
                    {payment.status === "succeeded" ? (
                      <CheckCircle2 className="h-5 w-5 text-green-600" />
                    ) : payment.status === "failed" ? (
                      <XCircle className="h-5 w-5 text-red-600" />
                    ) : (
                      <span className="text-sm font-medium text-gray-400">
                        {payment.paymentNumber}
                      </span>
                    )}
                  </div>
                  <div className="flex-1">
                    <p className="text-sm font-medium">
                      Payment #{payment.paymentNumber}
                      {payment.paymentNumber === 1 && " (Down Payment)"}
                    </p>
                    <p className="text-xs text-gray-500">
                      {payment.dueDate
                        ? format(new Date(payment.dueDate), "MMM dd, yyyy")
                        : "Date pending"}
                    </p>
                    {payment.status === "failed" && payment.attemptCount && (
                      <p className="text-xs text-red-600 mt-1">
                        {payment.attemptCount} attempt
                        {payment.attemptCount > 1 ? "s" : ""}
                      </p>
                    )}
                  </div>
                  <Badge
                    className={
                      payment.status === "succeeded"
                        ? "bg-green-100 text-green-800 border-green-200"
                        : payment.status === "failed"
                        ? "bg-red-100 text-red-800 border-red-200"
                        : "bg-gray-100 text-gray-800 border-gray-200"
                    }
                  >
                    {payment.status === "succeeded"
                      ? "Paid"
                      : payment.status === "failed"
                      ? "Failed"
                      : "Pending"}
                  </Badge>
                </div>
              ))}

              {/* Visual Progress Dots */}
              <div className="flex items-center gap-2 pt-4 border-t">
                <span className="text-sm text-gray-500 mr-2">Progress:</span>
                {Array(8)
                  .fill(null)
                  .map((_, index) => {
                    const payment = subscriptionPayments.find(
                      (p: any) => p.paymentNumber === index + 1
                    );
                    return (
                      <div
                        key={index}
                        className={`w-3 h-3 rounded-full ${
                          payment?.status === "succeeded"
                            ? "bg-green-500"
                            : payment?.status === "failed"
                            ? "bg-red-500"
                            : "bg-gray-300"
                        }`}
                        title={`Payment ${index + 1}: ${
                          payment?.status || "pending"
                        }`}
                      />
                    );
                  })}
              </div>
            </CardContent>
          </Card>

          {/* Contact Information */}
          <Card>
            <CardHeader>
              <CardTitle>Contact Information</CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              {player.user?.email && (
                <div className="flex items-center gap-3">
                  <Mail className="h-5 w-5 text-gray-400" />
                  <div>
                    <p className="text-sm text-gray-500">Email</p>
                    <p className="font-medium">{player.user.email}</p>
                  </div>
                </div>
              )}

              {player.user?.phoneNumber && (
                <div className="flex items-center gap-3">
                  <Phone className="h-5 w-5 text-gray-400" />
                  <div>
                    <p className="text-sm text-gray-500">Phone</p>
                    <p className="font-medium">{player.user.phoneNumber}</p>
                  </div>
                </div>
              )}

              {player.instagram && (
                <div className="flex items-center gap-3">
                  <InstagramIcon className="h-5 w-5 text-gray-400" />
                  <div>
                    <p className="text-sm text-gray-500">Instagram</p>
                    <p className="font-medium">{player.instagram}</p>
                  </div>
                </div>
              )}
            </CardContent>
          </Card>
        </div>

        {/* Sidebar */}
        <div className="space-y-4">
          <Card>
            <CardHeader>
              <CardTitle>Quick Actions</CardTitle>
            </CardHeader>
            <CardContent className="space-y-3">
              {player.team && (
                <Button
                  variant="outline"
                  className="w-full"
                  onClick={() => setShowCaptainModal(true)}
                >
                  Notify Team Captain
                </Button>
              )}
            </CardContent>
          </Card>

          <Card>
            <CardHeader>
              <CardTitle>Status Summary</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="text-center py-4">
                <AlertTriangle className="mx-auto h-12 w-12 text-yellow-500 mb-3" />
                <p className="font-medium text-yellow-900 mb-1">
                  Needs Attention
                </p>
                <p className="text-sm text-gray-500">Follow up recommended</p>
              </div>

              <div className="mt-6 pt-4 border-t space-y-3">
                <div className="flex justify-between text-sm">
                  <span className="text-gray-500">Successful:</span>
                  <span className="font-medium text-green-600">
                    {completedPayments}
                  </span>
                </div>
                <div className="flex justify-between text-sm">
                  <span className="text-gray-500">Failed:</span>
                  <span className="font-medium text-red-600">
                    {failedPayments.length}
                  </span>
                </div>
                <div className="flex justify-between text-sm">
                  <span className="text-gray-500">Pending:</span>
                  <span className="font-medium text-gray-600">
                    {totalPayments - completedPayments - failedPayments.length}
                  </span>
                </div>
              </div>

              <div className="mt-4 pt-4 border-t">
                <div className="text-sm mb-2">
                  <span className="text-gray-500">Progress:</span>
                  <span className="font-medium ml-2">
                    {progressPercentage}%
                  </span>
                </div>
                <div className="w-full bg-gray-200 rounded-full h-2">
                  <div
                    className="bg-yellow-500 h-2 rounded-full transition-all"
                    style={{ width: `${progressPercentage}%` }}
                  />
                </div>
              </div>
            </CardContent>
          </Card>

          <Card>
            <CardHeader>
              <CardTitle>Payment Details</CardTitle>
            </CardHeader>
            <CardContent className="space-y-3">
              <div className="text-sm">
                <p className="text-gray-500">Payment Type</p>
                <p className="font-medium">Installments (8 payments)</p>
              </div>
              <div className="text-sm">
                <p className="text-gray-500">Pricing Tier</p>
                <p className="font-medium">
                  {paymentMethod.pricingTier === "EARLY_BIRD"
                    ? "Early Bird"
                    : "Regular"}
                </p>
              </div>
            </CardContent>
          </Card>
        </div>
      </div>

      {/* Modals */}
      {selectedPayment && cardInfo?.isValid && (
        <ChargeCardModal
          open={showChargeModal}
          onOpenChange={setShowChargeModal}
          player={player}
          payment={selectedPayment}
          cardInfo={cardInfo}
          paymentMethod={paymentMethod}
          cityId={cityId}
        />
      )}

      {selectedPayment && (
        <SendPaymentLinkModal
          open={showPaymentLinkModal}
          onOpenChange={setShowPaymentLinkModal}
          player={player}
          payment={selectedPayment}
          paymentMethod={paymentMethod}
          cityId={cityId}
        />
      )}

      {selectedPayment && (
        <SendSpecificReminderModal
          open={showReminderModal}
          onOpenChange={setShowReminderModal}
          player={player}
          payment={selectedPayment}
          cityId={cityId}
        />
      )}

      {player.team && (
        <NotifyCaptainModal
          open={showCaptainModal}
          onOpenChange={setShowCaptainModal}
          player={player}
          teamId={player.team._id}
          cityId={cityId}
        />
      )}
    </div>
  );
}


----- components\features\payments\InstallmentProgress.tsx -----

// src/components/features/payments/InstallmentProgress.tsx

/**
 * SOLID - Single Responsibility Principle (SRP)
 * Installment payment progress visualization ONLY
 */

"use client";

export function InstallmentProgress({
  payments,
  size = "md",
}: {
  payments: any[];
  size?: "sm" | "md" | "lg";
}) {
  const dotSize = {
    sm: "w-2 h-2",
    md: "w-3 h-3",
    lg: "w-4 h-4",
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case "succeeded":
        return "bg-green-500";
      case "failed":
        return "bg-red-500";
      default:
        return "bg-gray-300";
    }
  };

  let allPayments;
  if (payments) {
    // Always show 8 dots, map by array index instead of paymentNumber
    allPayments = Array(8)
      .fill(null)
      .map((_, index) => {
        const payment = payments[index]; // take the payment directly by array order
        return {
          paymentNumber: index + 1,
          status: payment?.status || "pending",
        };
      });
  }

  return (
    <div className="flex items-center gap-1">
      {allPayments &&
        allPayments.map((payment, index) => (
          <div
            key={index}
            className={`${dotSize[size]} rounded-full ${getStatusColor(
              payment.status
            )} transition-colors`}
            title={`Payment ${payment.paymentNumber}: ${
              index === 0 ? `${payment.status} (Down Payment)` : payment.status
            }`}
          />
        ))}
    </div>
  );
}


----- components\features\payments\NotifyCaptainModal.tsx -----

// src/components/features/payments/NotifyCaptainModal.tsx

/**
 * SOLID - Single Responsibility Principle (SRP)
 * Notify team captain modal ONLY
 */

"use client";

import { useState } from "react";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogFooter,
} from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Loader2 } from "lucide-react";
import { toast } from "sonner";

interface NotifyCaptainModalProps {
  open: boolean;
  onOpenChange: (open: boolean) => void;
  player: any;
  teamId: string;
  cityId: string;
}

export function NotifyCaptainModal({
  open,
  onOpenChange,
  player,
  teamId,
  cityId,
}: NotifyCaptainModalProps) {
  const [isSending, setIsSending] = useState(false);

  const handleNotify = async () => {
    setIsSending(true);
    try {
      const response = await fetch(`/api/v1/${cityId}/payments/notify-captain`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          playerId: player._id,
          teamId,
        }),
      });

      if (!response.ok) throw new Error("Failed to notify captain");

      toast.success("Team captain notified successfully!");
      onOpenChange(false);
    } catch (error) {
      toast.error("Failed to notify captain. Please try again.");
    } finally {
      setIsSending(false);
    }
  };

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent>
        <DialogHeader>
          <DialogTitle>Notify Team Captain</DialogTitle>
          <DialogDescription>
            Send a notification to the team captain about {player.playerName}'s
            unpaid registration.
          </DialogDescription>
        </DialogHeader>

        <div className="py-4">
          <p className="text-sm text-gray-600">
            The team captain will be notified to follow up with this player about
            completing their payment.
          </p>
        </div>

        <DialogFooter>
          <Button variant="outline" onClick={() => onOpenChange(false)}>
            Cancel
          </Button>
          <Button onClick={handleNotify} disabled={isSending}>
            {isSending ? (
              <>
                <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                Notifying...
              </>
            ) : (
              "Notify Captain"
            )}
          </Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
}

----- components\features\payments\OnTrackPlayerView.tsx -----

// src/components/features/payments/OnTrackPlayerView.tsx

/**
 * SOLID - Single Responsibility Principle (SRP)
 * On-track installment player detail view ONLY
 */

"use client";

import Link from "next/link";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import {
  ArrowLeft,
  TrendingUp,
  Mail,
  Phone,
  Instagram as InstagramIcon,
  Calendar,
  Users,
  MapPin,
  CheckCircle2,
} from "lucide-react";
import { format } from "date-fns";

interface OnTrackPlayerViewProps {
  player: any;
  paymentMethod: any;
  cityId: string;
}

export function OnTrackPlayerView({
  player,
  paymentMethod,
  cityId,
}: OnTrackPlayerViewProps) {
  const subscriptionPayments =
    paymentMethod.installments?.subscriptionPayments || [];
  const completedPayments = subscriptionPayments.filter(
    (p: any) => p.status === "succeeded"
  ).length;
  const totalPayments = 8; // 1 down + 7 weekly
  const progressPercentage = Math.round(
    (completedPayments / totalPayments) * 100
  );

  const nextPayment = subscriptionPayments.find(
    (p: any) => p.status === "pending"
  );

  console.log("player:", player);
  console.log("paymentMethod:", paymentMethod);
  console.log("subscriptionPayments:", subscriptionPayments);

  return (
    <div className="p-6 space-y-6">
      {/* Header */}
      <div className="flex items-center gap-4">
        <Button variant="ghost" size="sm" asChild>
          <Link href={`/admin/${cityId}/payments`}>
            <ArrowLeft className="h-4 w-4 mr-2" />
            Back to Payments
          </Link>
        </Button>
      </div>

      {/* Player Overview */}
      <div>
        <div className="flex items-center gap-3 mb-2">
          <h1 className="text-3xl font-bold tracking-tight">
            {player.playerName}
          </h1>
          <Badge className="bg-green-100 text-green-800 border-green-200">
            <TrendingUp className="h-3 w-3 mr-1" />
            On Track
          </Badge>
        </div>
        <p className="text-gray-600">
          {player.team?.teamName || "No Team"} • {player.division?.divisionName}
        </p>
      </div>

      {/* Success Message */}
      <div className="bg-green-50 border border-green-200 rounded-lg p-4 flex items-start gap-3">
        <CheckCircle2 className="h-5 w-5 text-green-600 flex-shrink-0 mt-0.5" />
        <div>
          <p className="font-medium text-green-900">Payment Plan Active</p>
          <p className="text-sm text-green-700 mt-1">
            All payments made on time. {completedPayments} of {totalPayments}{" "}
            payments completed ({progressPercentage}%).
          </p>
        </div>
      </div>

      <div className="grid gap-6 md:grid-cols-3">
        {/* Main Content */}
        <div className="md:col-span-2 space-y-6">
          {/* Payment Progress */}
          <Card>
            <CardHeader>
              <CardTitle>Payment Progress</CardTitle>
            </CardHeader>
            <CardContent className="space-y-6">
              {/* Progress Bar */}
              <div>
                <div className="flex justify-between text-sm mb-2">
                  <span className="font-medium">
                    {completedPayments} of {totalPayments} payments completed
                  </span>
                  <span className="text-gray-500">{progressPercentage}%</span>
                </div>
                <div className="w-full bg-gray-200 rounded-full h-3">
                  <div
                    className="bg-green-500 h-3 rounded-full transition-all"
                    style={{ width: `${progressPercentage}%` }}
                  />
                </div>
              </div>

              {/* Next Payment */}
              {nextPayment && (
                <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
                  <p className="text-sm font-medium text-blue-900 mb-1">
                    Next Payment Due
                  </p>
                  <p className="text-sm text-blue-700">
                    {nextPayment.dueDate
                      ? format(new Date(nextPayment.dueDate), "MMMM dd, yyyy")
                      : "Date pending"}
                  </p>
                </div>
              )}

              {/* Payment Timeline */}
              <div className="space-y-3">
                <p className="text-sm font-medium text-gray-700">
                  Payment Timeline
                </p>
                {subscriptionPayments.map((payment: any, index: number) => (
                  <div
                    key={payment.paymentNumber || index}
                    className="flex items-center gap-4 p-3 rounded-lg border"
                  >
                    <div className="flex items-center justify-center w-10 h-10 rounded-full bg-green-100">
                      {payment.status === "succeeded" ? (
                        <CheckCircle2 className="h-5 w-5 text-green-600" />
                      ) : (
                        <span className="text-sm font-medium text-gray-400">
                          {payment.paymentNumber}
                        </span>
                      )}
                    </div>
                    <div className="flex-1">
                      <p className="text-sm font-medium">
                        Payment #{payment.paymentNumber || index + 1}
                        {payment.paymentNumber === 1 || index === 0
                          ? " (Down Payment)"
                          : ""}
                      </p>
                      <p className="text-xs text-gray-500">
                        {payment.dueDate
                          ? format(new Date(payment.dueDate), "MMM dd, yyyy")
                          : "Date pending"}
                      </p>
                    </div>
                    <Badge className="bg-green-100 text-green-800 border-green-200">
                      {payment.status === "succeeded" ? "Paid" : "Pending"}
                    </Badge>
                  </div>
                ))}
              </div>

              {/* Visual Progress Dots */}
              <div className="flex items-center gap-2 pt-4 border-t">
                <span className="text-sm text-gray-500 mr-2">Progress:</span>
                {Array(8)
                  .fill(null)
                  .map((_, index) => {
                    // get payment at this index directly from array (instead of by paymentNumber)
                    const payment = subscriptionPayments[index];

                    // fallback if payment doesn't exist
                    const isCompleted = payment?.status === "succeeded";

                    return (
                      <div
                        key={index}
                        className={`w-3 h-3 rounded-full ${
                          isCompleted ? "bg-green-500" : "bg-gray-300"
                        }`}
                        title={`Payment ${index + 1}: ${
                          isCompleted ? "Succeeded" : "Pending"
                        }`}
                      />
                    );
                  })}
              </div>
            </CardContent>
          </Card>

          {/* Player Information */}
          <Card>
            <CardHeader>
              <CardTitle>Player Information</CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="flex items-center gap-3">
                <Users className="h-5 w-5 text-gray-400" />
                <div>
                  <p className="text-sm text-gray-500">Team</p>
                  <p className="font-medium">
                    {player.team?.teamName || "No Team Assigned"}
                  </p>
                </div>
              </div>

              <div className="flex items-center gap-3">
                <MapPin className="h-5 w-5 text-gray-400" />
                <div>
                  <p className="text-sm text-gray-500">Division</p>
                  <p className="font-medium">{player.division?.divisionName}</p>
                </div>
              </div>

              <div className="flex items-center gap-3">
                <Calendar className="h-5 w-5 text-gray-400" />
                <div>
                  <p className="text-sm text-gray-500">Registration Date</p>
                  <p className="font-medium">
                    {player.createdAt
                      ? format(new Date(player.createdAt), "MMM dd, yyyy")
                      : "Unknown"}
                  </p>
                </div>
              </div>
            </CardContent>
          </Card>

          {/* Contact Information */}
          <Card>
            <CardHeader>
              <CardTitle>Contact Information</CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              {player.user?.email && (
                <div className="flex items-center gap-3">
                  <Mail className="h-5 w-5 text-gray-400" />
                  <div>
                    <p className="text-sm text-gray-500">Email</p>
                    <p className="font-medium">{player.user.email}</p>
                  </div>
                </div>
              )}

              {player.user?.phoneNumber && (
                <div className="flex items-center gap-3">
                  <Phone className="h-5 w-5 text-gray-400" />
                  <div>
                    <p className="text-sm text-gray-500">Phone</p>
                    <p className="font-medium">{player.user.phoneNumber}</p>
                  </div>
                </div>
              )}

              {player.instagram && (
                <div className="flex items-center gap-3">
                  <InstagramIcon className="h-5 w-5 text-gray-400" />
                  <div>
                    <p className="text-sm text-gray-500">Instagram</p>
                    <p className="font-medium">{player.instagram}</p>
                  </div>
                </div>
              )}
            </CardContent>
          </Card>
        </div>

        {/* Sidebar */}
        <div className="space-y-4">
          <Card>
            <CardHeader>
              <CardTitle>Status Summary</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="text-center py-4">
                <TrendingUp className="mx-auto h-12 w-12 text-green-500 mb-3" />
                <p className="font-medium text-green-900 mb-1">On Track</p>
                <p className="text-sm text-gray-500">
                  No commissioner action needed
                </p>
              </div>

              <div className="mt-6 pt-4 border-t space-y-3">
                <div className="flex justify-between text-sm">
                  <span className="text-gray-500">Successful:</span>
                  <span className="font-medium text-green-600">
                    {completedPayments}
                  </span>
                </div>
                <div className="flex justify-between text-sm">
                  <span className="text-gray-500">Pending:</span>
                  <span className="font-medium text-gray-600">
                    {totalPayments - completedPayments}
                  </span>
                </div>
                <div className="flex justify-between text-sm">
                  <span className="text-gray-500">Failed:</span>
                  <span className="font-medium text-gray-600">0</span>
                </div>
              </div>
            </CardContent>
          </Card>

          <Card>
            <CardHeader>
              <CardTitle>Payment Details</CardTitle>
            </CardHeader>
            <CardContent className="space-y-3">
              <div className="text-sm">
                <p className="text-gray-500">Payment Type</p>
                <p className="font-medium">Installments (8 payments)</p>
              </div>
              <div className="text-sm">
                <p className="text-gray-500">Pricing Tier</p>
                <p className="font-medium">
                  {paymentMethod.pricingTier === "EARLY_BIRD"
                    ? "Early Bird"
                    : "Regular"}
                </p>
              </div>
            </CardContent>
          </Card>
        </div>
      </div>
    </div>
  );
}


----- components\features\payments\PaidPlayerView.tsx -----

// src/components/features/payments/PaidPlayerView.tsx

/**
 * SOLID - Single Responsibility Principle (SRP)
 * Fully paid player detail view ONLY
 */

"use client";

import Link from "next/link";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import {
  ArrowLeft,
  CheckCircle2,
  Mail,
  Phone,
  Instagram as InstagramIcon,
  Calendar,
  Users,
  MapPin,
  CreditCard,
} from "lucide-react";
import { format } from "date-fns";

interface PaidPlayerViewProps {
  player: any;
  paymentMethod: any;
  cityId: string;
}

export function PaidPlayerView({ player, paymentMethod, cityId }: PaidPlayerViewProps) {
  return (
    <div className="p-6 space-y-6">
      {/* Header */}
      <div className="flex items-center gap-4">
        <Button variant="ghost" size="sm" asChild>
          <Link href={`/admin/${cityId}/payments`}>
            <ArrowLeft className="h-4 w-4 mr-2" />
            Back to Payments
          </Link>
        </Button>
      </div>

      {/* Player Overview */}
      <div>
        <div className="flex items-center gap-3 mb-2">
          <h1 className="text-3xl font-bold tracking-tight">{player.playerName}</h1>
          <Badge className="bg-green-100 text-green-800 border-green-200">
            Payment Complete
          </Badge>
        </div>
        <p className="text-gray-600">
          {player.team?.teamName || "No Team"} • {player.division?.divisionName}
        </p>
      </div>

      {/* Success Message */}
      <div className="bg-green-50 border border-green-200 rounded-lg p-4 flex items-start gap-3">
        <CheckCircle2 className="h-5 w-5 text-green-600 flex-shrink-0 mt-0.5" />
        <div>
          <p className="font-medium text-green-900">All Set!</p>
          <p className="text-sm text-green-700 mt-1">
            Payment completed. No further action required.
          </p>
        </div>
      </div>

      <div className="grid gap-6 md:grid-cols-3">
        {/* Main Content */}
        <div className="md:col-span-2 space-y-6">
          {/* Payment Details */}
          <Card>
            <CardHeader>
              <CardTitle>Payment Details</CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="flex items-center gap-3">
                <CreditCard className="h-5 w-5 text-gray-400" />
                <div>
                  <p className="text-sm text-gray-500">Payment Type</p>
                  <p className="font-medium">
                    {paymentMethod.paymentType === "FULL_PAYMENT"
                      ? "Full Payment"
                      : "Installments"}
                  </p>
                </div>
              </div>

              <div className="flex items-center gap-3">
                <CheckCircle2 className="h-5 w-5 text-gray-400" />
                <div>
                  <p className="text-sm text-gray-500">Status</p>
                  <p className="font-medium">Completed</p>
                </div>
              </div>

              <div className="flex items-center gap-3">
                <Calendar className="h-5 w-5 text-gray-400" />
                <div>
                  <p className="text-sm text-gray-500">Payment Date</p>
                  <p className="font-medium">
                    {paymentMethod.createdAt
                      ? format(new Date(paymentMethod.createdAt), "MMM dd, yyyy")
                      : "Unknown"}
                  </p>
                </div>
              </div>

              <div className="flex items-center gap-3">
                <div className="w-5 h-5 flex items-center justify-center">
                  <span className="text-sm font-bold text-gray-400">
                    {paymentMethod.pricingTier === "EARLY_BIRD" ? "EB" : "R"}
                  </span>
                </div>
                <div>
                  <p className="text-sm text-gray-500">Pricing Tier</p>
                  <p className="font-medium">
                    {paymentMethod.pricingTier === "EARLY_BIRD"
                      ? "Early Bird"
                      : "Regular"}
                  </p>
                </div>
              </div>
            </CardContent>
          </Card>

          {/* Player Information */}
          <Card>
            <CardHeader>
              <CardTitle>Player Information</CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="flex items-center gap-3">
                <Users className="h-5 w-5 text-gray-400" />
                <div>
                  <p className="text-sm text-gray-500">Team</p>
                  <p className="font-medium">{player.team?.teamName || "No Team Assigned"}</p>
                </div>
              </div>

              <div className="flex items-center gap-3">
                <MapPin className="h-5 w-5 text-gray-400" />
                <div>
                  <p className="text-sm text-gray-500">Division</p>
                  <p className="font-medium">{player.division?.divisionName}</p>
                </div>
              </div>

              <div className="flex items-center gap-3">
                <Calendar className="h-5 w-5 text-gray-400" />
                <div>
                  <p className="text-sm text-gray-500">Registration Date</p>
                  <p className="font-medium">
                    {player.createdAt
                      ? format(new Date(player.createdAt), "MMM dd, yyyy")
                      : "Unknown"}
                  </p>
                </div>
              </div>
            </CardContent>
          </Card>

          {/* Contact Information */}
          <Card>
            <CardHeader>
              <CardTitle>Contact Information</CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              {player.user?.email && (
                <div className="flex items-center gap-3">
                  <Mail className="h-5 w-5 text-gray-400" />
                  <div>
                    <p className="text-sm text-gray-500">Email</p>
                    <p className="font-medium">{player.user.email}</p>
                  </div>
                </div>
              )}

              {player.user?.phoneNumber && (
                <div className="flex items-center gap-3">
                  <Phone className="h-5 w-5 text-gray-400" />
                  <div>
                    <p className="text-sm text-gray-500">Phone</p>
                    <p className="font-medium">{player.user.phoneNumber}</p>
                  </div>
                </div>
              )}

              {player.instagram && (
                <div className="flex items-center gap-3">
                  <InstagramIcon className="h-5 w-5 text-gray-400" />
                  <div>
                    <p className="text-sm text-gray-500">Instagram</p>
                    <p className="font-medium">{player.instagram}</p>
                  </div>
                </div>
              )}
            </CardContent>
          </Card>
        </div>

        {/* Sidebar */}
        <div className="space-y-4">
          <Card>
            <CardHeader>
              <CardTitle>Payment Status</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="text-center py-6">
                <CheckCircle2 className="mx-auto h-16 w-16 text-green-500 mb-4" />
                <p className="font-medium text-green-900 mb-1">Payment Complete</p>
                <p className="text-sm text-gray-500">
                  {paymentMethod.createdAt
                    ? format(new Date(paymentMethod.createdAt), "MMM dd, yyyy")
                    : "Date unknown"}
                </p>
              </div>
            </CardContent>
          </Card>

          <Card>
            <CardHeader>
              <CardTitle>Registration Timeline</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                <div className="flex gap-3">
                  <div className="flex flex-col items-center">
                    <div className="w-2 h-2 bg-green-500 rounded-full" />
                    <div className="w-0.5 h-full bg-green-500" />
                  </div>
                  <div className="pb-4">
                    <p className="text-sm font-medium">Player Registered</p>
                    <p className="text-xs text-gray-500">
                      {player.createdAt
                        ? format(new Date(player.createdAt), "MMM dd, yyyy")
                        : "Unknown"}
                    </p>
                  </div>
                </div>

                <div className="flex gap-3">
                  <div className="flex flex-col items-center">
                    <div className="w-2 h-2 bg-green-500 rounded-full" />
                    <div className="w-0.5 h-full bg-green-500" />
                  </div>
                  <div className="pb-4">
                    <p className="text-sm font-medium">Payment Completed</p>
                    <p className="text-xs text-gray-500">
                      {paymentMethod.createdAt
                        ? format(new Date(paymentMethod.createdAt), "MMM dd, yyyy")
                        : "Unknown"}
                    </p>
                  </div>
                </div>

                <div className="flex gap-3">
                  <div className="flex flex-col items-center">
                    <div className="w-2 h-2 bg-green-500 rounded-full" />
                  </div>
                  <div>
                    <p className="text-sm font-medium">Ready to Play</p>
                    <p className="text-xs text-gray-500">All set!</p>
                  </div>
                </div>
              </div>
            </CardContent>
          </Card>
        </div>
      </div>
    </div>
  );
}

----- components\features\payments\PaymentDashboard.tsx -----

// src/components/features/payments/PaymentDashboard.tsx

/**
 * SOLID - Single Responsibility Principle (SRP)
 * Payment dashboard orchestration with filters ONLY
 */

"use client";

import { useState, useMemo } from "react";
import { useRouter, useSearchParams } from "next/navigation";
import { Input } from "@/components/ui/input";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Button } from "@/components/ui/button";
import { Search, Download, Filter, X, Loader2 } from "lucide-react";
import { PaymentsList } from "./PaymentsList";
import { toast } from "sonner";

interface PaymentDashboardProps {
  players: any[];
  locations: any[];
  divisions: any[];
  cityId: string;
  currentFilters: {
    location?: string;
    division?: string;
    team?: string;
    payment?: string;
    search?: string;
  };
}

export function PaymentDashboard({
  players,
  locations,
  divisions,
  cityId,
  currentFilters,
}: PaymentDashboardProps) {
  const router = useRouter();
  const searchParams = useSearchParams();
  const [searchValue, setSearchValue] = useState(currentFilters.search || "");
  const [isExporting, setIsExporting] = useState(false);
  const [currentPage, setCurrentPage] = useState(1);
  const playersPerPage = 12;

  // Calculate stats
  const stats = useMemo(() => {
    const total = players.length;
    const unpaid = players.filter((p) => p.paymentStatus === "unpaid").length;
    const onTrack = players.filter(
      (p) => p.paymentStatus === "on-track"
    ).length;
    const hasIssues = players.filter(
      (p) => p.paymentStatus === "has-issues"
    ).length;
    const critical = players.filter(
      (p) => p.paymentStatus === "critical"
    ).length;
    const paid = players.filter((p) => p.paymentStatus === "paid").length;

    return { total, unpaid, onTrack, hasIssues, critical, paid };
  }, [players]);

  // Pagination
  const totalPages = Math.ceil(players.length / playersPerPage);
  const startIndex = (currentPage - 1) * playersPerPage;
  const endIndex = startIndex + playersPerPage;
  const paginatedPlayers = players.slice(startIndex, endIndex);

  const updateFilters = (updates: Record<string, string | undefined>) => {
    const params = new URLSearchParams(searchParams.toString());

    Object.entries(updates).forEach(([key, value]) => {
      if (value) {
        params.set(key, value);
      } else {
        params.delete(key);
      }
    });

    router.push(`/admin/${cityId}/payments?${params.toString()}`);
    setCurrentPage(1); // Reset to page 1 when filters change
  };

  const clearAllFilters = () => {
    router.push(`/admin/${cityId}/payments`);
    setSearchValue("");
    setCurrentPage(1);
  };

  const handleSearch = (value: string) => {
    setSearchValue(value);
    updateFilters({ search: value || undefined });
  };

  const handleExport = async () => {
    setIsExporting(true);
    try {
      const response = await fetch(`/api/v1/${cityId}/payments/export`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          filters: currentFilters,
        }),
      });

      if (!response.ok) throw new Error("Export failed");

      const blob = await response.blob();
      const url = window.URL.createObjectURL(blob);
      const a = document.createElement("a");
      a.href = url;
      a.download = `payment-report-${
        new Date().toISOString().split("T")[0]
      }.csv`;
      document.body.appendChild(a);
      a.click();
      window.URL.revokeObjectURL(url);
      document.body.removeChild(a);

      toast.success("Export completed successfully!");
    } catch (error) {
      toast.error("Failed to export. Please try again.");
    } finally {
      setIsExporting(false);
    }
  };

  const getFilteredDivisions = () => {
    if (!currentFilters.location) return divisions;
    return divisions.filter(
      (d: any) => d.location._id === currentFilters.location
    );
  };

  const hasActiveFilters =
    currentFilters.location ||
    currentFilters.division ||
    currentFilters.team ||
    currentFilters.payment !== "all" ||
    currentFilters.search;

  return (
    <div className="space-y-6">
      {/* Filter Section */}
      <div className="bg-white rounded-lg shadow p-6">
        <div className="space-y-4">
          {/* Header with Total Count */}
          <div className="flex items-center justify-between pb-4 border-b">
            <div>
              <h2 className="text-lg font-semibold text-gray-900">
                Payment Overview
              </h2>
              <p className="text-sm text-gray-600 mt-1">
                {stats.total} total players • {stats.unpaid} unpaid •{" "}
                {stats.onTrack} on track • {stats.hasIssues} has issues •{" "}
                {stats.critical} critical • {stats.paid} paid
              </p>
            </div>
          </div>

          {/* Row 1: Filters */}
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
            <div>
              <label className="text-sm font-medium text-gray-700 mb-1.5 block">
                Location
              </label>
              <Select
                value={currentFilters.location || "all"}
                onValueChange={(value) => {
                  updateFilters({
                    location: value === "all" ? undefined : value,
                    division: undefined,
                    team: undefined,
                  });
                }}
              >
                <SelectTrigger>
                  <SelectValue placeholder="All Locations" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="all">All Locations</SelectItem>
                  {locations.map((location: any) => (
                    <SelectItem key={location._id} value={location._id}>
                      {location.name}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>

            <div>
              <label className="text-sm font-medium text-gray-700 mb-1.5 block">
                Division
              </label>
              <Select
                value={currentFilters.division || "all"}
                onValueChange={(value) => {
                  updateFilters({
                    division: value === "all" ? undefined : value,
                    team: undefined,
                  });
                }}
              >
                <SelectTrigger>
                  <SelectValue placeholder="All Divisions" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="all">All Divisions</SelectItem>
                  {getFilteredDivisions().map((division: any) => (
                    <SelectItem key={division._id} value={division._id}>
                      {division.location?.name} - {division.divisionName}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>

            <div>
              <label className="text-sm font-medium text-gray-700 mb-1.5 block">
                Payment Status
              </label>
              <Select
                value={currentFilters.payment || "all"}
                onValueChange={(value) => updateFilters({ payment: value })}
              >
                <SelectTrigger>
                  <SelectValue placeholder="All Status" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="all">All Status</SelectItem>
                  <SelectItem value="unpaid">Unpaid</SelectItem>
                  <SelectItem value="on-track">
                    On Track (Installments)
                  </SelectItem>
                  <SelectItem value="has-issues">Has Issues</SelectItem>
                  <SelectItem value="critical">Critical</SelectItem>
                  <SelectItem value="paid">Fully Paid</SelectItem>
                </SelectContent>
              </Select>
            </div>

            <div className="flex items-end">
              <Button
                variant="outline"
                onClick={clearAllFilters}
                disabled={!hasActiveFilters}
                className="w-full"
              >
                <X className="h-4 w-4 mr-2" />
                Clear Filters
              </Button>
            </div>
          </div>

          {/* Row 2: Search and Export */}
          <div className="flex gap-4">
            <div className="relative flex-1">
              <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400" />
              <Input
                placeholder="Search players..."
                value={searchValue}
                onChange={(e) => handleSearch(e.target.value)}
                className="pl-10"
              />
            </div>
            <Button
              variant="outline"
              onClick={handleExport}
              disabled={isExporting || players.length === 0}
            >
              {isExporting ? (
                <>
                  <Loader2 className="h-4 w-4 mr-2 animate-spin" />
                  Exporting...
                </>
              ) : (
                <>
                  <Download className="h-4 w-4 mr-2" />
                  Export CSV
                </>
              )}
            </Button>
          </div>

          {/* Active Filters */}
          {hasActiveFilters && (
            <div className="flex items-center gap-2 pt-2 border-t">
              <span className="text-sm text-gray-500">Active Filters:</span>
              <div className="flex flex-wrap gap-2">
                {currentFilters.location && (
                  <span className="inline-flex items-center gap-1 px-2 py-1 bg-blue-100 text-blue-800 rounded text-xs">
                    <Filter className="h-3 w-3" />
                    Location
                  </span>
                )}
                {currentFilters.division && (
                  <span className="inline-flex items-center gap-1 px-2 py-1 bg-blue-100 text-blue-800 rounded text-xs">
                    <Filter className="h-3 w-3" />
                    Division
                  </span>
                )}
                {currentFilters.payment !== "all" && (
                  <span className="inline-flex items-center gap-1 px-2 py-1 bg-blue-100 text-blue-800 rounded text-xs">
                    <Filter className="h-3 w-3" />
                    {currentFilters.payment}
                  </span>
                )}
                {currentFilters.search && (
                  <span className="inline-flex items-center gap-1 px-2 py-1 bg-blue-100 text-blue-800 rounded text-xs">
                    <Search className="h-3 w-3" />
                    {currentFilters.search}
                  </span>
                )}
              </div>
            </div>
          )}
        </div>
      </div>

      {/* Players List */}
      <PaymentsList players={paginatedPlayers} cityId={cityId} />

      {/* Pagination */}
      {totalPages > 1 && (
        <div className="flex items-center justify-between bg-white rounded-lg shadow p-4">
          <div className="text-sm text-gray-600">
            Showing {startIndex + 1} to {Math.min(endIndex, players.length)} of{" "}
            {players.length} players
          </div>
          <div className="flex gap-2">
            <Button
              variant="outline"
              size="sm"
              onClick={() => setCurrentPage((prev) => Math.max(1, prev - 1))}
              disabled={currentPage === 1}
            >
              Previous
            </Button>
            <div className="flex items-center gap-1">
              {Array.from({ length: totalPages }, (_, i) => i + 1).map(
                (page) => {
                  // Show first page, last page, current page, and pages around current
                  if (
                    page === 1 ||
                    page === totalPages ||
                    (page >= currentPage - 1 && page <= currentPage + 1)
                  ) {
                    return (
                      <Button
                        key={page}
                        variant={currentPage === page ? "default" : "outline"}
                        size="sm"
                        onClick={() => setCurrentPage(page)}
                        className="min-w-[40px]"
                      >
                        {page}
                      </Button>
                    );
                  } else if (
                    page === currentPage - 2 ||
                    page === currentPage + 2
                  ) {
                    return (
                      <span key={page} className="px-2 text-gray-400">
                        ...
                      </span>
                    );
                  }
                  return null;
                }
              )}
            </div>
            <Button
              variant="outline"
              size="sm"
              onClick={() =>
                setCurrentPage((prev) => Math.min(totalPages, prev + 1))
              }
              disabled={currentPage === totalPages}
            >
              Next
            </Button>
          </div>
        </div>
      )}
    </div>
  );
}


----- components\features\payments\PaymentsList.tsx -----

// src/components/features/payments/PaymentsList.tsx

/**
 * SOLID - Single Responsibility Principle (SRP)
 * Display payment list with status cards ONLY
 */

"use client";

import Link from "next/link";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Card, CardContent } from "@/components/ui/card";
import { Users, ExternalLink, Mail, UserCircle, Trophy } from "lucide-react";
import { InstallmentProgress } from "./InstallmentProgress";

interface PaymentsListProps {
  players: any[];
  cityId: string;
}

export function PaymentsList({ players, cityId }: PaymentsListProps) {
  if (players.length === 0) {
    return (
      <Card className="p-12 text-center">
        <Users className="mx-auto h-12 w-12 text-gray-400" />
        <h3 className="mt-4 text-lg font-medium text-gray-900">
          No players found
        </h3>
        <p className="mt-2 text-sm text-gray-500">
          Try adjusting your filters to see more results.
        </p>
      </Card>
    );
  }

  const getStatusBadge = (status: string) => {
    switch (status) {
      case "paid":
        return (
          <Badge className="bg-green-100 text-green-800 border-green-200">
            Fully Paid
          </Badge>
        );
      case "on-track":
        return (
          <Badge className="bg-blue-100 text-blue-800 border-blue-200">
            On Track
          </Badge>
        );
      case "has-issues":
        return (
          <Badge className="bg-yellow-100 text-yellow-800 border-yellow-200">
            Has Issues
          </Badge>
        );
      case "critical":
        return (
          <Badge className="bg-red-100 text-red-800 border-red-200">
            Critical
          </Badge>
        );
      default:
        return (
          <Badge className="bg-gray-100 text-gray-800 border-gray-200">
            Unpaid
          </Badge>
        );
    }
  };

  return (
    <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
      {players.map((player: any) => (
        <Card key={player._id} className="hover:shadow-lg transition-shadow">
          <CardContent className="p-6">
            {/* Header */}
            <div className="flex items-start justify-between mb-4">
              <div className="flex-1 min-w-0">
                <div className="flex items-center gap-2 mb-1">
                  <UserCircle className="h-5 w-5 text-gray-400 flex-shrink-0" />
                  <h3 className="font-semibold text-gray-900 truncate">
                    {player.playerName}
                  </h3>
                </div>
                {player.user?.email && (
                  <div className="flex items-center gap-2 text-sm text-gray-500">
                    <Mail className="h-3 w-3 flex-shrink-0" />
                    <span className="truncate">{player.user.email}</span>
                  </div>
                )}
              </div>
              <Button variant="ghost" size="sm" asChild className="ml-2">
                <Link href={`/admin/${cityId}/payments/${player._id}`}>
                  <ExternalLink className="h-4 w-4" />
                </Link>
              </Button>
            </div>

            {/* Team & Division */}
            <div className="space-y-2 mb-4 pb-4 border-b">
              <div className="flex items-center gap-2 text-sm">
                <Users className="h-4 w-4 text-gray-400 flex-shrink-0" />
                <span className="text-gray-600">Team:</span>
                <span className="font-medium text-gray-900 truncate">
                  {player.team?.teamName || "No Team"}
                </span>
              </div>
              <div className="flex items-center gap-2 text-sm">
                <Trophy className="h-4 w-4 text-gray-400 flex-shrink-0" />
                <span className="text-gray-600">Division:</span>
                <span className="font-medium text-gray-900 truncate">
                  {player.division?.divisionName}
                </span>
              </div>
            </div>

            {/* Payment Status */}
            <div className="space-y-3">
              <div className="flex items-center justify-between">
                <span className="text-sm text-gray-600">Payment Status:</span>
                {getStatusBadge(player.paymentStatus)}
              </div>

              {/* Payment Details */}
              {player.paymentStatus === "on-track" ||
              player.paymentStatus === "has-issues" ||
              player.paymentStatus === "critical" ? (
                <div className="pt-2">
                  <p className="text-xs text-gray-500 mb-2">
                    Payment Progress:
                  </p>
                  <InstallmentProgress
                    payments={
                      player.paymentMethod?.installments
                        ?.subscriptionPayments || []
                    }
                    size="md"
                  />
                </div>
              ) : player.paymentStatus === "paid" ? (
                <div className="bg-green-50 rounded-lg p-3 text-center">
                  <p className="text-sm font-medium text-green-800">
                    ✓ Payment Complete
                  </p>
                </div>
              ) : (
                <div className="bg-gray-50 rounded-lg p-3 text-center">
                  <p className="text-sm text-gray-600">No Payment Method</p>
                </div>
              )}
            </div>
          </CardContent>
        </Card>
      ))}
    </div>
  );
}


----- components\features\payments\SendPaymentLinkModal.tsx -----

// src/components/features/payments/SendPaymentLinkModal.tsx

/**
 * SOLID - Single Responsibility Principle (SRP)
 * Send payment link modal ONLY
 */

"use client";

import { useState } from "react";
import { useRouter } from "next/navigation";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogFooter,
} from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { Loader2, MessageSquare, AlertCircle, Phone } from "lucide-react";
import { toast } from "sonner";

interface SendPaymentLinkModalProps {
  open: boolean;
  onOpenChange: (open: boolean) => void;
  player: any;
  payment: any;
  paymentMethod: any;
  cityId: string;
}

export function SendPaymentLinkModal({
  open,
  onOpenChange,
  player,
  payment,
  paymentMethod,
  cityId,
}: SendPaymentLinkModalProps) {
  const router = useRouter();
  const [isSending, setIsSending] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const amount =
    payment.paymentNumber === 1
      ? 60
      : paymentMethod.pricingTier === "EARLY_BIRD"
      ? 25
      : 30;

  const handleSend = async () => {
    setIsSending(true);
    setError(null);

    try {
      const response = await fetch(
        `/api/v1/${cityId}/payments/send-payment-link`,
        {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({
            playerId: player._id,
            paymentMethodId: paymentMethod._id,
            paymentNumber: payment.paymentNumber,
            amount: amount * 100, // Convert to cents
          }),
        }
      );

      const data = await response.json();

      if (!response.ok) {
        throw new Error(data.error || "Failed to send payment link");
      }

      toast.success("Payment link sent successfully!");
      onOpenChange(false);
      router.refresh();
    } catch (error: any) {
      setError(error.message);
      toast.error(error.message);
    } finally {
      setIsSending(false);
    }
  };

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent>
        <DialogHeader>
          <DialogTitle className="flex items-center gap-2">
            <MessageSquare className="h-5 w-5 text-blue-600" />
            Send Payment Link
          </DialogTitle>
          <DialogDescription>
            Create and send a payment link to the player via SMS.
          </DialogDescription>
        </DialogHeader>

        <div className="space-y-4 py-4">
          {/* Payment Details */}
          <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
            <div className="space-y-2">
              <div className="flex justify-between text-sm">
                <span className="text-gray-600">Player:</span>
                <span className="font-medium">{player.playerName}</span>
              </div>
              <div className="flex justify-between text-sm">
                <span className="text-gray-600">Payment:</span>
                <span className="font-medium">
                  #{payment.paymentNumber}
                  {payment.paymentNumber === 1 && " (Down Payment)"}
                </span>
              </div>
              <div className="flex justify-between text-sm">
                <span className="text-gray-600">Amount:</span>
                <span className="font-bold text-lg">${amount}.00</span>
              </div>
            </div>
          </div>

          {/* Phone Number */}
          {player.user?.phoneNumber ? (
            <div className="flex items-center gap-3 p-3 bg-gray-50 rounded-lg">
              <Phone className="h-5 w-5 text-gray-400" />
              <div>
                <p className="text-sm font-medium text-gray-900">
                  SMS will be sent to:
                </p>
                <p className="text-sm text-gray-600">
                  {player.user.phoneNumber}
                </p>
              </div>
            </div>
          ) : (
            <Alert variant="destructive">
              <AlertCircle className="h-4 w-4" />
              <AlertDescription className="text-sm">
                No phone number on file for this player. Cannot send SMS.
              </AlertDescription>
            </Alert>
          )}

          {/* Info */}
          <Alert>
            <AlertCircle className="h-4 w-4" />
            <AlertDescription className="text-sm">
              This will create a new Stripe payment link and send it to the
              player via SMS. The player will pay when ready. Link does not
              expire.
            </AlertDescription>
          </Alert>

          {/* Error Display */}
          {error && (
            <Alert variant="destructive">
              <AlertCircle className="h-4 w-4" />
              <AlertDescription className="text-sm">{error}</AlertDescription>
            </Alert>
          )}
        </div>

        <DialogFooter>
          <Button
            variant="outline"
            onClick={() => onOpenChange(false)}
            disabled={isSending}
          >
            Cancel
          </Button>
          <Button
            onClick={handleSend}
            disabled={isSending || !player.user?.phoneNumber}
            className="bg-blue-600 hover:bg-blue-700"
          >
            {isSending ? (
              <>
                <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                Sending...
              </>
            ) : (
              <>
                <MessageSquare className="mr-2 h-4 w-4" />
                Send Payment Link
              </>
            )}
          </Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
}


----- components\features\payments\SendReminderModal.tsx -----

// src/components/features/payments/SendReminderModal.tsx

/**
 * SOLID - Single Responsibility Principle (SRP)
 * Send payment reminder modal ONLY
 */

"use client";

import { useState } from "react";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogFooter,
} from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Loader2 } from "lucide-react";
import { toast } from "sonner";

interface SendReminderModalProps {
  open: boolean;
  onOpenChange: (open: boolean) => void;
  player: any;
  cityId: string;
}

export function SendReminderModal({
  open,
  onOpenChange,
  player,
  cityId,
}: SendReminderModalProps) {
  const [isSending, setIsSending] = useState(false);

  const handleSend = async () => {
    setIsSending(true);
    try {
      const response = await fetch(`/api/v1/${cityId}/payments/send-reminder`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          playerId: player._id,
          email: player.user?.email,
          phoneNumber: player.user?.phoneNumber,
        }),
      });

      if (!response.ok) throw new Error("Failed to send reminder");

      toast.success("Payment reminder sent successfully!");
      onOpenChange(false);
    } catch (error) {
      toast.error("Failed to send reminder. Please try again.");
    } finally {
      setIsSending(false);
    }
  };

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent>
        <DialogHeader>
          <DialogTitle>Send Payment Reminder</DialogTitle>
          <DialogDescription>
            Send a payment reminder to {player.playerName} via email and SMS.
          </DialogDescription>
        </DialogHeader>

        <div className="py-4">
          <p className="text-sm text-gray-600">
            This will send a reminder to:
          </p>
          <ul className="mt-2 space-y-1 text-sm">
            {player.user?.email && <li>📧 {player.user.email}</li>}
            {player.user?.phoneNumber && <li>📱 {player.user.phoneNumber}</li>}
          </ul>
        </div>

        <DialogFooter>
          <Button variant="outline" onClick={() => onOpenChange(false)}>
            Cancel
          </Button>
          <Button onClick={handleSend} disabled={isSending}>
            {isSending ? (
              <>
                <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                Sending...
              </>
            ) : (
              "Send Reminder"
            )}
          </Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
}

----- components\features\payments\SendSpecificReminderModal.tsx -----

// src/components/features/payments/SendSpecificReminderModal.tsx

/**
 * SOLID - Single Responsibility Principle (SRP)
 * Send specific payment reminder modal ONLY
 */

"use client";

import { useState } from "react";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogFooter,
} from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Loader2, ExternalLink } from "lucide-react";
import { toast } from "sonner";

interface SendSpecificReminderModalProps {
  open: boolean;
  onOpenChange: (open: boolean) => void;
  player: any;
  payment: any;
  cityId: string;
}

export function SendSpecificReminderModal({
  open,
  onOpenChange,
  player,
  payment,
  cityId,
}: SendSpecificReminderModalProps) {
  const [isSending, setIsSending] = useState(false);

  const handleSend = async () => {
    setIsSending(true);
    try {
      const response = await fetch(`/api/v1/${cityId}/payments/send-specific-reminder`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          playerId: player._id,
          paymentNumber: payment.paymentNumber,
          paymentLink: payment.paymentLink,
          phoneNumber: player.user?.phoneNumber,
        }),
      });

      if (!response.ok) throw new Error("Failed to send reminder");

      toast.success("Payment reminder sent successfully!");
      onOpenChange(false);
    } catch (error) {
      toast.error("Failed to send reminder. Please try again.");
    } finally {
      setIsSending(false);
    }
  };

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent>
        <DialogHeader>
          <DialogTitle>Send Payment Reminder</DialogTitle>
          <DialogDescription>
            Send SMS reminder for Payment #{payment.paymentNumber} to {player.playerName}.
          </DialogDescription>
        </DialogHeader>

        <div className="py-4 space-y-4">
          <div className="bg-gray-50 rounded-lg p-4 space-y-2">
            <p className="text-sm font-medium">Payment Details:</p>
            <ul className="text-sm text-gray-600 space-y-1">
              <li>• Payment #{payment.paymentNumber}</li>
              <li>• Failed {payment.attemptCount || 1} time(s)</li>
              <li>• Will send SMS to: {player.user?.phoneNumber || "No phone"}</li>
            </ul>
          </div>

          {payment.paymentLink && (
  <div className="text-sm">
    <p className="text-gray-600 mb-2">Payment link will be included:</p>
    <a
      href={payment.paymentLink}
      target="_blank"
      rel="noopener noreferrer"
      className="text-blue-600 hover:underline flex items-center gap-1"
    >
      View Stripe Invoice
      <ExternalLink className="h-3 w-3" />
    </a>
  </div>
)}

        </div>

        <DialogFooter>
          <Button variant="outline" onClick={() => onOpenChange(false)}>
            Cancel
          </Button>
          <Button onClick={handleSend} disabled={isSending || !player.user?.phoneNumber}>
            {isSending ? (
              <>
                <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                Sending...
              </>
            ) : (
              "Send SMS Reminder"
            )}
          </Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
}

----- components\features\payments\SuspensionWarningModal.tsx -----

// src/components/features/payments/SuspensionWarningModal.tsx

/**
 * SOLID - Single Responsibility Principle (SRP)
 * Suspension warning modal ONLY
 */

"use client";

import { useState } from "react";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogFooter,
} from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { ShieldAlert } from "lucide-react";

interface SuspensionWarningModalProps {
  open: boolean;
  onOpenChange: (open: boolean) => void;
  player: any;
  failedPaymentsCount: number;
  cityId: string;
}

export function SuspensionWarningModal({
  open,
  onOpenChange,
  player,
  failedPaymentsCount,
  cityId,
}: SuspensionWarningModalProps) {
  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent>
        <DialogHeader>
          <DialogTitle className="flex items-center gap-2 text-red-900">
            <ShieldAlert className="h-5 w-5 text-red-600" />
            Player Suspension Consideration
          </DialogTitle>
          <DialogDescription>
            Review suspension policy for {player.playerName}.
          </DialogDescription>
        </DialogHeader>

        <div className="py-4 space-y-4">
          <div className="bg-red-50 border-2 border-red-300 rounded-lg p-4">
            <p className="text-sm font-bold text-red-900 mb-2">Critical Payment Status</p>
            <ul className="space-y-1 text-sm text-red-800">
              <li>• {failedPaymentsCount} payments failed</li>
              <li>• Multiple collection attempts unsuccessful</li>
              <li>• League policy may require suspension</li>
            </ul>
          </div>

          <div className="text-sm text-gray-600 space-y-2">
            <p className="font-medium">Recommended next steps:</p>
            <ol className="list-decimal list-inside space-y-1 ml-2">
              <li>Final captain escalation attempt</li>
              <li>Document all communication attempts</li>
              <li>Review league suspension policy</li>
              <li>Consult with league executive before suspension</li>
            </ol>
          </div>

          <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-3">
            <p className="text-xs text-yellow-800">
              <strong>Note:</strong> Player suspension is a last resort. Ensure all 
              reasonable collection efforts have been exhausted before proceeding.
            </p>
          </div>
        </div>

        <DialogFooter>
          <Button variant="outline" onClick={() => onOpenChange(false)}>
            Close
          </Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
}

----- components\features\payments\UnpaidPlayerView.tsx -----

// src/components/features/payments/UnpaidPlayerView.tsx

/**
 * SOLID - Single Responsibility Principle (SRP)
 * Unpaid player detail view ONLY
 */

"use client";

import { useState } from "react";
import { useRouter } from "next/navigation";
import Link from "next/link";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import {
  ArrowLeft,
  AlertCircle,
  Mail,
  Phone,
  Instagram as InstagramIcon,
  Calendar,
  Users,
  MapPin,
} from "lucide-react";
import { SendReminderModal } from "./SendReminderModal";
import { NotifyCaptainModal } from "./NotifyCaptainModal";
import { formatDistanceToNow } from "date-fns";

interface UnpaidPlayerViewProps {
  player: any;
  cityId: string;
}

export function UnpaidPlayerView({ player, cityId }: UnpaidPlayerViewProps) {
  const router = useRouter();
  const [showReminderModal, setShowReminderModal] = useState(false);
  const [showCaptainModal, setShowCaptainModal] = useState(false);

  const daysSinceRegistration = player.createdAt
    ? Math.floor((Date.now() - new Date(player.createdAt).getTime()) / (1000 * 60 * 60 * 24))
    : 0;

  return (
    <div className="p-6 space-y-6">
      {/* Header */}
      <div className="flex items-center gap-4">
        <Button variant="ghost" size="sm" asChild>
          <Link href={`/admin/${cityId}/payments`}>
            <ArrowLeft className="h-4 w-4 mr-2" />
            Back to Payments
          </Link>
        </Button>
      </div>

      {/* Player Overview */}
      <div>
        <div className="flex items-center gap-3 mb-2">
          <h1 className="text-3xl font-bold tracking-tight">{player.playerName}</h1>
          <Badge className="bg-red-100 text-red-800 border-red-200">
            Payment Required
          </Badge>
        </div>
        <p className="text-gray-600">
          {player.team?.teamName || "No Team"} • {player.division?.divisionName}
        </p>
      </div>

      {/* Alert */}
      <div className="bg-red-50 border border-red-200 rounded-lg p-4 flex items-start gap-3">
        <AlertCircle className="h-5 w-5 text-red-600 flex-shrink-0 mt-0.5" />
        <div>
          <p className="font-medium text-red-900">No Payment Method on File</p>
          <p className="text-sm text-red-700 mt-1">
            Registered {daysSinceRegistration} days ago. Payment required to participate.
          </p>
        </div>
      </div>

      <div className="grid gap-6 md:grid-cols-3">
        {/* Player Information */}
        <div className="md:col-span-2 space-y-6">
          <Card>
            <CardHeader>
              <CardTitle>Player Information</CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="flex items-center gap-3">
                <Users className="h-5 w-5 text-gray-400" />
                <div>
                  <p className="text-sm text-gray-500">Team</p>
                  <p className="font-medium">{player.team?.teamName || "No Team Assigned"}</p>
                </div>
              </div>

              <div className="flex items-center gap-3">
                <MapPin className="h-5 w-5 text-gray-400" />
                <div>
                  <p className="text-sm text-gray-500">Division</p>
                  <p className="font-medium">{player.division?.divisionName}</p>
                </div>
              </div>

              <div className="flex items-center gap-3">
                <Calendar className="h-5 w-5 text-gray-400" />
                <div>
                  <p className="text-sm text-gray-500">Registration Date</p>
                  <p className="font-medium">
                    {player.createdAt
                      ? new Date(player.createdAt).toLocaleDateString()
                      : "Unknown"}
                  </p>
                </div>
              </div>
            </CardContent>
          </Card>

          {/* Contact Information */}
          <Card>
            <CardHeader>
              <CardTitle>Contact Information</CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              {player.user?.email && (
                <div className="flex items-center gap-3">
                  <Mail className="h-5 w-5 text-gray-400" />
                  <div>
                    <p className="text-sm text-gray-500">Email</p>
                    <p className="font-medium">{player.user.email}</p>
                  </div>
                </div>
              )}

              {player.user?.phoneNumber && (
                <div className="flex items-center gap-3">
                  <Phone className="h-5 w-5 text-gray-400" />
                  <div>
                    <p className="text-sm text-gray-500">Phone</p>
                    <p className="font-medium">{player.user.phoneNumber}</p>
                  </div>
                </div>
              )}

              {player.instagram && (
                <div className="flex items-center gap-3">
                  <InstagramIcon className="h-5 w-5 text-gray-400" />
                  <div>
                    <p className="text-sm text-gray-500">Instagram</p>
                    <p className="font-medium">{player.instagram}</p>
                  </div>
                </div>
              )}
            </CardContent>
          </Card>
        </div>

        {/* Actions Sidebar */}
        <div className="space-y-4">
          <Card>
            <CardHeader>
              <CardTitle>Quick Actions</CardTitle>
            </CardHeader>
            <CardContent className="space-y-3">
              <Button
                className="w-full"
                onClick={() => setShowReminderModal(true)}
              >
                Send Payment Reminder
              </Button>

              {player.team && (
                <Button
                  variant="outline"
                  className="w-full"
                  onClick={() => setShowCaptainModal(true)}
                >
                  Notify Team Captain
                </Button>
              )}
            </CardContent>
          </Card>

          <Card>
            <CardHeader>
              <CardTitle>Payment Status</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="text-center py-4">
                <AlertCircle className="mx-auto h-12 w-12 text-red-400 mb-3" />
                <p className="text-sm text-gray-500">
                  No payment method on file
                </p>
                <p className="text-xs text-gray-400 mt-1">
                  Player needs to complete registration
                </p>
              </div>
            </CardContent>
          </Card>
        </div>
      </div>

      {/* Modals */}
      <SendReminderModal
        open={showReminderModal}
        onOpenChange={setShowReminderModal}
        player={player}
        cityId={cityId}
      />

      {player.team && (
        <NotifyCaptainModal
          open={showCaptainModal}
          onOpenChange={setShowCaptainModal}
          player={player}
          teamId={player.team._id}
          cityId={cityId}
        />
      )}
    </div>
  );
}

----- components\layout\AdminLayout.tsx -----

// src/components/layout/AdminLayout.tsx

/**
 * SOLID - Single Responsibility Principle (SRP)
 * Admin layout orchestration ONLY
 */

/**
 * Separation of Concerns
 * - Layout structure here
 * - Auth handling in parent
 * - Sidebar state managed locally
 */

"use client";

import { useState } from "react";
import { Sidebar } from "./Sidebar";
import { Header } from "./Header";

interface AdminLayoutProps {
  children: React.ReactNode;
  cityId: string;
}

export function AdminLayout({ children, cityId }: AdminLayoutProps) {
  const [isSidebarOpen, setIsSidebarOpen] = useState(false);

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Sidebar */}
      <Sidebar isOpen={isSidebarOpen} onClose={() => setIsSidebarOpen(false)} />

      {/* Main content */}
      <div className="lg:pl-64">
        {/* Header */}
        <Header onMenuClick={() => setIsSidebarOpen(true)} cityId={cityId} />

        {/* Page content */}
        <main className="min-h-[calc(100vh-4rem)]">{children}</main>
      </div>
    </div>
  );
}


----- components\layout\CitySelector.tsx -----

// src/components/layout/CitySelector.tsx

/**
 * SOLID - Single Responsibility Principle (SRP)
 * City selection dropdown ONLY
 */

"use client";

import { useState, useEffect } from "react";
import { useRouter, usePathname } from "next/navigation";
import { MapPin, ChevronDown } from "lucide-react";
import { getActiveCities } from "@/lib/db/queries/cities";

interface CitySelectorProps {
  currentCityId: string;
}

export function CitySelector({ currentCityId }: CitySelectorProps) {
  const router = useRouter();
  const pathname = usePathname();
  const [cities, setCities] = useState<any[]>([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    fetch("/api/v1/cities")
      .then((res) => res.json())
      .then((data) => {
        if (data.success) setCities(data.data);
        setLoading(false);
      });
  }, []);

  const handleCityChange = (newCityId: string) => {
    const pathSegments = pathname.split("/");
    const routeAfterCity = pathSegments.slice(3).join("/") || "dashboard";
    router.push(`/admin/${newCityId}/${routeAfterCity}`);
  };

  return (
    <div className="relative">
      <select
        value={currentCityId}
        onChange={(e) => handleCityChange(e.target.value)}
        disabled={loading}
        className="appearance-none bg-white border border-gray-300 rounded-lg
          pl-10 pr-10 py-2 text-sm font-medium hover:border-gray-400
          focus:outline-none focus:ring-2 focus:ring-blue-500"
      >
        {loading ? (
          <option>Loading...</option>
        ) : (
          cities.map((city) => (
            <option key={city._id} value={city._id}>
              {city.cityName}, {city.region}
            </option>
          ))
        )}
      </select>
      <MapPin className="absolute left-3 top-1/2 -translate-y-1/2 w-5 h-5 text-gray-400 pointer-events-none" />
      <ChevronDown className="absolute right-3 top-1/2 -translate-y-1/2 w-5 h-5 text-gray-400 pointer-events-none" />
    </div>
  );
}


----- components\layout\Header.tsx -----

// src/components/layout/Header.tsx

/**
 * SOLID - Single Responsibility Principle (SRP)
 * Header layout orchestration ONLY
 */

"use client";

import { Menu } from "lucide-react";
import { Button } from "@/components/ui/button";
import { CitySelector } from "./CitySelector";
import { UserMenu } from "./UserMenu";

interface HeaderProps {
  onMenuClick: () => void;
  cityId: string;
}

export function Header({ onMenuClick, cityId }: HeaderProps) {
  return (
    <header className="sticky top-0 z-30 bg-white border-b border-gray-200 shadow-sm">
      <div className="flex items-center justify-between h-16 px-4 sm:px-6 lg:px-8">
        {/* Mobile menu button */}
        <Button
          variant="ghost"
          size="icon"
          onClick={onMenuClick}
          className="lg:hidden"
        >
          <Menu className="w-6 h-6" />
        </Button>

        {/* City selector */}
        <div className="flex-1 flex justify-center lg:justify-start lg:ml-4">
          <CitySelector currentCityId={cityId} />
        </div>

        {/* User menu */}
        <UserMenu />
      </div>
    </header>
  );
}


----- components\layout\NavItem.tsx -----

// src/components/layout/NavItem.tsx

/**
 * SOLID - Single Responsibility Principle (SRP)
 * Renders a single navigation item ONLY
 */

// src/components/layout/NavItem.tsx

"use client";

import Link from "next/link";
import { cn } from "@/lib/utils";
import * as LucideIcons from "lucide-react";

interface NavItemProps {
  label: string;
  href: string;
  icon: string; // Lucide icon name
  isActive: boolean;
  onClick?: () => void;
}

export function NavItem({
  label,
  href,
  icon,
  isActive,
  onClick,
}: NavItemProps) {
  const Icon = (LucideIcons as any)[icon];

  return (
    <Link
      href={href}
      onClick={onClick}
      className={cn(
        "flex items-center gap-3 px-3 py-2 rounded-lg transition-colors",
        isActive
          ? "bg-gray-800 text-white"
          : "text-gray-400 hover:bg-gray-800 hover:text-white"
      )}
    >
      {Icon && <Icon className="h-5 w-5" />}
      <span className="text-sm font-medium">{label}</span>
    </Link>
  );
}


----- components\layout\NavItemWithChildren.tsx -----

// src/components/layout/NavItemWithChildren.tsx

/**
 * SOLID - Single Responsibility Principle (SRP)
 * Renders navigation item with expandable children ONLY
 */
// src/components/layout/NavItemWithChildren.tsx

"use client";

import { useState } from "react";
import Link from "next/link";
import { ChevronDown } from "lucide-react";
import { cn } from "@/lib/utils";
import * as LucideIcons from "lucide-react";
import { NavItem as NavItemType } from "@/constants/navigation";

interface NavItemWithChildrenProps {
  item: NavItemType;
  pathname: string;
  cityId: string;
  onNavigate: () => void;
}

export function NavItemWithChildren({
  item,
  pathname,
  cityId,
  onNavigate,
}: NavItemWithChildrenProps) {
  const [isOpen, setIsOpen] = useState(false);
  const Icon = (LucideIcons as any)[item.icon];

  const isActiveParent = item.children?.some(
    (child) => pathname === `/admin/${cityId}${child.href}`
  );

  return (
    <li>
      <button
        onClick={() => setIsOpen(!isOpen)}
        className={cn(
          "flex items-center justify-between w-full px-3 py-2 rounded-lg transition-colors",
          isActiveParent
            ? "bg-gray-800 text-white"
            : "text-gray-400 hover:bg-gray-800 hover:text-white"
        )}
      >
        <div className="flex items-center gap-3">
          {Icon && <Icon className="h-5 w-5" />}
          <span className="text-sm font-medium">{item.label}</span>
        </div>
        <ChevronDown
          className={cn(
            "h-4 w-4 transition-transform",
            isOpen && "transform rotate-180"
          )}
        />
      </button>

      {isOpen && item.children && (
        <ul className="mt-1 ml-4 space-y-1 border-l border-gray-700 pl-4">
          {item.children.map((child) => {
            const ChildIcon = (LucideIcons as any)[child.icon];
            const isActive = pathname === `/admin/${cityId}${child.href}`;

            return (
              <li key={child.href}>
                <Link
                  href={`/admin/${cityId}${child.href}`}
                  onClick={onNavigate}
                  className={cn(
                    "flex items-center gap-3 px-3 py-2 rounded-lg transition-colors text-sm",
                    isActive
                      ? "bg-gray-800 text-white"
                      : "text-gray-400 hover:bg-gray-800 hover:text-white"
                  )}
                >
                  {ChildIcon && <ChildIcon className="h-4 w-4" />}
                  <span>{child.label}</span>
                </Link>
              </li>
            );
          })}
        </ul>
      )}
    </li>
  );
}


----- components\layout\Sidebar.tsx -----

// src/components/layout/Sidebar.tsx

/**
 * SOLID - Single Responsibility Principle (SRP)
 * Sidebar layout and orchestration ONLY
 */

"use client";

import { useMemo } from "react";
import { usePathname, useParams } from "next/navigation";
import { X } from "lucide-react";
import { usePermissions } from "@/hooks/usePermissions";
import {
  navigationItems,
  filterNavigationByPermissions,
} from "@/constants/navigation";
import { Button } from "@/components/ui/button";
import { NavItem } from "./NavItem";
import { NavItemWithChildren } from "./NavItemWithChildren";

interface SidebarProps {
  isOpen: boolean;
  onClose: () => void;
}

export function Sidebar({ isOpen, onClose }: SidebarProps) {
  const pathname = usePathname();
  const params = useParams();
  const cityId = params.cityId as string;
  const { permissions } = usePermissions();

  const filteredNavigation = useMemo(
    () => filterNavigationByPermissions(navigationItems, permissions),
    [permissions]
  );

  return (
    <>
      {/* Mobile overlay */}
      {isOpen && (
        <div
          className="fixed inset-0 bg-black/50 z-40 lg:hidden"
          onClick={onClose}
        />
      )}

      {/* Sidebar */}
      <aside
        className={`fixed top-0 left-0 z-50 h-screen w-64 bg-gray-900 text-white
          transform transition-transform duration-300 ease-in-out
          lg:translate-x-0 
          ${isOpen ? "translate-x-0" : "-translate-x-full"}`}
      >
        {/* Header */}
        <div className="flex items-center justify-between h-16 px-6 border-b border-gray-800">
          <h1 className="text-xl font-bold">Admin Portal</h1>
          <Button
            variant="ghost"
            size="icon"
            onClick={onClose}
            className="lg:hidden"
          >
            <X className="h-5 w-5" />
          </Button>
        </div>

        {/* Navigation */}
        <nav className="overflow-y-auto py-4 px-3 h-[calc(100vh-4rem)]">
          <ul className="space-y-1">
            {filteredNavigation.map((item) =>
              item.children ? (
                <NavItemWithChildren
                  key={item.href}
                  item={item}
                  pathname={pathname}
                  cityId={cityId}
                  onNavigate={onClose}
                />
              ) : (
                <li key={item.href}>
                  <NavItem
                    label={item.label}
                    href={`/admin/${cityId}${item.href}`}
                    icon={item.icon}
                    isActive={pathname === `/admin/${cityId}${item.href}`}
                    onClick={onClose}
                  />
                </li>
              )
            )}
          </ul>
        </nav>
      </aside>
    </>
  );
}


----- components\layout\UserMenu.tsx -----

// src/components/layout/UserMenu.tsx

/**
 * SOLID - Single Responsibility Principle (SRP)
 * User profile dropdown ONLY
 */

"use client";

import { useState } from "react";
import { useRouter } from "next/navigation";
import { signOut } from "next-auth/react";
import { ChevronDown, User, LogOut } from "lucide-react";
import { useAuth } from "@/hooks/useAuth";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import { Button } from "@/components/ui/button";

export function UserMenu() {
  const router = useRouter();
  const { user } = useAuth();

  if (!user) return null;

  const handleSignOut = async () => {
    await signOut({ callbackUrl: "/login" });
  };

  return (
    <DropdownMenu>
      <DropdownMenuTrigger asChild>
        <Button variant="ghost" className="flex items-center gap-2">
          <div className="w-8 h-8 rounded-full bg-blue-600 flex items-center justify-center text-white font-medium">
            {user.name.charAt(0).toUpperCase()}
          </div>
          <div className="hidden sm:block text-left">
            <p className="text-sm font-medium">{user.name}</p>
            <p className="text-xs text-gray-500">{user.role}</p>
          </div>
          <ChevronDown className="w-4 h-4 text-gray-400" />
        </Button>
      </DropdownMenuTrigger>

      <DropdownMenuContent align="end" className="w-56">
        <DropdownMenuLabel>
          <div>
            <p className="font-medium">{user.name}</p>
            <p className="text-xs text-gray-500 font-normal">{user.email}</p>
          </div>
        </DropdownMenuLabel>

        <DropdownMenuSeparator />

        <DropdownMenuItem
          onClick={() => router.push("/admin/settings/profile")}
        >
          <User className="w-4 h-4 mr-2" />
          Profile Settings
        </DropdownMenuItem>

        <DropdownMenuSeparator />

        <DropdownMenuItem onClick={handleSignOut} className="text-red-600">
          <LogOut className="w-4 h-4 mr-2" />
          Sign Out
        </DropdownMenuItem>
      </DropdownMenuContent>
    </DropdownMenu>
  );
}


----- components\providers\SessionProvider.tsx -----

// src/components/providers/SessionProvider.tsx

/**
 * SOLID - Single Responsibility Principle (SRP)
 * Wraps NextAuth SessionProvider ONLY
 */

/**
 * Design Pattern - Provider Pattern
 * Makes auth session available to all client components
 */

"use client";

import { SessionProvider as NextAuthSessionProvider } from "next-auth/react";

interface SessionProviderProps {
  children: React.ReactNode;
}

export function SessionProvider({ children }: SessionProviderProps) {
  return <NextAuthSessionProvider>{children}</NextAuthSessionProvider>;
}


----- components\ui\alert-dialog.tsx -----

"use client"

import * as React from "react"
import * as AlertDialogPrimitive from "@radix-ui/react-alert-dialog"

import { cn } from "@/lib/utils"
import { buttonVariants } from "@/components/ui/button"

const AlertDialog = AlertDialogPrimitive.Root

const AlertDialogTrigger = AlertDialogPrimitive.Trigger

const AlertDialogPortal = AlertDialogPrimitive.Portal

const AlertDialogOverlay = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
))
AlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName

const AlertDialogContent = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>
>(({ className, ...props }, ref) => (
  <AlertDialogPortal>
    <AlertDialogOverlay />
    <AlertDialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    />
  </AlertDialogPortal>
))
AlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName

const AlertDialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
AlertDialogHeader.displayName = "AlertDialogHeader"

const AlertDialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
AlertDialogFooter.displayName = "AlertDialogFooter"

const AlertDialogTitle = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold", className)}
    {...props}
  />
))
AlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName

const AlertDialogDescription = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
AlertDialogDescription.displayName =
  AlertDialogPrimitive.Description.displayName

const AlertDialogAction = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Action>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Action
    ref={ref}
    className={cn(buttonVariants(), className)}
    {...props}
  />
))
AlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName

const AlertDialogCancel = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Cancel
    ref={ref}
    className={cn(
      buttonVariants({ variant: "outline" }),
      "mt-2 sm:mt-0",
      className
    )}
    {...props}
  />
))
AlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName

export {
  AlertDialog,
  AlertDialogPortal,
  AlertDialogOverlay,
  AlertDialogTrigger,
  AlertDialogContent,
  AlertDialogHeader,
  AlertDialogFooter,
  AlertDialogTitle,
  AlertDialogDescription,
  AlertDialogAction,
  AlertDialogCancel,
}


----- components\ui\alert.tsx -----

import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const alertVariants = cva(
  "relative w-full rounded-lg border px-4 py-3 text-sm [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground [&>svg~*]:pl-7",
  {
    variants: {
      variant: {
        default: "bg-background text-foreground",
        destructive:
          "border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Alert = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>
>(({ className, variant, ...props }, ref) => (
  <div
    ref={ref}
    role="alert"
    className={cn(alertVariants({ variant }), className)}
    {...props}
  />
))
Alert.displayName = "Alert"

const AlertTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h5
    ref={ref}
    className={cn("mb-1 font-medium leading-none tracking-tight", className)}
    {...props}
  />
))
AlertTitle.displayName = "AlertTitle"

const AlertDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm [&_p]:leading-relaxed", className)}
    {...props}
  />
))
AlertDescription.displayName = "AlertDescription"

export { Alert, AlertTitle, AlertDescription }


----- components\ui\badge.tsx -----

import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const badgeVariants = cva(
  "inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2",
  {
    variants: {
      variant: {
        default:
          "border-transparent bg-primary text-primary-foreground shadow hover:bg-primary/80",
        secondary:
          "border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80",
        destructive:
          "border-transparent bg-destructive text-destructive-foreground shadow hover:bg-destructive/80",
        outline: "text-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

export interface BadgeProps
  extends React.HTMLAttributes<HTMLDivElement>,
    VariantProps<typeof badgeVariants> {}

function Badge({ className, variant, ...props }: BadgeProps) {
  return (
    <div className={cn(badgeVariants({ variant }), className)} {...props} />
  )
}

export { Badge, badgeVariants }


----- components\ui\button.tsx -----

import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
  {
    variants: {
      variant: {
        default:
          "bg-primary text-primary-foreground shadow hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground shadow-sm hover:bg-destructive/90",
        outline:
          "border border-input bg-background shadow-sm hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground shadow-sm hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-9 px-4 py-2",
        sm: "h-8 rounded-md px-3 text-xs",
        lg: "h-10 rounded-md px-8",
        icon: "h-9 w-9",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button"
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    )
  }
)
Button.displayName = "Button"

export { Button, buttonVariants }


----- components\ui\card.tsx -----

import * as React from "react"

import { cn } from "@/lib/utils"

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "rounded-xl border bg-card text-card-foreground shadow",
      className
    )}
    {...props}
  />
))
Card.displayName = "Card"

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
))
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("font-semibold leading-none tracking-tight", className)}
    {...props}
  />
))
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
))
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
))
CardFooter.displayName = "CardFooter"

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }


----- components\ui\checkbox.tsx -----

"use client"

import * as React from "react"
import * as CheckboxPrimitive from "@radix-ui/react-checkbox"
import { Check } from "lucide-react"

import { cn } from "@/lib/utils"

const Checkbox = React.forwardRef<
  React.ElementRef<typeof CheckboxPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>
>(({ className, ...props }, ref) => (
  <CheckboxPrimitive.Root
    ref={ref}
    className={cn(
      "peer h-4 w-4 shrink-0 rounded-sm border border-primary shadow focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground",
      className
    )}
    {...props}
  >
    <CheckboxPrimitive.Indicator
      className={cn("flex items-center justify-center text-current")}
    >
      <Check className="h-4 w-4" />
    </CheckboxPrimitive.Indicator>
  </CheckboxPrimitive.Root>
))
Checkbox.displayName = CheckboxPrimitive.Root.displayName

export { Checkbox }


----- components\ui\command.tsx -----

"use client"

import * as React from "react"
import { type DialogProps } from "@radix-ui/react-dialog"
import { Command as CommandPrimitive } from "cmdk"
import { Search } from "lucide-react"

import { cn } from "@/lib/utils"
import { Dialog, DialogContent } from "@/components/ui/dialog"

const Command = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive>
>(({ className, ...props }, ref) => (
  <CommandPrimitive
    ref={ref}
    className={cn(
      "flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground",
      className
    )}
    {...props}
  />
))
Command.displayName = CommandPrimitive.displayName

const CommandDialog = ({ children, ...props }: DialogProps) => {
  return (
    <Dialog {...props}>
      <DialogContent className="overflow-hidden p-0">
        <Command className="[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5">
          {children}
        </Command>
      </DialogContent>
    </Dialog>
  )
}

const CommandInput = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Input>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>
>(({ className, ...props }, ref) => (
  <div className="flex items-center border-b px-3" cmdk-input-wrapper="">
    <Search className="mr-2 h-4 w-4 shrink-0 opacity-50" />
    <CommandPrimitive.Input
      ref={ref}
      className={cn(
        "flex h-10 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    />
  </div>
))

CommandInput.displayName = CommandPrimitive.Input.displayName

const CommandList = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.List
    ref={ref}
    className={cn("max-h-[300px] overflow-y-auto overflow-x-hidden", className)}
    {...props}
  />
))

CommandList.displayName = CommandPrimitive.List.displayName

const CommandEmpty = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Empty>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>
>((props, ref) => (
  <CommandPrimitive.Empty
    ref={ref}
    className="py-6 text-center text-sm"
    {...props}
  />
))

CommandEmpty.displayName = CommandPrimitive.Empty.displayName

const CommandGroup = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Group>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Group
    ref={ref}
    className={cn(
      "overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground",
      className
    )}
    {...props}
  />
))

CommandGroup.displayName = CommandPrimitive.Group.displayName

const CommandSeparator = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 h-px bg-border", className)}
    {...props}
  />
))
CommandSeparator.displayName = CommandPrimitive.Separator.displayName

const CommandItem = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected=true]:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
      className
    )}
    {...props}
  />
))

CommandItem.displayName = CommandPrimitive.Item.displayName

const CommandShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      )}
      {...props}
    />
  )
}
CommandShortcut.displayName = "CommandShortcut"

export {
  Command,
  CommandDialog,
  CommandInput,
  CommandList,
  CommandEmpty,
  CommandGroup,
  CommandItem,
  CommandShortcut,
  CommandSeparator,
}


----- components\ui\dialog.tsx -----

"use client"

import * as React from "react"
import * as DialogPrimitive from "@radix-ui/react-dialog"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const Dialog = DialogPrimitive.Root

const DialogTrigger = DialogPrimitive.Trigger

const DialogPortal = DialogPrimitive.Portal

const DialogClose = DialogPrimitive.Close

const DialogOverlay = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Overlay
    ref={ref}
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
  />
))
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName

const DialogContent = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DialogPortal>
    <DialogOverlay />
    <DialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    >
      {children}
      <DialogPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </DialogPrimitive.Close>
    </DialogPrimitive.Content>
  </DialogPortal>
))
DialogContent.displayName = DialogPrimitive.Content.displayName

const DialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-1.5 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
DialogHeader.displayName = "DialogHeader"

const DialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
DialogFooter.displayName = "DialogFooter"

const DialogTitle = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
DialogTitle.displayName = DialogPrimitive.Title.displayName

const DialogDescription = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
DialogDescription.displayName = DialogPrimitive.Description.displayName

export {
  Dialog,
  DialogPortal,
  DialogOverlay,
  DialogTrigger,
  DialogClose,
  DialogContent,
  DialogHeader,
  DialogFooter,
  DialogTitle,
  DialogDescription,
}


----- components\ui\dropdown-menu.tsx -----

"use client"

import * as React from "react"
import * as DropdownMenuPrimitive from "@radix-ui/react-dropdown-menu"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const DropdownMenu = DropdownMenuPrimitive.Root

const DropdownMenuTrigger = DropdownMenuPrimitive.Trigger

const DropdownMenuGroup = DropdownMenuPrimitive.Group

const DropdownMenuPortal = DropdownMenuPrimitive.Portal

const DropdownMenuSub = DropdownMenuPrimitive.Sub

const DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup

const DropdownMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <DropdownMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto" />
  </DropdownMenuPrimitive.SubTrigger>
))
DropdownMenuSubTrigger.displayName =
  DropdownMenuPrimitive.SubTrigger.displayName

const DropdownMenuSubContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]",
      className
    )}
    {...props}
  />
))
DropdownMenuSubContent.displayName =
  DropdownMenuPrimitive.SubContent.displayName

const DropdownMenuContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <DropdownMenuPrimitive.Portal>
    <DropdownMenuPrimitive.Content
      ref={ref}
      sideOffset={sideOffset}
      className={cn(
        "z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md",
        "data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]",
        className
      )}
      {...props}
    />
  </DropdownMenuPrimitive.Portal>
))
DropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName

const DropdownMenuItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&>svg]:size-4 [&>svg]:shrink-0",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName

const DropdownMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <DropdownMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.CheckboxItem>
))
DropdownMenuCheckboxItem.displayName =
  DropdownMenuPrimitive.CheckboxItem.displayName

const DropdownMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <DropdownMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.RadioItem>
))
DropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName

const DropdownMenuLabel = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName

const DropdownMenuSeparator = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
DropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName

const DropdownMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn("ml-auto text-xs tracking-widest opacity-60", className)}
      {...props}
    />
  )
}
DropdownMenuShortcut.displayName = "DropdownMenuShortcut"

export {
  DropdownMenu,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuCheckboxItem,
  DropdownMenuRadioItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuGroup,
  DropdownMenuPortal,
  DropdownMenuSub,
  DropdownMenuSubContent,
  DropdownMenuSubTrigger,
  DropdownMenuRadioGroup,
}


----- components\ui\form.tsx -----

"use client"

import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { Slot } from "@radix-ui/react-slot"
import {
  Controller,
  FormProvider,
  useFormContext,
  type ControllerProps,
  type FieldPath,
  type FieldValues,
} from "react-hook-form"

import { cn } from "@/lib/utils"
import { Label } from "@/components/ui/label"

const Form = FormProvider

type FormFieldContextValue<
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
> = {
  name: TName
}

const FormFieldContext = React.createContext<FormFieldContextValue>(
  {} as FormFieldContextValue
)

const FormField = <
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
>({
  ...props
}: ControllerProps<TFieldValues, TName>) => {
  return (
    <FormFieldContext.Provider value={{ name: props.name }}>
      <Controller {...props} />
    </FormFieldContext.Provider>
  )
}

const useFormField = () => {
  const fieldContext = React.useContext(FormFieldContext)
  const itemContext = React.useContext(FormItemContext)
  const { getFieldState, formState } = useFormContext()

  const fieldState = getFieldState(fieldContext.name, formState)

  if (!fieldContext) {
    throw new Error("useFormField should be used within <FormField>")
  }

  const { id } = itemContext

  return {
    id,
    name: fieldContext.name,
    formItemId: `${id}-form-item`,
    formDescriptionId: `${id}-form-item-description`,
    formMessageId: `${id}-form-item-message`,
    ...fieldState,
  }
}

type FormItemContextValue = {
  id: string
}

const FormItemContext = React.createContext<FormItemContextValue>(
  {} as FormItemContextValue
)

const FormItem = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const id = React.useId()

  return (
    <FormItemContext.Provider value={{ id }}>
      <div ref={ref} className={cn("space-y-2", className)} {...props} />
    </FormItemContext.Provider>
  )
})
FormItem.displayName = "FormItem"

const FormLabel = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>
>(({ className, ...props }, ref) => {
  const { error, formItemId } = useFormField()

  return (
    <Label
      ref={ref}
      className={cn(error && "text-destructive", className)}
      htmlFor={formItemId}
      {...props}
    />
  )
})
FormLabel.displayName = "FormLabel"

const FormControl = React.forwardRef<
  React.ElementRef<typeof Slot>,
  React.ComponentPropsWithoutRef<typeof Slot>
>(({ ...props }, ref) => {
  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()

  return (
    <Slot
      ref={ref}
      id={formItemId}
      aria-describedby={
        !error
          ? `${formDescriptionId}`
          : `${formDescriptionId} ${formMessageId}`
      }
      aria-invalid={!!error}
      {...props}
    />
  )
})
FormControl.displayName = "FormControl"

const FormDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => {
  const { formDescriptionId } = useFormField()

  return (
    <p
      ref={ref}
      id={formDescriptionId}
      className={cn("text-[0.8rem] text-muted-foreground", className)}
      {...props}
    />
  )
})
FormDescription.displayName = "FormDescription"

const FormMessage = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, children, ...props }, ref) => {
  const { error, formMessageId } = useFormField()
  const body = error ? String(error?.message ?? "") : children

  if (!body) {
    return null
  }

  return (
    <p
      ref={ref}
      id={formMessageId}
      className={cn("text-[0.8rem] font-medium text-destructive", className)}
      {...props}
    >
      {body}
    </p>
  )
})
FormMessage.displayName = "FormMessage"

export {
  useFormField,
  Form,
  FormItem,
  FormLabel,
  FormControl,
  FormDescription,
  FormMessage,
  FormField,
}


----- components\ui\input.tsx -----

import * as React from "react"

import { cn } from "@/lib/utils"

const Input = React.forwardRef<HTMLInputElement, React.ComponentProps<"input">>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          "flex h-9 w-full rounded-md border border-input bg-transparent px-3 py-1 text-base shadow-sm transition-colors file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Input.displayName = "Input"

export { Input }
