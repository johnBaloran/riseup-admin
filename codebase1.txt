

----- app\admin\dashboard\page.tsx -----

// src/app/admin/dashboard/page.tsx

/**
 * SOLID - Single Responsibility Principle (SRP)
 * Dashboard page orchestration ONLY
 */

import { getServerSession } from "next-auth";
import { redirect } from "next/navigation";
import { authOptions } from "@/lib/auth/auth.config";
import {
  getDashboardStats,
  getUpcomingGames,
} from "@/lib/db/queries/dashboard";
import { DashboardStats } from "@/components/features/dashboard/DashboardStats";
import { UpcomingGames } from "@/components/features/dashboard/UpcomingGames";

export default async function DashboardPage() {
  const session = await getServerSession(authOptions);

  if (!session) {
    redirect("/login");
  }

  // Get accessible location IDs
  const locationIds = session.user.allLocations
    ? []
    : session.user.assignedLocations;

  // Fetch data in parallel
  const [stats, upcomingGames] = await Promise.all([
    getDashboardStats(locationIds),
    getUpcomingGames(locationIds),
  ]);

  return (
    <div className="p-6 space-y-8">
      <div>
        <h1 className="text-3xl font-bold tracking-tight">Dashboard</h1>
        <p className="text-gray-600 mt-1">Overview of your basketball league</p>
      </div>

      <DashboardStats stats={stats} />

      <div className="grid gap-6 md:grid-cols-2">
        <UpcomingGames games={upcomingGames} />
      </div>
    </div>
  );
}


----- app\admin\jerseys\page.tsx -----

// src/app/(admin)/jerseys/page.tsx

/**
 * SOLID - Single Responsibility Principle (SRP)
 * Jersey management dashboard page ONLY
 */

/**
 * Security - Server-side permission check
 */

import { redirect } from "next/navigation";
import { getServerSession } from "next-auth";
import { authOptions } from "@/lib/auth/auth.config";
import { hasPermission } from "@/lib/auth/permissions";
import JerseyDashboard from "@/components/jerseys/JerseyDashboard";

export const metadata = {
  title: "Jersey Management | Admin",
  description: "Manage team jerseys and player details",
};

export default async function JerseyManagementPage() {
  const session = await getServerSession(authOptions);

  if (!session?.user) {
    redirect("/login");
  }

  // Check permission
  if (!hasPermission(session, "view_jerseys")) {
    redirect("/unauthorized");
  }

  return <JerseyDashboard />;
}


----- app\admin\jerseys\[teamId]\page.tsx -----

// src/app/(admin)/jerseys/[teamId]/page.tsx

/**
 * SOLID - Single Responsibility Principle (SRP)
 * Team jersey detail page ONLY
 */

/**
 * Security - Server-side permission check
 */

import { redirect } from "next/navigation";
import { getServerSession } from "next-auth";
import { authOptions } from "@/lib/auth/auth.config";
import { hasPermission } from "@/lib/auth/permissions";
import TeamJerseyDetail from "@/components/jerseys/TeamJerseyDetail";

export const metadata = {
  title: "Team Jersey Details | Admin",
  description: "Manage team jersey design and player details",
};

interface TeamDetailPageProps {
  params: {
    teamId: string;
  };
}

export default async function TeamDetailPage({ params }: TeamDetailPageProps) {
  const session = await getServerSession(authOptions);

  if (!session?.user) {
    redirect("/login");
  }

  // Check permission
  if (!hasPermission(session, "view_jerseys")) {
    redirect("/unauthorized");
  }

  return <TeamJerseyDetail teamId={params.teamId} />;
}


----- app\admin\layout.tsx -----

// src/app/(admin)/[cityId]/layout.tsx

/**
 * SOLID - Single Responsibility Principle (SRP)
 * Admin section auth check and layout wrapper ONLY
 */

import { redirect } from "next/navigation";
import { getServerSession } from "next-auth";
import { authOptions } from "@/lib/auth/auth.config";
import { AdminLayout } from "@/components/layout/AdminLayout";

interface AdminLayoutWrapperProps {
  children: React.ReactNode;
  params: { cityId: string };
}

export default async function AdminLayoutWrapper({
  children,
  params,
}: AdminLayoutWrapperProps) {
  // Server-side auth check
  const session = await getServerSession(authOptions);

  if (!session) {
    redirect("/login");
  }

  return <AdminLayout cityId={params.cityId}>{children}</AdminLayout>;
}


----- app\admin\league\cities\new\page.tsx -----

// src/app/admin/league/cities/new/page.tsx

/**
 * SOLID - Single Responsibility Principle (SRP)
 * Create city page orchestration ONLY
 */

import { getServerSession } from "next-auth";
import { redirect } from "next/navigation";
import { authOptions } from "@/lib/auth/auth.config";
import { hasPermission } from "@/lib/auth/permissions";
import { CreateCityForm } from "@/components/features/league/cities/CreateCityForm";
import { ArrowLeft } from "lucide-react";
import Link from "next/link";
import { Button } from "@/components/ui/button";

export default async function CreateCityPage() {
  const session = await getServerSession(authOptions);

  if (!session) {
    redirect("/login");
  }

  if (!hasPermission(session, "manage_cities")) {
    redirect("/unauthorized");
  }

  return (
    <div className="p-6 space-y-6">
      <div className="flex items-center gap-4">
        <Button variant="ghost" size="sm" asChild>
          <Link href="/admin/league/cities">
            <ArrowLeft className="h-4 w-4 mr-2" />
            Back
          </Link>
        </Button>
      </div>

      <div>
        <h1 className="text-3xl font-bold tracking-tight">Add City</h1>
        <p className="text-gray-600 mt-1">
          Create a new city for league operations
        </p>
      </div>

      <div className="max-w-2xl">
        <CreateCityForm />
      </div>
    </div>
  );
}


----- app\admin\league\cities\page.tsx -----

// src/app/admin/league/cities/page.tsx

/**
 * SOLID - Single Responsibility Principle (SRP)
 * Cities list page orchestration ONLY
 */

import { getServerSession } from "next-auth";
import { redirect } from "next/navigation";
import { authOptions } from "@/lib/auth/auth.config";
import { hasPermission } from "@/lib/auth/permissions";
import { getAllCities } from "@/lib/db/queries/cities";
import { CitiesTable } from "@/components/features/league/cities/CitiesTable";
import { Button } from "@/components/ui/button";
import Link from "next/link";
import { Plus } from "lucide-react";

export default async function CitiesPage() {
  const session = await getServerSession(authOptions);

  if (!session) {
    redirect("/login");
  }

  if (!hasPermission(session, "manage_cities")) {
    redirect("/unauthorized");
  }

  const cities = await getAllCities();

  return (
    <div className="p-6 space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold tracking-tight">Cities</h1>
          <p className="text-gray-600 mt-1">
            Manage cities and geographic locations
          </p>
        </div>
        <Button asChild>
          <Link href="/admin/league/cities/new">
            <Plus className="mr-2 h-4 w-4" />
            Add City
          </Link>
        </Button>
      </div>

      <CitiesTable cities={cities} />
    </div>
  );
}


----- app\admin\league\divisions\new\page.tsx -----

// src/app/admin/league/divisions/new/page.tsx

/**
 * SOLID - Single Responsibility Principle (SRP)
 * Create division page orchestration ONLY
 */

import { getServerSession } from "next-auth";
import { redirect } from "next/navigation";
import { authOptions } from "@/lib/auth/auth.config";
import { hasPermission } from "@/lib/auth/permissions";
import { getActiveCities } from "@/lib/db/queries/cities";
import { getAllLevels } from "@/lib/db/queries/levels";
import { getAllPrices } from "@/lib/db/queries/prices";
import { CreateDivisionForm } from "@/components/features/league/divisions/CreateDivisionForm";
import { ArrowLeft } from "lucide-react";
import Link from "next/link";
import { Button } from "@/components/ui/button";

export default async function CreateDivisionPage() {
  const session = await getServerSession(authOptions);

  if (!session) {
    redirect("/login");
  }

  if (!hasPermission(session, "manage_divisions")) {
    redirect("/unauthorized");
  }

  const [cities, levels, prices] = await Promise.all([
    getActiveCities(),
    getAllLevels(null, true), // true = activeOnly for division forms
    getAllPrices(),
  ]);

  return (
    <div className="p-6 space-y-6">
      <div className="flex items-center gap-4">
        <Button variant="ghost" size="sm" asChild>
          <Link href="/admin/league/divisions">
            <ArrowLeft className="h-4 w-4 mr-2" />
            Back
          </Link>
        </Button>
      </div>

      <div>
        <h1 className="text-3xl font-bold tracking-tight">Create Division</h1>
        <p className="text-gray-600 mt-1">
          Set up a new division with schedule, pricing, and registration
          settings
        </p>
      </div>

      <div className="max-w-4xl">
        <CreateDivisionForm
          cities={cities}
          levels={levels}
          prices={prices}
        />
      </div>
    </div>
  );
}


----- app\admin\league\divisions\page.tsx -----

// src/app/admin/league/divisions/page.tsx

/**
 * SOLID - Single Responsibility Principle (SRP)
 * Divisions list page orchestration ONLY
 */

import { getServerSession } from "next-auth";
import { redirect } from "next/navigation";
import { authOptions } from "@/lib/auth/auth.config";
import { hasPermission } from "@/lib/auth/permissions";
import { getDivisions } from "@/lib/db/queries/divisions";
import { getAllLocations } from "@/lib/db/queries/locations";
import { getAllLevels } from "@/lib/db/queries/levels";
import { DivisionsContent } from "@/components/features/league/divisions/DivisionsContent";
import { Button } from "@/components/ui/button";
import Link from "next/link";
import { Plus } from "lucide-react";

interface DivisionsPageProps {
  searchParams: {
    page?: string;
    tab?: string;
    location?: string;
    level?: string;
    day?: string;
    search?: string;
  };
}

export default async function DivisionsPage({
  searchParams,
}: DivisionsPageProps) {
  const session = await getServerSession(authOptions);

  if (!session) {
    redirect("/login");
  }

  if (!hasPermission(session, "view_divisions")) {
    redirect("/unauthorized");
  }

  const page = parseInt(searchParams.page || "1");
  const tab = (searchParams.tab || "all") as any;

  const [result, locations, levels] = await Promise.all([
    getDivisions({
      page,
      activeFilter: tab,
      locationId: searchParams.location,
      levelId: searchParams.level,
      day: searchParams.day,
      search: searchParams.search,
    }),
    getAllLocations(),
    getAllLevels(null, true), // true = activeOnly for division forms
  ]);

  return (
    <div className="p-6 space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold tracking-tight">Divisions</h1>
          <p className="text-gray-600 mt-1">
            Manage league divisions, schedules, and registration
          </p>
        </div>
        <Button asChild>
          <Link href="/admin/league/divisions/new">
            <Plus className="mr-2 h-4 w-4" />
            Create Division
          </Link>
        </Button>
      </div>

      <DivisionsContent
        divisions={result.divisions}
        pagination={result.pagination}
        locations={locations}
        levels={levels}
        currentTab={tab}
        currentFilters={{
          location: searchParams.location,
          level: searchParams.level,
          day: searchParams.day,
          search: searchParams.search,
        }}
      />
    </div>
  );
}


----- app\admin\league\divisions\[id]\edit\page.tsx -----

// src/app/admin/league/divisions/[id]/edit/page.tsx

/**
 * SOLID - Single Responsibility Principle (SRP)
 * Edit division page orchestration ONLY
 */

import { getServerSession } from "next-auth";
import { redirect } from "next/navigation";
import { authOptions } from "@/lib/auth/auth.config";
import { hasPermission } from "@/lib/auth/permissions";
import { getDivisionById } from "@/lib/db/queries/divisions";
import { getActiveCities } from "@/lib/db/queries/cities";
import { getAllLevels } from "@/lib/db/queries/levels";
import { EditDivisionForm } from "@/components/features/league/divisions/EditDivisionForm";
import { ArrowLeft } from "lucide-react";
import Link from "next/link";
import { Button } from "@/components/ui/button";

interface EditDivisionPageProps {
  params: { id: string };
}

export default async function EditDivisionPage({
  params,
}: EditDivisionPageProps) {
  const session = await getServerSession(authOptions);

  if (!session) {
    redirect("/login");
  }

  if (!hasPermission(session, "manage_divisions")) {
    redirect("/unauthorized");
  }

  const [division, cities, levels] = await Promise.all([
    getDivisionById(params.id),
    getActiveCities(),
    getAllLevels(null, true), // true = activeOnly for division forms
  ]);

  if (!division) {
    redirect("/admin/league/divisions");
  }

  return (
    <div className="p-6 space-y-6">
      <div className="flex items-center gap-4">
        <Button variant="ghost" size="sm" asChild>
          <Link href="/admin/league/divisions">
            <ArrowLeft className="h-4 w-4 mr-2" />
            Back
          </Link>
        </Button>
      </div>

      <div>
        <h1 className="text-3xl font-bold tracking-tight">Edit Division</h1>
        <p className="text-gray-600 mt-1">
          Update division settings (pricing cannot be changed)
        </p>
      </div>

      <div className="max-w-4xl">
        <EditDivisionForm
          division={division}
          cities={cities}
          levels={levels}
        />
      </div>
    </div>
  );
}


----- app\admin\league\divisions\[id]\page.tsx -----

// src/app/admin/league/divisions/[id]/page.tsx

/**
 * SOLID - Single Responsibility Principle (SRP)
 * Division detail page orchestration ONLY
 */

import { getServerSession } from "next-auth";
import { redirect } from "next/navigation";
import { authOptions } from "@/lib/auth/auth.config";
import { hasPermission } from "@/lib/auth/permissions";
import {
  getDivisionById,
  getDivisionTeamCount,
} from "@/lib/db/queries/divisions";
import { getDivisionFreeAgents } from "@/lib/db/queries/players";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import Link from "next/link";
import {
  ArrowLeft,
  Pencil,
  MapPin,
  TrendingUp,
  Calendar,
  Clock,
  DollarSign,
  Users,
} from "lucide-react";
import { format, subDays } from "date-fns";
import { formatTimeRange } from "@/lib/utils/time";
import { DivisionFreeAgents } from "@/components/features/league/DivisionFreeAgents";

interface DivisionDetailPageProps {
  params: { id: string };
}

export default async function DivisionDetailPage({
  params,
}: DivisionDetailPageProps) {
  const session = await getServerSession(authOptions);

  if (!session) {
    redirect("/login");
  }

  if (!hasPermission(session, "view_divisions")) {
    redirect("/unauthorized");
  }

  const [division, teamCount, freeAgents] = await Promise.all([
    getDivisionById(params.id),
    getDivisionTeamCount(params.id),
    getDivisionFreeAgents(params.id),
  ]);

  if (!division) {
    redirect("/admin/league/divisions");
  }

  const getStatusBadge = () => {
    if (!division.active && !division.register) {
      return (
        <Badge
          variant="outline"
          className="bg-gray-100 text-gray-800 border-gray-200"
        >
          Finished
        </Badge>
      );
    }
    if (!division.active && division.register) {
      return (
        <Badge
          variant="outline"
          className="bg-yellow-100 text-yellow-800 border-yellow-200"
        >
          Registration
        </Badge>
      );
    }
    if (division.active && !division.register) {
      return (
        <Badge
          variant="outline"
          className="bg-green-100 text-green-800 border-green-200"
        >
          Active - Closed
        </Badge>
      );
    }
    if (division.active && division.register) {
      return (
        <Badge
          variant="outline"
          className="bg-blue-100 text-blue-800 border-blue-200"
        >
          Active - Open
        </Badge>
      );
    }
  };

  const earlyBirdEndDate = division.startDate
    ? subDays(new Date(division.startDate), 42)
    : null;
  const isEarlyBirdActive = earlyBirdEndDate
    ? new Date() < earlyBirdEndDate
    : false;

  return (
    <div className="p-6 space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div className="flex items-center gap-4">
          <Button variant="ghost" size="sm" asChild>
            <Link href="/admin/league/divisions">
              <ArrowLeft className="h-4 w-4 mr-2" />
              Back
            </Link>
          </Button>
        </div>
        <Button asChild>
          <Link href={`/admin/league/divisions/${params.id}/edit`}>
            <Pencil className="mr-2 h-4 w-4" />
            Edit Division
          </Link>
        </Button>
      </div>

      {/* Title & Status */}
      <div>
        <div className="flex items-center gap-3 mb-2">
          <h1 className="text-3xl font-bold tracking-tight">
            {division.divisionName}
          </h1>
          {getStatusBadge()}
        </div>
        <p className="text-gray-600">{division.description}</p>
      </div>

      <div className="grid gap-6 md:grid-cols-2">
        {/* Basic Information */}
        <Card>
          <CardHeader>
            <CardTitle>Division Details</CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="flex items-center gap-3">
              <MapPin className="h-5 w-5 text-gray-400" />
              <div>
                <p className="text-sm text-gray-500">Location</p>
                <p className="font-medium">
                  {division.location?.name || "N/A"}
                </p>
              </div>
            </div>

            <div className="flex items-center gap-3">
              <TrendingUp className="h-5 w-5 text-gray-400" />
              <div>
                <p className="text-sm text-gray-500">Skill Level</p>
                <p className="font-medium">
                  Grade {division.level?.grade} - {division.level?.name}
                </p>
              </div>
            </div>

            <div className="flex items-center gap-3">
              <Calendar className="h-5 w-5 text-gray-400" />
              <div>
                <p className="text-sm text-gray-500">Schedule</p>
                <p className="font-medium">
                  {division.day}{" "}
                  {formatTimeRange(division.startTime, division.endTime)}
                </p>{" "}
              </div>
            </div>

            {division.startTime && division.endTime && (
              <div className="flex items-center gap-3">
                <Clock className="h-5 w-5 text-gray-400" />
                <div>
                  <p className="text-sm text-gray-500">Time</p>
                  <p className="font-medium">
                    {division.startTime} - {division.endTime}
                  </p>
                </div>
              </div>
            )}

            {division.startDate && (
              <div className="flex items-center gap-3">
                <Calendar className="h-5 w-5 text-gray-400" />
                <div>
                  <p className="text-sm text-gray-500">Start Date</p>
                  <p className="font-medium">
                    {format(new Date(division.startDate), "MMMM dd, yyyy")}
                  </p>
                </div>
              </div>
            )}

            <div className="flex items-center gap-3">
              <Users className="h-5 w-5 text-gray-400" />
              <div>
                <p className="text-sm text-gray-500">Teams</p>
                <p className="font-medium">
                  {teamCount} team{teamCount !== 1 ? "s" : ""}
                </p>
              </div>
            </div>
          </CardContent>
        </Card>

        {/* Pricing */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <DollarSign className="h-5 w-5" />
              Pricing
            </CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            {earlyBirdEndDate && (
              <div
                className={`p-3 rounded-lg border ${
                  isEarlyBirdActive
                    ? "bg-green-50 border-green-200"
                    : "bg-gray-50 border-gray-200"
                }`}
              >
                <p className="text-sm font-medium">
                  {isEarlyBirdActive
                    ? "✓ Early Bird Active"
                    : "Early Bird Ended"}
                </p>
                <p className="text-xs text-gray-600 mt-1">
                  {isEarlyBirdActive
                    ? `Ends ${format(earlyBirdEndDate, "MMM dd, yyyy")}`
                    : `Ended ${format(earlyBirdEndDate, "MMM dd, yyyy")}`}
                </p>
              </div>
            )}

            <div className="space-y-3">
              <div className="border-b pb-2">
                <p className="text-sm font-medium mb-2">Single Payment</p>
                <div className="grid grid-cols-2 gap-2 text-sm">
                  <div>
                    <span className="text-gray-500">Early Bird:</span>
                    <p className="font-medium">
                      $
                      {division.prices?.earlyBird?.amount?.toFixed(2) || "0.00"}
                    </p>
                  </div>
                  <div>
                    <span className="text-gray-500">Regular:</span>
                    <p className="font-medium">
                      ${division.prices?.regular?.amount?.toFixed(2) || "0.00"}
                    </p>
                  </div>
                </div>
              </div>

              <div className="border-b pb-2">
                <p className="text-sm font-medium mb-2">Installment Payments</p>
                <div className="space-y-2 text-sm">
                  <div>
                    <span className="text-gray-500">Down Payment:</span>
                    <p className="font-medium">
                      $
                      {division.prices?.firstInstallment?.amount?.toFixed(2) ||
                        "0.00"}
                    </p>
                  </div>
                  <div className="grid grid-cols-2 gap-2">
                    <div>
                      <span className="text-gray-500">Weekly (EB):</span>
                      <p className="font-medium">
                        $
                        {division.prices?.installment?.amount?.toFixed(2) ||
                          "0.00"}
                        /wk
                      </p>
                    </div>
                    <div>
                      <span className="text-gray-500">Weekly (Reg):</span>
                      <p className="font-medium">
                        $
                        {division.prices?.regularInstallment?.amount?.toFixed(
                          2
                        ) || "0.00"}
                        /wk
                      </p>
                    </div>
                  </div>
                </div>
              </div>

              <div>
                <span className="text-sm text-gray-500">Free:</span>
                <p className="font-medium text-sm">
                  ${division.prices?.free?.amount?.toFixed(2) || "0.00"}
                </p>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Quick Actions */}
      <Card>
        <CardHeader>
          <CardTitle>Quick Actions</CardTitle>
        </CardHeader>
        <CardContent className="flex flex-wrap gap-3">
          <Button variant="outline" asChild>
            <Link href={`/admin/league/teams?division=${params.id}`}>
              <Users className="mr-2 h-4 w-4" />
              View Teams ({teamCount})
            </Link>
          </Button>
          <Button variant="outline" asChild>
            <Link href={`/admin/games?division=${params.id}`}>
              <Calendar className="mr-2 h-4 w-4" />
              View Schedule
            </Link>
          </Button>
        </CardContent>
      </Card>

      {/* Free Agents Section */}
      <DivisionFreeAgents players={JSON.parse(JSON.stringify(freeAgents))} />
    </div>
  );
}


----- app\admin\league\levels\new\page.tsx -----

// src/app/admin/[cityId]/league/levels/new/page.tsx

/**
 * SOLID - Single Responsibility Principle (SRP)
 * Create level page orchestration ONLY
 */

import { getServerSession } from "next-auth";
import { redirect } from "next/navigation";
import { authOptions } from "@/lib/auth/auth.config";
import { hasPermission } from "@/lib/auth/permissions";
import { CreateLevelForm } from "@/components/features/league/levels/CreateLevelForm";
import { ArrowLeft } from "lucide-react";
import Link from "next/link";
import { Button } from "@/components/ui/button";

export default async function CreateLevelPage() {
  const session = await getServerSession(authOptions);

  if (!session) {
    redirect("/login");
  }

  if (!hasPermission(session, "manage_levels")) {
    redirect("/unauthorized");
  }

  return (
    <div className="p-6 space-y-6">
      <div className="flex items-center gap-4">
        <Button variant="ghost" size="sm" asChild>
          <Link href={`/admin/league/levels`}>
            <ArrowLeft className="h-4 w-4 mr-2" />
            Back
          </Link>
        </Button>
      </div>

      <div>
        <h1 className="text-3xl font-bold tracking-tight">Add Skill Level</h1>
        <p className="text-gray-600 mt-1">
          Create a new skill level for division classification
        </p>
      </div>

      <div className="max-w-2xl">
        <CreateLevelForm />
      </div>
    </div>
  );
}


----- app\admin\league\levels\page.tsx -----

// src/app/admin/league/levels/page.tsx

/**
 * SOLID - Single Responsibility Principle (SRP)
 * Levels list page orchestration ONLY
 */

import { getServerSession } from "next-auth";
import { redirect } from "next/navigation";
import { authOptions } from "@/lib/auth/auth.config";
import { hasPermission } from "@/lib/auth/permissions";
import { LevelsContent } from "@/components/features/league/levels/LevelsContent";

interface LevelsPageProps {
  searchParams: { tab?: string };
}

export default async function LevelsPage({ searchParams }: LevelsPageProps) {
  const session = await getServerSession(authOptions);

  if (!session) {
    redirect("/login");
  }

  if (!hasPermission(session, "manage_levels")) {
    redirect("/unauthorized");
  }

  const activeFilter = searchParams.tab || "active";

  return (
    <div className="p-6 space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold tracking-tight">Skill Levels</h1>
          <p className="text-gray-600 mt-1">
            Manage skill levels for league divisions (Grade 1 = Highest)
          </p>
        </div>
      </div>

      <LevelsContent activeFilter={activeFilter} />
    </div>
  );
}


----- app\admin\league\locations\new\page.tsx -----

// src/app/admin/[cityId]/league/locations/new/page.tsx

/**
 * SOLID - Single Responsibility Principle (SRP)
 * Create location page orchestration ONLY
 */

import { getServerSession } from "next-auth";
import { redirect } from "next/navigation";
import { authOptions } from "@/lib/auth/auth.config";
import { hasPermission } from "@/lib/auth/permissions";
import { getActiveCities } from "@/lib/db/queries/cities";
import { CreateLocationForm } from "@/components/features/league/locations/CreateLocationForm";
import { ArrowLeft } from "lucide-react";
import Link from "next/link";
import { Button } from "@/components/ui/button";

interface CreateLocationPageProps {
  params: { cityId: string };
}

export default async function CreateLocationPage({
  params,
}: CreateLocationPageProps) {
  const session = await getServerSession(authOptions);

  if (!session) {
    redirect("/login");
  }

  if (!hasPermission(session, "manage_locations")) {
    redirect("/unauthorized");
  }

  const cities = await getActiveCities();

  return (
    <div className="p-6 space-y-6">
      <div className="flex items-center gap-4">
        <Button variant="ghost" size="sm" asChild>
          <Link href={`/admin/${params.cityId}/league/locations`}>
            <ArrowLeft className="h-4 w-4 mr-2" />
            Back
          </Link>
        </Button>
      </div>

      <div>
        <h1 className="text-3xl font-bold tracking-tight">Add Location</h1>
        <p className="text-gray-600 mt-1">
          Create a new venue location for league games
        </p>
      </div>

      <div className="max-w-2xl">
        <CreateLocationForm cities={cities} cityId={params.cityId} />
      </div>
    </div>
  );
}


----- app\admin\league\locations\page.tsx -----

// src/app/admin/[cityId]/league/locations/page.tsx

/**
 * SOLID - Single Responsibility Principle (SRP)
 * Locations list page orchestration ONLY
 */

import { getServerSession } from "next-auth";
import { redirect } from "next/navigation";
import { authOptions } from "@/lib/auth/auth.config";
import { hasPermission } from "@/lib/auth/permissions";
import { getAllLocations } from "@/lib/db/queries/locations";
import { getActiveCities } from "@/lib/db/queries/cities";
import { LocationsTable } from "@/components/features/league/locations/LocationsTable";
import { Button } from "@/components/ui/button";
import Link from "next/link";
import { Plus } from "lucide-react";

export default async function LocationsPage() {
  const session = await getServerSession(authOptions);

  if (!session) {
    redirect("/login");
  }

  if (!hasPermission(session, "manage_locations")) {
    redirect("/unauthorized");
  }

  const [locations, cities] = await Promise.all([
    getAllLocations(),
    getActiveCities(),
  ]);

  return (
    <div className="p-6 space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold tracking-tight">Locations</h1>
          <p className="text-gray-600 mt-1">
            Manage venue locations for league operations
          </p>
        </div>
        <Button asChild>
          <Link href={`/admin/league/locations/new`}>
            <Plus className="mr-2 h-4 w-4" />
            Add Location
          </Link>
        </Button>
      </div>

      <LocationsTable locations={locations} cities={cities} />
    </div>
  );
}


----- app\admin\league\players\new\page.tsx -----

// src/app/admin/league/players/new/page.tsx

/**
 * SOLID - Single Responsibility Principle (SRP)
 * Create player page orchestration ONLY
 */

import { getServerSession } from "next-auth";
import { redirect } from "next/navigation";
import { authOptions } from "@/lib/auth/auth.config";
import { hasPermission } from "@/lib/auth/permissions";
import { getActiveCities } from "@/lib/db/queries/cities";
import { ArrowLeft } from "lucide-react";
import Link from "next/link";
import { Button } from "@/components/ui/button";
import { CreatePlayerForm } from "@/components/features/league/players/CreatePlayerForm";

interface CreatePlayerPageProps {
  params: { cityId: string };
}

export default async function CreatePlayerPage({
  params,
}: CreatePlayerPageProps) {
  const session = await getServerSession(authOptions);

  if (!session) {
    redirect("/login");
  }

  if (!hasPermission(session, "manage_players")) {
    redirect("/unauthorized");
  }

  const cities = await getActiveCities();

  return (
    <div className="p-6 space-y-6">
      <div className="flex items-center gap-4">
        <Button variant="ghost" size="sm" asChild>
          <Link href={`/admin/${params.cityId}/league/players`}>
            <ArrowLeft className="h-4 w-4 mr-2" />
            Back
          </Link>
        </Button>
      </div>

      <div>
        <h1 className="text-3xl font-bold tracking-tight">Create Player</h1>
        <p className="text-gray-600 mt-1">
          Manually create a player profile. Payment and user account can be set
          up later.
        </p>
      </div>

      <div className="max-w-2xl">
        <CreatePlayerForm cityId={params.cityId} cities={cities} />
      </div>
    </div>
  );
}


----- app\admin\league\players\page.tsx -----

// src/app/admin/[cityId]/league/players/page.tsx

/**
 * SOLID - Single Responsibility Principle (SRP)
 * Players list page orchestration ONLY
 */

import { getServerSession } from "next-auth";
import { redirect } from "next/navigation";
import { authOptions } from "@/lib/auth/auth.config";
import { hasPermission } from "@/lib/auth/permissions";
import { getPlayers } from "@/lib/db/queries/players";
import { getDivisions } from "@/lib/db/queries/divisions";
import { PlayersContent } from "@/components/features/league/players/PlayersContent";
import { Button } from "@/components/ui/button";
import Link from "next/link";
import { Plus } from "lucide-react";
import { getAllLocations } from "@/lib/db/queries/locations";

interface PlayersPageProps {
  params: { cityId: string };
  searchParams: {
    page?: string;
    tab?: string;
    division?: string;
    location?: string;
    team?: string;
    freeAgents?: string;
    hasUser?: string;
    search?: string;
  };
}

export default async function PlayersPage({
  params,
  searchParams,
}: PlayersPageProps) {
  const session = await getServerSession(authOptions);

  if (!session) {
    redirect("/login");
  }

  if (!hasPermission(session, "view_players")) {
    redirect("/unauthorized");
  }

  const page = parseInt(searchParams.page || "1");
  const tab = (searchParams.tab || "active") as "active" | "inactive" | "all";
  const freeAgentsOnly = searchParams.freeAgents === "true";
  const hasUserAccount = searchParams.hasUser
    ? searchParams.hasUser === "true"
    : undefined;

  const [result, allPlayersResult, divisions, locations] = await Promise.all([
    getPlayers({
      page,
      divisionId: searchParams.division,
      teamId: searchParams.team,
      locationId: searchParams.location,
      freeAgentsOnly,
      hasUserAccount,
      search: searchParams.search,
      activeFilter: tab,
    }),
    getPlayers({ limit: 999999, activeFilter: "active" }), // Get all active players for stats
    getDivisions({
      activeFilter: "active",
    }),
    getAllLocations(),
  ]);

  return (
    <div className="p-6 space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold tracking-tight">Players</h1>
          <p className="text-gray-600 mt-1">
            Manage player profiles and registrations
          </p>
        </div>
        {hasPermission(session, "manage_players") && (
          <Button asChild>
            <Link href={`/admin/league/players/new`}>
              <Plus className="mr-2 h-4 w-4" />
              Create Player
            </Link>
          </Button>
        )}
      </div>

      <PlayersContent
        players={result.players as any}
        allPlayers={allPlayersResult.players as any}
        pagination={result.pagination}
        divisions={divisions.divisions as any}
        locations={locations as any}
        cityId={params.cityId}
        currentTab={tab}
        currentFilters={{
          division: searchParams.division,
          location: searchParams.location,
          team: searchParams.team,
          freeAgents: freeAgentsOnly,
          hasUser: hasUserAccount,
          search: searchParams.search,
        }}
      />
    </div>
  );
}


----- app\admin\league\players\[id]\edit\page.tsx -----

// src/app/admin/[cityId]/league/players/[id]/edit/page.tsx

/**
 * SOLID - Single Responsibility Principle (SRP)
 * Edit player page orchestration ONLY
 */

import { getServerSession } from "next-auth";
import { redirect } from "next/navigation";
import { authOptions } from "@/lib/auth/auth.config";
import { hasPermission } from "@/lib/auth/permissions";
import { getPlayerById } from "@/lib/db/queries/players";
import { getActiveCities } from "@/lib/db/queries/cities";
import { EditPlayerForm } from "@/components/features/league/players/EditPlayerForm";
import { ArrowLeft } from "lucide-react";
import Link from "next/link";
import { Button } from "@/components/ui/button";

interface EditPlayerPageProps {
  params: { cityId: string; id: string };
}

export default async function EditPlayerPage({ params }: EditPlayerPageProps) {
  const session = await getServerSession(authOptions);

  if (!session) {
    redirect("/login");
  }

  if (!hasPermission(session, "manage_players")) {
    redirect("/unauthorized");
  }

  const [player, cities] = await Promise.all([
    getPlayerById(params.id),
    getActiveCities(),
  ]);

  if (!player) {
    redirect(`/admin/${params.cityId}/league/players`);
  }

  return (
    <div className="p-6 space-y-6">
      <div className="flex items-center gap-4">
        <Button variant="ghost" size="sm" asChild>
          <Link href={`/admin/${params.cityId}/league/players/${params.id}`}>
            <ArrowLeft className="h-4 w-4 mr-2" />
            Back
          </Link>
        </Button>
      </div>

      <div>
        <h1 className="text-3xl font-bold tracking-tight">Edit Player</h1>
        <p className="text-gray-600 mt-1">
          Update player information and settings
        </p>
      </div>

      <div className="max-w-2xl">
        <EditPlayerForm
          player={player}
          cityId={params.cityId}
          cities={cities}
        />
      </div>
    </div>
  );
}


----- app\admin\league\players\[id]\page.tsx -----

// src/app/admin/[cityId]/league/players/[id]/page.tsx

/**
 * SOLID - Single Responsibility Principle (SRP)
 * Player detail page orchestration ONLY
 */

import { getServerSession } from "next-auth";
import { redirect } from "next/navigation";
import { authOptions } from "@/lib/auth/auth.config";
import { hasPermission } from "@/lib/auth/permissions";
import { getPlayerById } from "@/lib/db/queries/players";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import Link from "next/link";
import {
  ArrowLeft,
  Pencil,
  Trophy,
  MapPin,
  Mail,
  Phone,
  Instagram,
  User,
  Building2,
  TrendingUp,
  DollarSign,
} from "lucide-react";
import { InstallmentProgress } from "@/components/features/payments/InstallmentProgress";
import { format } from "date-fns";

interface PlayerDetailPageProps {
  params: { cityId: string; id: string };
}

export default async function PlayerDetailPage({
  params,
}: PlayerDetailPageProps) {
  const session = await getServerSession(authOptions);

  if (!session) {
    redirect("/login");
  }

  if (!hasPermission(session, "view_players")) {
    redirect("/unauthorized");
  }

  const player = await getPlayerById(params.id);

  if (!player) {
    redirect(`/admin/league/players`);
  }

  return (
    <div className="p-6 space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div className="flex items-center gap-4">
          <Button variant="ghost" size="sm" asChild>
            <Link href={`/admin/league/players`}>
              <ArrowLeft className="h-4 w-4 mr-2" />
              Back
            </Link>
          </Button>
        </div>
        {hasPermission(session, "manage_players") && (
          <Button asChild>
            <Link
              href={`/admin/${params.cityId}/league/players/${params.id}/edit`}
            >
              <Pencil className="mr-2 h-4 w-4" />
              Edit Player
            </Link>
          </Button>
        )}
      </div>

      {/* Title & Status */}
      <div>
        <div className="flex items-center gap-3 mb-2">
          <h1 className="text-3xl font-bold tracking-tight">
            {player.playerName}
          </h1>
          {player.jerseyNumber && (
            <Badge variant="outline" className="text-lg px-3 py-1">
              #{player.jerseyNumber}
            </Badge>
          )}
        </div>
        <div className="flex items-center gap-2 mt-2">
          {player.paymentStatus === "paid" && (
            <Badge
              variant="outline"
              className="bg-green-100 text-green-800 border-green-200"
            >
              Paid
            </Badge>
          )}
          {player.paymentStatus === "in_progress" && (
            <Badge
              variant="outline"
              className="bg-blue-100 text-blue-800 border-blue-200"
            >
              Installments
            </Badge>
          )}
          {player.paymentStatus === "unpaid" && (
            <Badge
              variant="outline"
              className="bg-red-100 text-red-800 border-red-200"
            >
              Unpaid
            </Badge>
          )}
          {!player.team && (
            <Badge
              variant="outline"
              className="bg-yellow-100 text-yellow-800 border-yellow-200"
            >
              Free Agent
            </Badge>
          )}
        </div>
      </div>

      <div className="grid gap-6 md:grid-cols-2">
        {/* Player Details */}
        <Card>
          <CardHeader>
            <CardTitle>Player Details</CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="flex items-center gap-3">
              <Building2 className="h-5 w-5 text-gray-400" />
              <div>
                <p className="text-sm text-gray-500">City</p>
                <p className="font-medium">
                  {(player.division as any)?.city?.cityName || "N/A"}
                </p>
              </div>
            </div>

            <div className="flex items-center gap-3">
              <MapPin className="h-5 w-5 text-gray-400" />
              <div>
                <p className="text-sm text-gray-500">Location</p>
                <p className="font-medium">
                  {(player.division as any)?.location?.name || "N/A"}
                </p>
              </div>
            </div>

            <div className="flex items-center gap-3">
              <Trophy className="h-5 w-5 text-gray-400" />
              <div>
                <p className="text-sm text-gray-500">Division</p>
                <p className="font-medium">
                  {(player.division as any)?.divisionName || "N/A"}
                </p>
              </div>
            </div>

            <div className="flex items-center gap-3">
              <TrendingUp className="h-5 w-5 text-gray-400" />
              <div>
                <p className="text-sm text-gray-500">Skill Level</p>
                <p className="font-medium">
                  Grade {(player.division as any)?.level?.grade || "N/A"} -{" "}
                  {(player.division as any)?.level?.name || "N/A"}
                </p>
              </div>
            </div>

            <div className="flex items-center gap-3">
              <Trophy className="h-5 w-5 text-gray-400" />
              <div>
                <p className="text-sm text-gray-500">Team</p>
                <p className="font-medium">
                  {player.team ? (
                    <Link
                      href={`/admin/${params.cityId}/league/teams/${
                        (player.team as any)._id
                      }`}
                      className="text-blue-600 hover:underline"
                    >
                      {(player.team as any).teamName}
                    </Link>
                  ) : (
                    <span className="text-yellow-600">Free Agent</span>
                  )}
                </p>
              </div>
            </div>

            {player.instagram && (
              <div className="flex items-center gap-3">
                <Instagram className="h-5 w-5 text-gray-400" />
                <div>
                  <p className="text-sm text-gray-500">Instagram</p>
                  <p className="font-medium">{player.instagram}</p>
                </div>
              </div>
            )}
          </CardContent>
        </Card>

        {/* Payment Status */}
        <Card>
          <CardHeader>
            <CardTitle>Payment Status</CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            <div>
              <p className="text-sm text-gray-500 mb-2">Status</p>
              {player.paymentStatus === "paid" && (
                <div className="flex items-center gap-2">
                  <Badge className="bg-green-100 text-green-800 border-green-200">
                    Fully Paid
                  </Badge>
                </div>
              )}
              {player.paymentStatus === "in_progress" && (
                <div className="space-y-3">
                  <Badge className="bg-blue-100 text-blue-800 border-blue-200">
                    Installment Plan Active
                  </Badge>
                  {player.installmentProgress && (
                    <div>
                      <p className="text-sm text-gray-500 mb-2">
                        Weekly Progress
                      </p>
                      <InstallmentProgress
                        payments={player.installmentProgress}
                        size="md"
                      />
                      <div className="mt-3 pt-3 border-t space-y-2">
                        <div className="flex justify-between text-sm">
                          <span className="text-gray-500">
                            Remaining Balance:
                          </span>
                          <span className="font-medium">
                            ${player.remainingBalance?.toFixed(2) || "0.00"}
                          </span>
                        </div>
                        {player.nextPaymentDate && (
                          <div className="flex justify-between text-sm">
                            <span className="text-gray-500">Next Payment:</span>
                            <span className="font-medium">
                              {format(
                                new Date(player.nextPaymentDate),
                                "MMM dd, yyyy"
                              )}
                            </span>
                          </div>
                        )}
                      </div>
                    </div>
                  )}
                </div>
              )}
              {player.paymentStatus === "unpaid" && (
                <Badge className="bg-red-100 text-red-800 border-red-200">
                  No Payment Recorded
                </Badge>
              )}
            </div>

            {hasPermission(session, "manage_payments") && (
              <Button variant="outline" className="w-full" asChild>
                <Link
                  href={`/admin/${params.cityId}/payments?player=${params.id}`}
                >
                  <DollarSign className="mr-2 h-4 w-4" />
                  Manage Payment
                </Link>
              </Button>
            )}
          </CardContent>
        </Card>
      </div>

      {/* User Account */}
      {player.user && (
        <Card>
          <CardHeader>
            <CardTitle>Linked User Account</CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="flex items-center gap-3">
              <User className="h-5 w-5 text-gray-400" />
              <div>
                <p className="text-sm text-gray-500">Name</p>
                <p className="font-medium">{(player.user as any).name}</p>
              </div>
            </div>

            <div className="flex items-center gap-3">
              <Mail className="h-5 w-5 text-gray-400" />
              <div>
                <p className="text-sm text-gray-500">Email</p>
                <p className="font-medium">{(player.user as any).email}</p>
              </div>
            </div>

            {(player.user as any).phoneNumber && (
              <div className="flex items-center gap-3">
                <Phone className="h-5 w-5 text-gray-400" />
                <div>
                  <p className="text-sm text-gray-500">Phone</p>
                  <p className="font-medium">
                    {(player.user as any).phoneNumber}
                  </p>
                </div>
              </div>
            )}

            {(player.user as any).instagram && (
              <div className="flex items-center gap-3">
                <Instagram className="h-5 w-5 text-gray-400" />
                <div>
                  <p className="text-sm text-gray-500">Instagram</p>
                  <p className="font-medium">
                    {(player.user as any).instagram}
                  </p>
                </div>
              </div>
            )}
          </CardContent>
        </Card>
      )}

      {!player.user && (
        <Card>
          <CardHeader>
            <CardTitle>User Account</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-center py-6">
              <User className="mx-auto h-12 w-12 text-gray-400" />
              <p className="mt-2 text-sm text-gray-500">
                No user account linked to this player
              </p>
              {hasPermission(session, "manage_players") && (
                <Button variant="outline" size="sm" className="mt-4" asChild>
                  <Link
                    href={`/admin/${params.cityId}/league/players/${params.id}/edit`}
                  >
                    Link User Account
                  </Link>
                </Button>
              )}
            </div>
          </CardContent>
        </Card>
      )}

      {/* Jersey Information */}
      <Card>
        <CardHeader>
          <CardTitle>Jersey Information</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="grid gap-4 md:grid-cols-3">
            <div>
              <p className="text-sm text-gray-500">Jersey Number</p>
              <p className="font-medium text-lg">
                {player.jerseyNumber
                  ? `#${player.jerseyNumber}`
                  : "Not assigned"}
              </p>
            </div>
            <div>
              <p className="text-sm text-gray-500">Jersey Size</p>
              <p className="font-medium">
                {player.jerseySize || "Not specified"}
              </p>
            </div>
            <div>
              <p className="text-sm text-gray-500">Jersey Name</p>
              <p className="font-medium">
                {player.jerseyName || "Not specified"}
              </p>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Game Statistics - Placeholder */}
      <Card>
        <CardHeader>
          <CardTitle>Game Statistics</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="text-center py-6">
            <Trophy className="mx-auto h-12 w-12 text-gray-400" />
            <p className="mt-2 text-sm text-gray-500">
              Game statistics will be tracked here
            </p>
            <p className="text-xs text-gray-400 mt-1">
              (Statistics tracking to be implemented)
            </p>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}


----- app\admin\league\prices\new\page.tsx -----

// src/app/admin/[cityId]/league/prices/new/page.tsx

/**
 * SOLID - Single Responsibility Principle (SRP)
 * Create price page orchestration ONLY
 */

import { getServerSession } from "next-auth";
import { redirect } from "next/navigation";
import { authOptions } from "@/lib/auth/auth.config";
import { hasPermission } from "@/lib/auth/permissions";
import { CreatePriceForm } from "@/components/features/league/prices/CreatePriceForm";
import { ArrowLeft } from "lucide-react";
import Link from "next/link";
import { Button } from "@/components/ui/button";

interface CreatePricePageProps {
  params: { cityId: string };
}

export default async function CreatePricePage({
  params,
}: CreatePricePageProps) {
  const session = await getServerSession(authOptions);

  if (!session) {
    redirect("/login");
  }

  if (!hasPermission(session, "manage_prices")) {
    redirect("/unauthorized");
  }

  return (
    <div className="p-6 space-y-6">
      <div className="flex items-center gap-4">
        <Button variant="ghost" size="sm" asChild>
          <Link href={`/admin/${params.cityId}/league/prices`}>
            <ArrowLeft className="h-4 w-4 mr-2" />
            Back
          </Link>
        </Button>
      </div>

      <div>
        <h1 className="text-3xl font-bold tracking-tight">Add Price</h1>
        <p className="text-gray-600 mt-1">
          Link an existing Stripe price to your system (Permanent - cannot be
          edited or deleted)
        </p>
      </div>

      <div className="max-w-2xl">
        <CreatePriceForm cityId={params.cityId} />
      </div>
    </div>
  );
}


----- app\admin\league\prices\page.tsx -----

// src/app/admin/[cityId]/league/prices/page.tsx

/**
 * SOLID - Single Responsibility Principle (SRP)
 * Prices list page orchestration ONLY
 */

import { getServerSession } from "next-auth";
import { redirect } from "next/navigation";
import { authOptions } from "@/lib/auth/auth.config";
import { hasPermission } from "@/lib/auth/permissions";
import { getAllPrices } from "@/lib/db/queries/prices";
import { PricesGrid } from "@/components/features/league/prices/PricesGrid";
import { Button } from "@/components/ui/button";
import Link from "next/link";
import { Plus } from "lucide-react";

interface PricesPageProps {
  params: { cityId: string };
}

export default async function PricesPage({ params }: PricesPageProps) {
  const session = await getServerSession(authOptions);

  if (!session) {
    redirect("/login");
  }

  if (!hasPermission(session, "manage_prices")) {
    redirect("/unauthorized");
  }

  const prices = await getAllPrices();

  return (
    <div className="p-6 space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold tracking-tight">Prices</h1>
          <p className="text-gray-600 mt-1">
            Manage Stripe pricing for divisions (Prices are permanent once
            created)
          </p>
        </div>
        <Button asChild>
          <Link href={`/admin/${params.cityId}/league/prices/new`}>
            <Plus className="mr-2 h-4 w-4" />
            Add Price
          </Link>
        </Button>
      </div>

      <PricesGrid prices={prices} />
    </div>
  );
}


----- app\admin\league\teams\new\page.tsx -----

// src/app/admin/league/teams/new/page.tsx

/**
 * SOLID - Single Responsibility Principle (SRP)
 * Create team page orchestration ONLY
 */

import { getServerSession } from "next-auth";
import { redirect } from "next/navigation";
import { authOptions } from "@/lib/auth/auth.config";
import { hasPermission } from "@/lib/auth/permissions";
import { getActiveCities } from "@/lib/db/queries/cities";
import { ArrowLeft } from "lucide-react";
import Link from "next/link";
import { Button } from "@/components/ui/button";
import { CreateTeamForm } from "@/components/features/league/teams/CreateTeamForm";

export default async function CreateTeamPage() {
  const session = await getServerSession(authOptions);

  if (!session) {
    redirect("/login");
  }

  if (!hasPermission(session, "manage_teams")) {
    redirect("/unauthorized");
  }

  const cities = await getActiveCities();

  return (
    <div className="p-6 space-y-6">
      <div className="flex items-center gap-4">
        <Button variant="ghost" size="sm" asChild>
          <Link href="/admin/league/teams">
            <ArrowLeft className="h-4 w-4 mr-2" />
            Back
          </Link>
        </Button>
      </div>

      <div>
        <h1 className="text-3xl font-bold tracking-tight">Create Team</h1>
        <p className="text-gray-600 mt-1">
          Create a new team manually. Players and captain can be assigned after
          creation.
        </p>
      </div>

      <div className="max-w-2xl">
        <CreateTeamForm cities={cities} />
      </div>
    </div>
  );
}


----- app\admin\league\teams\page.tsx -----

// src/app/adminleague/teams/page.tsx

/**
 * SOLID - Single Responsibility Principle (SRP)
 * Teams list page orchestration ONLY
 */

import { getServerSession } from "next-auth";
import { redirect } from "next/navigation";
import { authOptions } from "@/lib/auth/auth.config";
import { hasPermission } from "@/lib/auth/permissions";
import { getTeams } from "@/lib/db/queries/teams";
import { getDivisions } from "@/lib/db/queries/divisions";
import {
  getAllLocations,
  getLocationsByCity,
} from "@/lib/db/queries/locations";
import { TeamsContent } from "@/components/features/league/teams/TeamsContent";
import { Button } from "@/components/ui/button";
import Link from "next/link";
import { Plus } from "lucide-react";

interface TeamsPageProps {
  searchParams: {
    page?: string;
    tab?: string;
    division?: string;
    location?: string;
    search?: string;
    view?: string;
    noCaptain?: string;
    noPlayers?: string;
  };
}

export default async function TeamsPage({ searchParams }: TeamsPageProps) {
  const session = await getServerSession(authOptions);

  if (!session) {
    redirect("/login");
  }

  if (!hasPermission(session, "view_teams")) {
    redirect("/unauthorized");
  }

  const page = parseInt(searchParams.page || "1");
  const tab = (searchParams.tab || "active") as "active" | "inactive" | "all";
  const viewMode = (searchParams.view || "card") as any;

  const [result, divisions, locations] = await Promise.all([
    getTeams({
      page,
      divisionId: searchParams.division,
      locationId: searchParams.location,
      search: searchParams.search,
      viewMode,
      activeFilter: tab,
      noCaptain: searchParams.noCaptain === "true",
      noPlayers: searchParams.noPlayers === "true",
    }),
    getDivisions({
      activeFilter: "active",
    }),
    getAllLocations(),
  ]);

  return (
    <div className="p-6 space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold tracking-tight">Teams</h1>
          <p className="text-gray-600 mt-1">
            Manage teams, rosters, and assignments
          </p>
        </div>
        <Button asChild>
          <Link href={`/admin/league/teams/new`}>
            <Plus className="mr-2 h-4 w-4" />
            Create Team
          </Link>
        </Button>
      </div>

      <TeamsContent
        teams={result.teams as any}
        pagination={result.pagination}
        divisions={divisions.divisions as any}
        locations={locations as any}
        currentTab={tab}
        currentView={viewMode}
        currentFilters={{
          division: searchParams.division,
          location: searchParams.location,
          search: searchParams.search,
          noCaptain: searchParams.noCaptain === "true",
          noPlayers: searchParams.noPlayers === "true",
        }}
      />
    </div>
  );
}


----- app\admin\league\teams\[id]\edit\page.tsx -----

// src/app/admin/[cityId]/league/teams/[id]/edit/page.tsx

/**
 * SOLID - Single Responsibility Principle (SRP)
 * Edit team page orchestration ONLY
 */

import { getServerSession } from "next-auth";
import { redirect } from "next/navigation";
import { authOptions } from "@/lib/auth/auth.config";
import { hasPermission } from "@/lib/auth/permissions";
import { getTeamById } from "@/lib/db/queries/teams";
import { getActiveCities } from "@/lib/db/queries/cities";
import { EditTeamForm } from "@/components/features/league/teams/EditTeamForm";
import { ArrowLeft } from "lucide-react";
import Link from "next/link";
import { Button } from "@/components/ui/button";

interface EditTeamPageProps {
  params: { cityId: string; id: string };
}

export default async function EditTeamPage({ params }: EditTeamPageProps) {
  const session = await getServerSession(authOptions);

  if (!session) {
    redirect("/login");
  }

  if (!hasPermission(session, "manage_teams")) {
    redirect("/unauthorized");
  }

  const [team, cities] = await Promise.all([
    getTeamById(params.id),
    getActiveCities(),
  ]);

  if (!team) {
    redirect(`/admin/league/teams`);
  }

  return (
    <div className="p-6 space-y-6">
      <div className="flex items-center gap-4">
        <Button variant="ghost" size="sm" asChild>
          <Link href={`/admin/league/teams/${params.id}`}>
            <ArrowLeft className="h-4 w-4 mr-2" />
            Back
          </Link>
        </Button>
      </div>

      <div>
        <h1 className="text-3xl font-bold tracking-tight">Edit Team</h1>
        <p className="text-gray-600 mt-1">
          Update team information and settings
        </p>
      </div>

      <div className="max-w-2xl">
        <EditTeamForm team={team} cityId={params.cityId} cities={cities} />
      </div>
    </div>
  );
}


----- app\admin\league\teams\[id]\page.tsx -----

// src/app/admin/[cityId]/league/teams/[id]/page.tsx

/**
 * SOLID - Single Responsibility Principle (SRP)
 * Team detail page orchestration ONLY
 */

import { getServerSession } from "next-auth";
import { redirect } from "next/navigation";
import { authOptions } from "@/lib/auth/auth.config";
import { hasPermission } from "@/lib/auth/permissions";
import { getTeamById, getTeamStats } from "@/lib/db/queries/teams";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import Link from "next/link";
import {
  ArrowLeft,
  Pencil,
  MapPin,
  Trophy,
  Users,
  Calendar,
  AlertCircle,
  Building2,
  TrendingUp,
  Clock,
  UserCheck,
} from "lucide-react";
import { format, subDays, isBefore } from "date-fns";

interface TeamDetailPageProps {
  params: { cityId: string; id: string };
}

export default async function TeamDetailPage({ params }: TeamDetailPageProps) {
  const session = await getServerSession(authOptions);

  if (!session) {
    redirect("/login");
  }

  if (!hasPermission(session, "view_teams")) {
    redirect("/unauthorized");
  }

  const [team, stats] = await Promise.all([
    getTeamById(params.id),
    getTeamStats(params.id),
  ]);

  if (!team) {
    redirect(`/admin/league/teams`);
  }

  const noCaptainWarning =
    !team.teamCaptain && team.players && team.players.length > 0;

  // Calculate early bird status
  const divisionStartDate = (team.division as any)?.startDate;
  const earlyBirdDeadline = divisionStartDate
    ? subDays(new Date(divisionStartDate), 42)
    : null;
  const teamCreatedAt = (team as any).createdAt;
  const isEarlyBird =
    earlyBirdDeadline && teamCreatedAt
      ? isBefore(new Date(teamCreatedAt), earlyBirdDeadline)
      : false;

  return (
    <div className="p-6 space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div className="flex items-center gap-4">
          <Button variant="ghost" size="sm" asChild>
            <Link href={`/admin/league/teams`}>
              <ArrowLeft className="h-4 w-4 mr-2" />
              Back
            </Link>
          </Button>
        </div>
        {hasPermission(session, "manage_teams") && (
          <Button asChild>
            <Link href={`/admin/league/teams/${params.id}/edit`}>
              <Pencil className="mr-2 h-4 w-4" />
              Edit Team
            </Link>
          </Button>
        )}
      </div>

      {/* Title & Basic Info */}
      <div>
        <div className="flex items-center gap-3 mb-2">
          <h1 className="text-3xl font-bold tracking-tight">{team.teamName}</h1>
          {noCaptainWarning && (
            <Badge
              variant="outline"
              className="bg-yellow-100 text-yellow-800 border-yellow-200"
            >
              <AlertCircle className="h-4 w-4 mr-1" />
              No Captain
            </Badge>
          )}
        </div>
        <p className="text-gray-600">{team.teamNameShort}</p>
        <p className="text-sm text-gray-500 font-mono mt-1">{team.teamCode}</p>
      </div>

      <div className="grid gap-6 md:grid-cols-2">
        {/* Team Details */}
        <Card>
          <CardHeader>
            <CardTitle>Team Details</CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="flex items-center gap-3">
              <Building2 className="h-5 w-5 text-gray-400" />
              <div>
                <p className="text-sm text-gray-500">City</p>
                <p className="font-medium">
                  {(team.division as any)?.city?.cityName || "N/A"}
                </p>
              </div>
            </div>

            <div className="flex items-center gap-3">
              <MapPin className="h-5 w-5 text-gray-400" />
              <div>
                <p className="text-sm text-gray-500">Location</p>
                <p className="font-medium">
                  {(team.division as any)?.location?.name || "N/A"}
                </p>
              </div>
            </div>

            <div className="flex items-center gap-3">
              <Trophy className="h-5 w-5 text-gray-400" />
              <div>
                <p className="text-sm text-gray-500">Division</p>
                <p className="font-medium">
                  {(team.division as any)?.divisionName || "N/A"}
                </p>
              </div>
            </div>

            <div className="flex items-center gap-3">
              <TrendingUp className="h-5 w-5 text-gray-400" />
              <div>
                <p className="text-sm text-gray-500">Skill Level</p>
                <p className="font-medium">
                  Grade {(team.division as any)?.level?.grade || "N/A"} -{" "}
                  {(team.division as any)?.level?.name || "N/A"}
                </p>
              </div>
            </div>

            <div className="flex items-center gap-3">
              <Users className="h-5 w-5 text-gray-400" />
              <div>
                <p className="text-sm text-gray-500">Team Captain</p>
                <p className="font-medium">
                  {(team.teamCaptain as any)?.playerName || (
                    <span className="text-yellow-600">Not assigned</span>
                  )}
                </p>
              </div>
            </div>

            <div className="flex items-center gap-3">
              <Clock className="h-5 w-5 text-gray-400" />
              <div>
                <p className="text-sm text-gray-500">Team Created</p>
                <div className="flex items-center gap-2">
                  <p className="font-medium">
                    {teamCreatedAt
                      ? format(new Date(teamCreatedAt), "MMM dd, yyyy")
                      : "N/A"}
                  </p>
                  {isEarlyBird ? (
                    <Badge
                      variant="outline"
                      className="bg-green-100 text-green-800 border-green-200"
                    >
                      Early Bird
                    </Badge>
                  ) : (
                    <Badge
                      variant="outline"
                      className="bg-gray-100 text-gray-800 border-gray-200"
                    >
                      Regular
                    </Badge>
                  )}
                </div>
                {earlyBirdDeadline && (
                  <p className="text-xs text-gray-500 mt-1">
                    Early bird ended:{" "}
                    {format(earlyBirdDeadline, "MMM dd, yyyy")}
                  </p>
                )}
              </div>
            </div>
          </CardContent>
        </Card>

        {/* Statistics */}
        <Card>
          <CardHeader>
            <CardTitle>Statistics</CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            <div>
              <p className="text-sm text-gray-500 mb-2">Record</p>
              <p className="text-3xl font-bold">
                {stats?.wins || 0}-{stats?.losses || 0}
              </p>
            </div>

            <div className="grid grid-cols-2 gap-4">
              <div>
                <p className="text-sm text-gray-500">Wins</p>
                <p className="text-2xl font-bold text-green-600">
                  {stats?.wins || 0}
                </p>
              </div>
              <div>
                <p className="text-sm text-gray-500">Losses</p>
                <p className="text-2xl font-bold text-red-600">
                  {stats?.losses || 0}
                </p>
              </div>
            </div>

            <div>
              <p className="text-sm text-gray-500">Point Differential</p>
              <p className="text-2xl font-bold">
                {stats?.pointDifference && stats.pointDifference > 0 ? "+" : ""}
                {stats?.pointDifference || 0}
              </p>
            </div>

            <div>
              <p className="text-sm text-gray-500">Total Players</p>
              <p className="text-2xl font-bold">{team.players?.length || 0}</p>
            </div>

            <div>
              <p className="text-sm text-gray-500">Games Played</p>
              <p className="text-2xl font-bold">{team.games?.length || 0}</p>
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Roster */}
      <Card>
        <CardHeader>
          <div className="flex items-center justify-between">
            <CardTitle>Roster ({team.players?.length || 0} Players)</CardTitle>
            {hasPermission(session, "manage_teams") && (
              <Button size="sm" asChild>
                <Link href={`/admin/league/teams/${params.id}/roster`}>
                  Manage Roster
                </Link>
              </Button>
            )}
          </div>
        </CardHeader>
        <CardContent>
          {!team.players || team.players.length === 0 ? (
            <div className="text-center py-8">
              <Users className="mx-auto h-12 w-12 text-gray-400" />
              <p className="mt-2 text-sm text-gray-500">
                No players on this team yet
              </p>
              {hasPermission(session, "manage_teams") && (
                <Button variant="outline" size="sm" className="mt-4" asChild>
                  <Link href={`/admin/league/teams/${params.id}/roster`}>
                    Add Players
                  </Link>
                </Button>
              )}
            </div>
          ) : (
            <div className="space-y-2">
              {team.players.map((player: any) => (
                <div
                  key={player._id}
                  className="flex items-center justify-between p-3 rounded-lg hover:bg-gray-50"
                >
                  <div className="flex items-center gap-3">
                    <div className="flex items-center justify-center w-10 h-10 rounded-full bg-gray-100 font-bold text-gray-600">
                      {player.jerseyNumber || "—"}
                    </div>
                    <div>
                      <p className="font-medium">{player.playerName}</p>
                      <div className="flex items-center gap-2 mt-1">
                        {player._id === team.teamCaptain?._id && (
                          <Badge variant="outline">
                            Captain
                          </Badge>
                        )}
                        {player.user ? (
                          <Badge variant="outline" className="bg-green-50 text-green-700 border-green-200">
                            <UserCheck className="h-3 w-3 mr-1" />
                            Has Account
                          </Badge>
                        ) : (
                          <Badge variant="outline" className="bg-gray-50 text-gray-600 border-gray-200">
                            No Account
                          </Badge>
                        )}
                      </div>
                    </div>
                  </div>
                  <Button variant="ghost" size="sm" asChild>
                    <Link href={`/admin/league/players/${player._id}`}>
                      View
                    </Link>
                  </Button>
                </div>
              ))}
            </div>
          )}
        </CardContent>
      </Card>

      {/* Game History */}
      <Card>
        <CardHeader>
          <div className="flex items-center justify-between">
            <CardTitle>
              Game History ({team.games?.length || 0} Games)
            </CardTitle>
            <Button variant="outline" size="sm" asChild>
              <Link href={`/admin/games?team=${params.id}`}>
                View All Games
              </Link>
            </Button>
          </div>
        </CardHeader>
        <CardContent>
          {!team.games || team.games.length === 0 ? (
            <div className="text-center py-8">
              <Calendar className="mx-auto h-12 w-12 text-gray-400" />
              <p className="mt-2 text-sm text-gray-500">No games played yet</p>
            </div>
          ) : (
            <div className="text-sm text-gray-600">
              <p>Game history will be displayed here</p>
              <p className="text-xs text-gray-500 mt-1">
                (Full game history component to be implemented)
              </p>
            </div>
          )}
        </CardContent>
      </Card>

      {/* Jersey Information */}
      {(team.primaryColor ||
        team.secondaryColor ||
        team.jerseyEdition ||
        team.isCustomJersey) && (
        <Card>
          <CardHeader>
            <CardTitle>Jersey Information</CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            {team.isCustomJersey ? (
              <div>
                <p className="text-sm text-gray-500">Jersey Type</p>
                <p className="font-medium">Custom Jersey</p>
              </div>
            ) : team.jerseyEdition ? (
              <div>
                <p className="text-sm text-gray-500">Jersey Edition</p>
                <p className="font-medium">{team.jerseyEdition}</p>
              </div>
            ) : null}

            {(team.primaryColor ||
              team.secondaryColor ||
              team.tertiaryColor) && (
              <div>
                <p className="text-sm text-gray-500 mb-2">Team Colors</p>
                <div className="flex gap-3">
                  {team.primaryColor && (
                    <div className="flex items-center gap-2">
                      <div
                        className="w-10 h-10 rounded border"
                        style={{ backgroundColor: team.primaryColor }}
                      />
                      <span className="text-xs text-gray-500">Primary</span>
                    </div>
                  )}
                  {team.secondaryColor && (
                    <div className="flex items-center gap-2">
                      <div
                        className="w-10 h-10 rounded border"
                        style={{ backgroundColor: team.secondaryColor }}
                      />
                      <span className="text-xs text-gray-500">Secondary</span>
                    </div>
                  )}
                  {team.tertiaryColor && (
                    <div className="flex items-center gap-2">
                      <div
                        className="w-10 h-10 rounded border"
                        style={{ backgroundColor: team.tertiaryColor }}
                      />
                      <span className="text-xs text-gray-500">Tertiary</span>
                    </div>
                  )}
                </div>
              </div>
            )}
          </CardContent>
        </Card>
      )}
    </div>
  );
}


----- app\admin\league\teams\[id]\roster\page.tsx -----

// src/app/admin/[cityId]/league/teams/[id]/roster/page.tsx

/**
 * SOLID - Single Responsibility Principle (SRP)
 * Roster management page orchestration ONLY
 */

import { getServerSession } from "next-auth";
import { redirect } from "next/navigation";
import { authOptions } from "@/lib/auth/auth.config";
import { hasPermission } from "@/lib/auth/permissions";
import { getTeamById } from "@/lib/db/queries/teams";
import { RosterManager } from "@/components/features/league/teams/RosterManager";
import { ArrowLeft, Clock } from "lucide-react";
import Link from "next/link";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Card, CardContent } from "@/components/ui/card";
import { format, subDays, isBefore } from "date-fns";

interface RosterPageProps {
  params: { cityId: string; id: string };
}

export default async function RosterPage({ params }: RosterPageProps) {
  const session = await getServerSession(authOptions);

  if (!session) {
    redirect("/login");
  }

  if (!hasPermission(session, "manage_teams")) {
    redirect("/unauthorized");
  }

  const team = await getTeamById(params.id);

  if (!team) {
    redirect(`/admin/league/teams`);
  }

  // Calculate early bird status
  const divisionStartDate = (team.division as any)?.startDate;
  const earlyBirdDeadline = divisionStartDate
    ? subDays(new Date(divisionStartDate), 42)
    : null;
  const teamCreatedAt = (team as any).createdAt;
  const isEarlyBird =
    earlyBirdDeadline && teamCreatedAt
      ? isBefore(new Date(teamCreatedAt), earlyBirdDeadline)
      : false;

  return (
    <div className="p-6 space-y-6">
      <div className="flex items-center gap-4">
        <Button variant="ghost" size="sm" asChild>
          <Link href={`/admin/league/teams/${params.id}`}>
            <ArrowLeft className="h-4 w-4 mr-2" />
            Back to Team
          </Link>
        </Button>
      </div>

      <div>
        <h1 className="text-3xl font-bold tracking-tight">
          Manage Roster - {team.teamName}
        </h1>
        <p className="text-gray-600 mt-1">
          Add or remove players from the team roster
        </p>
      </div>

      {/* Team Creation & Jersey Info */}
      <Card className="bg-blue-50 border-blue-200">
        <CardContent className="pt-6">
          <div className="flex items-start gap-4">
            <Clock className="h-5 w-5 text-blue-600 mt-0.5" />
            <div className="flex-1">
              <div className="flex items-center gap-3 mb-2">
                <p className="font-medium text-blue-900">
                  Team Created:{" "}
                  {teamCreatedAt
                    ? format(new Date(teamCreatedAt), "MMMM dd, yyyy")
                    : "N/A"}
                </p>
                {isEarlyBird ? (
                  <Badge className="bg-green-600 hover:bg-green-700">
                    Early Bird - Default Jerseys
                  </Badge>
                ) : (
                  <Badge variant="secondary">
                    Regular - No Default Jerseys
                  </Badge>
                )}
              </div>
              {earlyBirdDeadline && (
                <p className="text-sm text-blue-700">
                  {isEarlyBird
                    ? `This team was created before the early bird deadline (${format(
                        earlyBirdDeadline,
                        "MMM dd, yyyy"
                      )}). Players will receive custom jerseys.`
                    : `This team was created after the early bird deadline (${format(
                        earlyBirdDeadline,
                        "MMM dd, yyyy"
                      )}). Players will NOT receive custom jerseys.`}
                </p>
              )}
            </div>
          </div>
        </CardContent>
      </Card>

      <RosterManager team={team} cityId={params.cityId} />
    </div>
  );
}


----- app\admin\page.tsx -----

// src/app/(admin)/admin/page.tsx

/**
 * SOLID - Single Responsibility Principle (SRP)
 * Redirects to city-specific dashboard
 */

import { redirect } from "next/navigation";
import { getServerSession } from "next-auth";
import { authOptions } from "@/lib/auth/auth.config";
import { getActiveCities } from "@/lib/db/queries/cities";

export default async function AdminPage() {
  const session = await getServerSession(authOptions);

  if (!session) {
    redirect("/login");
  }

  // Fetch active cities
  const cities = await getActiveCities();

  // No cities - show message
  if (cities.length === 0) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gray-50">
        <div className="text-center">
          <h1 className="text-2xl font-bold text-gray-900 mb-4">
            No Cities Configured
          </h1>
          <p className="text-gray-600">
            Please contact an administrator to set up cities.
          </p>
        </div>
      </div>
    );
  }

  // Redirect to first city's dashboard
  redirect(`/admin/dashboard`);
}


----- app\admin\payments\page.tsx -----

// src/app/admin/[cityId]/payments/page.tsx

/**
 * SOLID - Single Responsibility Principle (SRP)
 * Payment dashboard page orchestration ONLY
 */

import { getServerSession } from "next-auth";
import { redirect } from "next/navigation";
import { authOptions } from "@/lib/auth/auth.config";
import { hasPermission } from "@/lib/auth/permissions";
import { getPlayersWithPaymentStatus } from "@/lib/db/queries/payments";
import {
  getAllLocations,
  getLocationsByCity,
} from "@/lib/db/queries/locations";
import { getDivisions } from "@/lib/db/queries/divisions";
import { PaymentDashboard } from "@/components/features/payments/PaymentDashboard";

interface PaymentPageProps {
  searchParams: {
    page?: string;
    location?: string;
    division?: string;
    team?: string;
    payment?: string;
    search?: string;
  };
}

export default async function PaymentPage({ searchParams }: PaymentPageProps) {
  const session = await getServerSession(authOptions);

  if (!session) {
    redirect("/login");
  }

  if (!hasPermission(session, "view_payments")) {
    redirect("/unauthorized");
  }

  const page = parseInt(searchParams.page || "1");

  const [result, allPlayersResult, locations, divisions] = await Promise.all([
    getPlayersWithPaymentStatus({
      page,
      locationId: searchParams.location,
      divisionId: searchParams.division,
      teamId: searchParams.team,
      paymentStatusFilter: searchParams.payment || "all",
      search: searchParams.search,
    }),
    getPlayersWithPaymentStatus({ limit: 99999 }), // Get all players for overall stats
    getAllLocations(),
    getDivisions({
      activeFilter: "active",
    }),
  ]);

  return (
    <div className="p-6 space-y-6">
      <div>
        <h1 className="text-3xl font-bold tracking-tight">
          Payment Management
        </h1>
        <p className="text-gray-600 mt-1">
          Track player payments and manage installment plans
        </p>
      </div>

      <PaymentDashboard
        players={JSON.parse(JSON.stringify(result.players))}
        allPlayers={JSON.parse(JSON.stringify(allPlayersResult.players))}
        pagination={result.pagination}
        locations={JSON.parse(JSON.stringify(locations))}
        divisions={JSON.parse(JSON.stringify(divisions.divisions))}
        currentFilters={{
          location: searchParams.location,
          division: searchParams.division,
          team: searchParams.team,
          payment: searchParams.payment || "all",
          search: searchParams.search,
        }}
      />
    </div>
  );
}


----- app\admin\payments\[playerId]\page.tsx -----

// src/app/admin/[cityId]/payments/[playerId]/page.tsx

/**
 * SOLID - Single Responsibility Principle (SRP)
 * Player payment detail page orchestration ONLY
 */

import { getServerSession } from "next-auth";
import { redirect } from "next/navigation";
import { authOptions } from "@/lib/auth/auth.config";
import { hasPermission } from "@/lib/auth/permissions";
import { getPlayerById } from "@/lib/db/queries/players";
import { getPlayerPaymentStatus } from "@/lib/db/queries/payments";
import { UnpaidPlayerView } from "@/components/features/payments/UnpaidPlayerView";
import { PaidPlayerView } from "@/components/features/payments/PaidPlayerView";
import { OnTrackPlayerView } from "@/components/features/payments/OnTrackPlayerView";
import { HasIssuesPlayerView } from "@/components/features/payments/HasIssuesPlayerView";
import { CriticalPlayerView } from "@/components/features/payments/CriticalPlayerView";

interface PlayerPaymentPageProps {
  params: { cityId: string; playerId: string };
}

export default async function PlayerPaymentPage({ params }: PlayerPaymentPageProps) {
  const session = await getServerSession(authOptions);

  if (!session) {
    redirect("/login");
  }

  if (!hasPermission(session, "view_payments")) {
    redirect("/unauthorized");
  }

  const player = await getPlayerById(params.playerId);

  if (!player) {
    redirect(`/admin/${params.cityId}/payments`);
  }

  const { status, paymentMethod } = await getPlayerPaymentStatus(params.playerId);

  // Route to appropriate view based on payment status
  const renderView = () => {
    switch (status) {
      case "unpaid":
        return <UnpaidPlayerView player={player} cityId={params.cityId} />;
      case "paid":
        return <PaidPlayerView player={player} paymentMethod={paymentMethod} cityId={params.cityId} />;
      case "on-track":
        return <OnTrackPlayerView player={player} paymentMethod={paymentMethod} cityId={params.cityId} />;
      case "has-issues":
        return <HasIssuesPlayerView player={player} paymentMethod={paymentMethod} cityId={params.cityId} />;
      case "critical":
        return <CriticalPlayerView player={player} paymentMethod={paymentMethod} cityId={params.cityId} />;
      default:
        return <UnpaidPlayerView player={player} cityId={params.cityId} />;
    }
  };

  return renderView();
}

----- app\admin\[cityId]\settings\admins\new\page.tsx -----

// src/app/admin/[cityId]/settings/admins/new/page.tsx

/**
 * SOLID - Single Responsibility Principle (SRP)
 * Create admin page orchestration ONLY
 */

import { getServerSession } from "next-auth";
import { redirect } from "next/navigation";
import { authOptions } from "@/lib/auth/auth.config";
import { hasPermission } from "@/lib/auth/permissions";
import { getLocationsByCity } from "@/lib/db/queries/locations";
import { CreateAdminForm } from "@/components/features/admins/CreateAdminForm";
import { ArrowLeft } from "lucide-react";
import Link from "next/link";
import { Button } from "@/components/ui/button";

interface CreateAdminPageProps {
  params: { cityId: string };
}

export default async function CreateAdminPage({
  params,
}: CreateAdminPageProps) {
  const session = await getServerSession(authOptions);

  if (!session) {
    redirect("/login");
  }

  if (!hasPermission(session, "manage_admins")) {
    redirect("/unauthorized");
  }

  const locations = await getLocationsByCity(params.cityId);

  return (
    <div className="p-6 space-y-6">
      <div className="flex items-center gap-4">
        <Button variant="ghost" size="sm" asChild>
          <Link href={`/admin/${params.cityId}/settings/admins`}>
            <ArrowLeft className="h-4 w-4 mr-2" />
            Back
          </Link>
        </Button>
      </div>

      <div>
        <h1 className="text-3xl font-bold tracking-tight">Add Staff Member</h1>
        <p className="text-gray-600 mt-1">
          Create a new admin account with role and location access
        </p>
      </div>

      <div className="max-w-2xl">
        <CreateAdminForm locations={locations} cityId={params.cityId} />
      </div>
    </div>
  );
}


----- app\admin\[cityId]\settings\admins\page.tsx -----

// src/app/admin/[cityId]/settings/admins/page.tsx

/**
 * SOLID - Single Responsibility Principle (SRP)
 * Admin list page orchestration ONLY
 */

import { getServerSession } from "next-auth";
import { redirect } from "next/navigation";
import { authOptions } from "@/lib/auth/auth.config";
import { getAdmins } from "@/lib/db/queries/admins";
import { hasPermission } from "@/lib/auth/permissions";
import { AdminsTable } from "@/components/features/admins/AdminsTable";
import { Button } from "@/components/ui/button";
import Link from "next/link";
import { Plus } from "lucide-react";

interface AdminsPageProps {
  params: { cityId: string };
}

export default async function AdminsPage({ params }: AdminsPageProps) {
  const session = await getServerSession(authOptions);

  if (!session) {
    redirect("/login");
  }

  // Check permission
  if (!hasPermission(session, "manage_admins")) {
    redirect("/unauthorized");
  }

  const admins = await getAdmins();

  return (
    <div className="p-6 space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold tracking-tight">
            Staff Management
          </h1>
          <p className="text-gray-600 mt-1">
            Manage admin accounts and permissions
          </p>
        </div>
        <Button asChild>
          <Link href={`/admin/${params.cityId}/settings/admins/new`}>
            <Plus className="mr-2 h-4 w-4" />
            Add Staff
          </Link>
        </Button>
      </div>

      <AdminsTable admins={admins} cityId={params.cityId} />
    </div>
  );
}


----- app\api\auth\[...nextauth]\route.ts -----

// src/app/api/auth/[...nextauth]/route.ts

/**
 * SOLID - Single Responsibility Principle (SRP)
 * NextAuth handler ONLY
 */

import NextAuth from "next-auth";
import { authOptions } from "@/lib/auth/auth.config";

const handler = NextAuth(authOptions);

export { handler as GET, handler as POST };


----- app\api\v1\admins\route.ts -----

// src/app/api/v1/admins/route.ts

/**
 * SOLID - Single Responsibility Principle (SRP)
 * Admins API endpoint ONLY
 */

/**
 * Security
 * Only EXECUTIVE can manage admins
 */

import { NextRequest, NextResponse } from "next/server";
import { getServerSession } from "next-auth";
import { authOptions } from "@/lib/auth/auth.config";
import { getAdmins, createAdmin, emailExists } from "@/lib/db/queries/admins";
import { z } from "zod";

// Validation schema
const createAdminSchema = z.object({
  name: z.string().min(2),
  email: z.string().email(),
  password: z
    .string()
    .min(8)
    .regex(/[A-Z]/, "Must contain uppercase letter")
    .regex(/[a-z]/, "Must contain lowercase letter")
    .regex(/[0-9]/, "Must contain number"),
  phoneNumber: z.string().optional(),
  role: z.enum(["EXECUTIVE", "COMMISSIONER", "SCOREKEEPER", "PHOTOGRAPHER"]),
  assignedLocations: z.array(z.string()).optional(),
});

/**
 * GET /api/v1/admins
 * Fetch all admins (EXECUTIVE only)
 */
export async function GET(request: NextRequest) {
  try {
    const session = await getServerSession(authOptions);

    if (!session || session.user.role !== "EXECUTIVE") {
      return NextResponse.json(
        { success: false, error: "Forbidden" },
        { status: 403 }
      );
    }

    const admins = await getAdmins();

    return NextResponse.json({ success: true, data: admins }, { status: 200 });
  } catch (error: any) {
    console.error("Error fetching admins:", error);
    return NextResponse.json(
      { success: false, error: "Failed to fetch admins" },
      { status: 500 }
    );
  }
}

/**
 * POST /api/v1/admins
 * Create new admin (EXECUTIVE only)
 */
export async function POST(request: NextRequest) {
  try {
    const session = await getServerSession(authOptions);

    if (!session || session.user.role !== "EXECUTIVE") {
      return NextResponse.json(
        { success: false, error: "Forbidden" },
        { status: 403 }
      );
    }

    // Parse and validate body
    const body = await request.json();
    const validatedData = createAdminSchema.parse(body);

    // Check if email exists
    const exists = await emailExists(validatedData.email);
    if (exists) {
      return NextResponse.json(
        { success: false, error: "Email already exists" },
        { status: 409 }
      );
    }

    // Create admin
    const admin = await createAdmin(validatedData);

    return NextResponse.json({ success: true, data: admin }, { status: 201 });
  } catch (error: any) {
    if (error instanceof z.ZodError) {
      return NextResponse.json(
        { success: false, error: "Validation failed", details: error.errors },
        { status: 400 }
      );
    }

    console.error("Error creating admin:", error);
    return NextResponse.json(
      { success: false, error: error.message || "Failed to create admin" },
      { status: 500 }
    );
  }
}


----- app\api\v1\cities\route.ts -----

// src/app/api/v1/cities/route.ts

/**
 * SOLID - Single Responsibility Principle (SRP)
 * Cities API endpoint ONLY
 */

/**
 * Error Handling & Resilience
 * Proper error responses with status codes
 */

import { NextRequest, NextResponse } from "next/server";
import { getServerSession } from "next-auth";
import { authOptions } from "@/lib/auth/auth.config";
import { getActiveCities } from "@/lib/db/queries/cities";

/**
 * GET /api/v1/cities
 * Fetch all active cities
 */
export async function GET(request: NextRequest) {
  try {
    // Auth check
    const session = await getServerSession(authOptions);

    if (!session) {
      return NextResponse.json(
        { success: false, error: "Unauthorized" },
        { status: 401 }
      );
    }

    // Fetch cities
    const cities = await getActiveCities();

    return NextResponse.json({ success: true, data: cities }, { status: 200 });
  } catch (error: any) {
    console.error("Error fetching cities:", error);
    return NextResponse.json(
      { success: false, error: "Failed to fetch cities" },
      { status: 500 }
    );
  }
}


----- app\api\v1\divisions\route.ts -----

// src/app/api/v1/divisions/route.ts

/**
 * SOLID - Single Responsibility Principle (SRP)
 * Divisions API endpoint ONLY
 */

import { NextRequest, NextResponse } from "next/server";
import { getServerSession } from "next-auth";
import { authOptions } from "@/lib/auth/auth.config";
import { hasPermission } from "@/lib/auth/permissions";
import {
  getDivisions,
  createDivision,
  checkLocationConflict,
  getDivisionById,
  updateDivision,
} from "@/lib/db/queries/divisions";
import {
  createDivisionSchema,
  updateDivisionSchema,
} from "@/lib/validations/division"; // ADD updateDivisionSchema
import { z } from "zod";

/**
 * GET /api/v1/divisions
 * Get divisions with pagination (EXECUTIVE + COMMISSIONER)
 */
export async function GET(request: NextRequest) {
  try {
    const session = await getServerSession(authOptions);

    if (!session || !hasPermission(session, "view_divisions")) {
      return NextResponse.json(
        { success: false, error: "Forbidden" },
        { status: 403 }
      );
    }

    const { searchParams } = new URL(request.url);
    const page = parseInt(searchParams.get("page") || "1");
    const activeFilter = (searchParams.get("tab") as any) || "all";
    const locationId = searchParams.get("location") || undefined;
    const levelId = searchParams.get("level") || undefined;
    const day = searchParams.get("day") || undefined;
    const search = searchParams.get("search") || undefined;

    const result = await getDivisions({
      page,
      activeFilter,
      locationId,
      levelId,
      day,
      search,
    });

    return NextResponse.json({ success: true, data: result }, { status: 200 });
  } catch (error: any) {
    console.error("Error fetching divisions:", error);
    return NextResponse.json(
      { success: false, error: "Failed to fetch divisions" },
      { status: 500 }
    );
  }
}

/**
 * POST /api/v1/divisions
 * Create division (EXECUTIVE + COMMISSIONER)
 */
export async function POST(request: NextRequest) {
  try {
    const session = await getServerSession(authOptions);

    if (!session || !hasPermission(session, "manage_divisions")) {
      return NextResponse.json(
        { success: false, error: "Forbidden" },
        { status: 403 }
      );
    }

    const body = await request.json();
    const validatedData = createDivisionSchema.parse(body);

    // Check for location conflicts (warning only)
    let conflictWarning = null;
    if (validatedData.startTime && validatedData.endTime) {
      const conflict = await checkLocationConflict(
        validatedData.location,
        validatedData.day,
        validatedData.startTime,
        validatedData.endTime
      );

      if (conflict.hasConflict) {
        conflictWarning = {
          message: `${conflict.conflictingDivision.divisionName} uses this location on ${validatedData.day}s from ${conflict.conflictingDivision.startTime} - ${conflict.conflictingDivision.endTime}`,
        };
      }
    }

    const division = await createDivision(validatedData);

    return NextResponse.json(
      {
        success: true,
        data: division,
        warning: conflictWarning,
      },
      { status: 201 }
    );
  } catch (error: any) {
    if (error instanceof z.ZodError) {
      return NextResponse.json(
        { success: false, error: "Validation failed", details: error.errors },
        { status: 400 }
      );
    }

    console.error("Error creating division:", error);
    return NextResponse.json(
      { success: false, error: error.message || "Failed to create division" },
      { status: 500 }
    );
  }
}

/**
 * PATCH /api/v1/divisions
 * Update division (EXECUTIVE + COMMISSIONER)
 */
export async function PATCH(request: NextRequest) {
  try {
    const session = await getServerSession(authOptions);

    if (!session || !hasPermission(session, "manage_divisions")) {
      return NextResponse.json(
        { success: false, error: "Forbidden" },
        { status: 403 }
      );
    }

    const body = await request.json();
    const validatedData = updateDivisionSchema.parse(body);

    const { id, ...updateData } = validatedData;

    // Check for location conflicts if location/time is being updated
    let conflictWarning = null;
    if (
      updateData.location ||
      updateData.day ||
      updateData.startTime ||
      updateData.endTime
    ) {
      const currentDivision = await getDivisionById(id);

      // Add null check
      if (!currentDivision) {
        return NextResponse.json(
          { success: false, error: "Division not found" },
          { status: 404 }
        );
      }

      // Convert ObjectId to string with proper type handling
      const locationToCheck =
        updateData.location ||
        (typeof currentDivision.location === "object" &&
        currentDivision.location._id
          ? currentDivision.location._id.toString()
          : currentDivision.location?.toString() || "");

      const dayToCheck = updateData.day || currentDivision.day;
      const startTimeToCheck =
        updateData.startTime || currentDivision.startTime;
      const endTimeToCheck = updateData.endTime || currentDivision.endTime;

      if (startTimeToCheck && endTimeToCheck) {
        const conflict = await checkLocationConflict(
          locationToCheck,
          dayToCheck,
          startTimeToCheck,
          endTimeToCheck,
          id
        );

        if (conflict.hasConflict) {
          conflictWarning = {
            message: `${conflict.conflictingDivision.divisionName} uses this location on ${dayToCheck}s from ${conflict.conflictingDivision.startTime} - ${conflict.conflictingDivision.endTime}`,
          };
        }
      }
    }

    const division = await updateDivision(id, updateData);

    if (!division) {
      return NextResponse.json(
        { success: false, error: "Division not found" },
        { status: 404 }
      );
    }

    return NextResponse.json(
      {
        success: true,
        data: division,
        warning: conflictWarning,
      },
      { status: 200 }
    );
  } catch (error: any) {
    if (error instanceof z.ZodError) {
      return NextResponse.json(
        { success: false, error: "Validation failed", details: error.errors },
        { status: 400 }
      );
    }

    console.error("Error updating division:", error);
    return NextResponse.json(
      { success: false, error: error.message || "Failed to update division" },
      { status: 500 }
    );
  }
}


----- app\api\v1\jerseys\design\route.ts -----

// src/app/api/v1/jerseys/design/route.ts

/**
 * SOLID - Single Responsibility Principle (SRP)
 * Handle jersey design updates ONLY
 */

import { NextRequest, NextResponse } from "next/server";
import { getServerSession } from "next-auth";
import { authOptions } from "@/lib/auth/auth.config";
import { hasPermission } from "@/lib/auth/permissions";
import {
  updateTeamJerseyEdition,
  updateTeamJerseyCustom,
  removeTeamJerseyDesign,
} from "@/lib/db/queries/jerseys";
import {
  updateJerseyEditionSchema,
  updateJerseyCustomSchema,
  removeJerseyDesignSchema,
} from "@/lib/validations/jersey";

/**
 * PUT /api/v1/jerseys/design
 * Update team jersey design (edition or custom)
 */
export async function PUT(request: NextRequest) {
  try {
    const session = await getServerSession(authOptions);

    if (!session?.user) {
      return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
    }

    if (!hasPermission(session, "manage_jerseys")) {
      return NextResponse.json({ error: "Forbidden" }, { status: 403 });
    }

    const body = await request.json();
    const { type } = body;

    if (type === "edition") {
      // Validate edition data
      const validatedData = updateJerseyEditionSchema.parse(body);

      const team = await updateTeamJerseyEdition(validatedData.teamId, {
        jerseyEdition: validatedData.jerseyEdition,
        primaryColor: validatedData.primaryColor,
        secondaryColor: validatedData.secondaryColor,
        tertiaryColor: validatedData.tertiaryColor,
      });

      return NextResponse.json({
        message: "Jersey edition updated successfully",
        team,
      });
    } else if (type === "custom") {
      // Validate custom data
      const validatedData = updateJerseyCustomSchema.parse(body);

      const team = await updateTeamJerseyCustom(
        validatedData.teamId,
        validatedData.imageData
      );

      return NextResponse.json({
        message: "Custom jersey updated successfully",
        team,
      });
    } else {
      return NextResponse.json(
        { error: "Invalid design type. Must be 'edition' or 'custom'" },
        { status: 400 }
      );
    }
  } catch (error: any) {
    console.error("PUT /api/v1/jerseys/design error:", error);

    if (error.name === "ZodError") {
      return NextResponse.json(
        { error: "Validation failed", details: error.errors },
        { status: 400 }
      );
    }

    return NextResponse.json(
      { error: error.message || "Failed to update jersey design" },
      { status: 500 }
    );
  }
}

/**
 * DELETE /api/v1/jerseys/design
 * Remove team jersey design
 */
export async function DELETE(request: NextRequest) {
  try {
    const session = await getServerSession(authOptions);

    if (!session?.user) {
      return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
    }

    if (!hasPermission(session, "manage_jerseys")) {
      return NextResponse.json({ error: "Forbidden" }, { status: 403 });
    }

    const body = await request.json();
    const validatedData = removeJerseyDesignSchema.parse(body);

    const team = await removeTeamJerseyDesign(validatedData.teamId);

    return NextResponse.json({
      message: "Jersey design removed successfully",
      team,
    });
  } catch (error: any) {
    console.error("DELETE /api/v1/jerseys/design error:", error);

    if (error.name === "ZodError") {
      return NextResponse.json(
        { error: "Validation failed", details: error.errors },
        { status: 400 }
      );
    }

    return NextResponse.json(
      { error: error.message || "Failed to remove jersey design" },
      { status: 500 }
    );
  }
}


----- app\api\v1\jerseys\generic\route.ts -----

// src/app/api/v1/jerseys/generic/route.ts

/**
 * SOLID - Single Responsibility Principle (SRP)
 * Handle generic jersey management ONLY
 */

import { NextRequest, NextResponse } from "next/server";
import { getServerSession } from "next-auth";
import { authOptions } from "@/lib/auth/auth.config";
import { hasPermission } from "@/lib/auth/permissions";
import {
  addGenericJersey,
  updateGenericJersey,
  removeGenericJersey,
} from "@/lib/db/queries/jerseys";
import {
  addGenericJerseySchema,
  updateGenericJerseySchema,
  removeGenericJerseySchema,
} from "@/lib/validations/jersey";

/**
 * POST /api/v1/jerseys/generic
 * Add generic jersey to team
 */
export async function POST(request: NextRequest) {
  try {
    const session = await getServerSession(authOptions);

    if (!session?.user) {
      return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
    }

    if (!hasPermission(session, "manage_jerseys")) {
      return NextResponse.json({ error: "Forbidden" }, { status: 403 });
    }

    const body = await request.json();
    const validatedData = addGenericJerseySchema.parse(body);

    const team = await addGenericJersey(validatedData.teamId, {
      jerseyNumber: validatedData.jerseyNumber,
      jerseySize: validatedData.jerseySize,
      jerseyName: validatedData.jerseyName,
    });

    return NextResponse.json({
      message: "Generic jersey added successfully",
      team,
    });
  } catch (error: any) {
    console.error("POST /api/v1/jerseys/generic error:", error);

    if (error.name === "ZodError") {
      return NextResponse.json(
        { error: "Validation failed", details: error.errors },
        { status: 400 }
      );
    }

    return NextResponse.json(
      { error: error.message || "Failed to add generic jersey" },
      { status: 500 }
    );
  }
}

/**
 * PUT /api/v1/jerseys/generic
 * Update generic jersey
 */
export async function PUT(request: NextRequest) {
  try {
    const session = await getServerSession(authOptions);

    if (!session?.user) {
      return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
    }

    if (!hasPermission(session, "manage_jerseys")) {
      return NextResponse.json({ error: "Forbidden" }, { status: 403 });
    }

    const body = await request.json();
    const validatedData = updateGenericJerseySchema.parse(body);

    const team = await updateGenericJersey(
      validatedData.teamId,
      validatedData.genericIndex,
      {
        jerseyNumber: validatedData.jerseyNumber,
        jerseySize: validatedData.jerseySize,
        jerseyName: validatedData.jerseyName,
      }
    );

    return NextResponse.json({
      message: "Generic jersey updated successfully",
      team,
    });
  } catch (error: any) {
    console.error("PUT /api/v1/jerseys/generic error:", error);

    if (error.name === "ZodError") {
      return NextResponse.json(
        { error: "Validation failed", details: error.errors },
        { status: 400 }
      );
    }

    return NextResponse.json(
      { error: error.message || "Failed to update generic jersey" },
      { status: 500 }
    );
  }
}

/**
 * DELETE /api/v1/jerseys/generic
 * Remove generic jersey from team
 */
export async function DELETE(request: NextRequest) {
  try {
    const session = await getServerSession(authOptions);

    if (!session?.user) {
      return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
    }

    if (!hasPermission(session, "manage_jerseys")) {
      return NextResponse.json({ error: "Forbidden" }, { status: 403 });
    }

    const body = await request.json();
    const validatedData = removeGenericJerseySchema.parse(body);

    const team = await removeGenericJersey(
      validatedData.teamId,
      validatedData.genericIndex
    );

    return NextResponse.json({
      message: "Generic jersey removed successfully",
      team,
    });
  } catch (error: any) {
    console.error("DELETE /api/v1/jerseys/generic error:", error);

    if (error.name === "ZodError") {
      return NextResponse.json(
        { error: "Validation failed", details: error.errors },
        { status: 400 }
      );
    }

    return NextResponse.json(
      { error: error.message || "Failed to remove generic jersey" },
      { status: 500 }
    );
  }
}


----- app\api\v1\jerseys\player\route.ts -----

// src/app/api/v1/jerseys/player/route.ts

/**
 * SOLID - Single Responsibility Principle (SRP)
 * Handle player jersey detail updates ONLY
 */

import { NextRequest, NextResponse } from "next/server";
import { getServerSession } from "next-auth";
import { authOptions } from "@/lib/auth/auth.config";
import { hasPermission } from "@/lib/auth/permissions";
import { updatePlayerJerseyDetails } from "@/lib/db/queries/jerseys";
import { updatePlayerJerseySchema } from "@/lib/validations/jersey";

/**
 * PUT /api/v1/jerseys/player
 * Update player jersey details (number, size, name)
 */
export async function PUT(request: NextRequest) {
  try {
    const session = await getServerSession(authOptions);

    if (!session?.user) {
      return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
    }

    if (!hasPermission(session, "manage_jerseys")) {
      return NextResponse.json({ error: "Forbidden" }, { status: 403 });
    }

    const body = await request.json();
    const validatedData = updatePlayerJerseySchema.parse(body);

    const player = await updatePlayerJerseyDetails(validatedData.playerId, {
      jerseyNumber: validatedData.jerseyNumber,
      jerseySize: validatedData.jerseySize,
      jerseyName: validatedData.jerseyName,
    });

    return NextResponse.json({
      message: "Player jersey details updated successfully",
      player,
    });
  } catch (error: any) {
    console.error("PUT /api/v1/jerseys/player error:", error);

    if (error.name === "ZodError") {
      return NextResponse.json(
        { error: "Validation failed", details: error.errors },
        { status: 400 }
      );
    }

    return NextResponse.json(
      { error: error.message || "Failed to update player jersey details" },
      { status: 500 }
    );
  }
}


----- app\api\v1\jerseys\route.ts -----

// src/app/api/v1/jerseys/route.ts

/**
 * SOLID - Single Responsibility Principle (SRP)
 * Handle jersey overview requests ONLY
 */

/**
 * Security - Permission-based access control
 * Only commissioners and executives can manage jerseys
 */

import { NextRequest, NextResponse } from "next/server";
import { getServerSession } from "next-auth";
import { authOptions } from "@/lib/auth/auth.config";
import {
  hasPermission,
  getAccessibleLocationIds,
} from "@/lib/auth/permissions";
import {
  getDivisionsByLocation,
  getTeamsWithJerseyDetails,
  getJerseyStats,
} from "@/lib/db/queries/jerseys";
import { getAllLocations } from "@/lib/db/queries/locations";

/**
 * GET /api/v1/jerseys
 * Get jersey management overview data
 * Query params:
 *  - locationId: Filter by location (optional)
 *  - divisionId: Get teams for specific division (optional)
 */
export async function GET(request: NextRequest) {
  try {
    const session = await getServerSession(authOptions);

    if (!session?.user) {
      return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
    }

    // Check permission
    if (!hasPermission(session, "manage_jerseys")) {
      return NextResponse.json({ error: "Forbidden" }, { status: 403 });
    }

    const { searchParams } = new URL(request.url);
    const locationId = searchParams.get("locationId");
    const divisionId = searchParams.get("divisionId");

    // Get locations user has access to
    const allLocations = await getAllLocations();
    const accessibleLocationIds = getAccessibleLocationIds(
      session,
      allLocations.map((loc) => loc._id.toString())
    );

    // If requesting teams for a specific division
    if (divisionId) {
      const teams = await getTeamsWithJerseyDetails(divisionId);
      return NextResponse.json({ teams });
    }

    // Get overview data
    // Always fetch all divisions and stats for accessible locations
    // Frontend will handle location filtering for divisions
    const [divisions, stats] = await Promise.all([
      getDivisionsByLocation(accessibleLocationIds),
      getJerseyStats(accessibleLocationIds),
    ]);

    return NextResponse.json({
      divisions,
      stats,
      locations: allLocations.filter((loc) =>
        accessibleLocationIds.includes(loc._id.toString())
      ),
    });
  } catch (error: any) {
    console.error("GET /api/v1/jerseys error:", error);
    return NextResponse.json(
      { error: error.message || "Failed to fetch jersey data" },
      { status: 500 }
    );
  }
}
