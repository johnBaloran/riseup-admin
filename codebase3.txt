

----- components\features\league\DivisionFreeAgents.tsx -----

// src/components/features/league/DivisionFreeAgents.tsx

/**
 * SOLID - Single Responsibility Principle (SRP)
 * Display free agents in a division ONLY
 */

"use client";

import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { UserCircle, Users, Mail, Phone, CheckCircle2, XCircle, Instagram } from "lucide-react";

interface Player {
  _id: string;
  playerName: string;
  team?: {
    teamName: string;
    teamCode: string;
  } | null;
  user?: {
    name?: string;
    email?: string;
    phoneNumber?: string;
  } | null;
  instagram?: string;
  jerseyNumber?: number;
  createdAt: Date;
}

interface DivisionFreeAgentsProps {
  players: Player[];
}

export function DivisionFreeAgents({ players }: DivisionFreeAgentsProps) {
  const freeAgentsWithTeam = players.filter((p) => p.team);
  const freeAgentsWithoutTeam = players.filter((p) => !p.team);

  if (players.length === 0) {
    return (
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <UserCircle className="h-5 w-5" />
            Free Agents
          </CardTitle>
        </CardHeader>
        <CardContent>
          <p className="text-sm text-gray-500 text-center py-8">
            No free agents in this division
          </p>
        </CardContent>
      </Card>
    );
  }

  return (
    <Card>
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <UserCircle className="h-5 w-5" />
          Free Agents ({players.length})
        </CardTitle>
        <p className="text-sm text-gray-500 mt-1">
          Players marked as free agents in this division
        </p>
      </CardHeader>
      <CardContent className="space-y-6">
        {/* Free Agents with Teams */}
        {freeAgentsWithTeam.length > 0 && (
          <div>
            <div className="flex items-center gap-2 mb-3">
              <CheckCircle2 className="h-4 w-4 text-green-600" />
              <h3 className="font-medium text-sm">
                On a Team ({freeAgentsWithTeam.length})
              </h3>
            </div>
            <div className="space-y-2">
              {freeAgentsWithTeam.map((player) => (
                <div
                  key={player._id}
                  className="flex items-center justify-between p-3 rounded-lg border bg-green-50 border-green-200"
                >
                  <div className="flex items-center gap-3">
                    <div className="flex items-center justify-center w-10 h-10 rounded-full bg-green-100">
                      <UserCircle className="h-5 w-5 text-green-700" />
                    </div>
                    <div>
                      <p className="font-medium text-sm">{player.playerName}</p>
                      {player.user?.email && (
                        <div className="flex items-center gap-1 text-xs text-gray-600 mt-1">
                          <Mail className="h-3 w-3" />
                          {player.user.email}
                        </div>
                      )}
                      {player.instagram && (
                        <div className="flex items-center gap-1 text-xs text-gray-600">
                          <Instagram className="h-3 w-3" />
                          @{player.instagram}
                        </div>
                      )}
                    </div>
                  </div>
                  <div className="text-right">
                    <Badge className="bg-green-600 text-white">
                      <Users className="h-3 w-3 mr-1" />
                      {player.team?.teamName}
                    </Badge>
                    {player.jerseyNumber && (
                      <p className="text-xs text-gray-500 mt-1">
                        #{player.jerseyNumber}
                      </p>
                    )}
                  </div>
                </div>
              ))}
            </div>
          </div>
        )}

        {/* Free Agents without Teams */}
        {freeAgentsWithoutTeam.length > 0 && (
          <div>
            <div className="flex items-center gap-2 mb-3">
              <XCircle className="h-4 w-4 text-amber-600" />
              <h3 className="font-medium text-sm">
                No Team ({freeAgentsWithoutTeam.length})
              </h3>
            </div>
            <div className="space-y-2">
              {freeAgentsWithoutTeam.map((player) => (
                <div
                  key={player._id}
                  className="flex items-center justify-between p-3 rounded-lg border bg-amber-50 border-amber-200"
                >
                  <div className="flex items-center gap-3">
                    <div className="flex items-center justify-center w-10 h-10 rounded-full bg-amber-100">
                      <UserCircle className="h-5 w-5 text-amber-700" />
                    </div>
                    <div>
                      <p className="font-medium text-sm">{player.playerName}</p>
                      {player.user?.email && (
                        <div className="flex items-center gap-1 text-xs text-gray-600 mt-1">
                          <Mail className="h-3 w-3" />
                          {player.user.email}
                        </div>
                      )}
                      {player.user?.phoneNumber && (
                        <div className="flex items-center gap-1 text-xs text-gray-600">
                          <Phone className="h-3 w-3" />
                          {player.user.phoneNumber}
                        </div>
                      )}
                      {player.instagram && (
                        <div className="flex items-center gap-1 text-xs text-gray-600">
                          <Instagram className="h-3 w-3" />
                          @{player.instagram}
                        </div>
                      )}
                    </div>
                  </div>
                  <div className="text-right">
                    <Badge variant="outline" className="bg-amber-100 text-amber-800 border-amber-200">
                      Unassigned
                    </Badge>
                    {player.jerseyNumber && (
                      <p className="text-xs text-gray-500 mt-1">
                        #{player.jerseyNumber}
                      </p>
                    )}
                  </div>
                </div>
              ))}
            </div>
          </div>
        )}
      </CardContent>
    </Card>
  );
}


----- components\features\league\divisions\CreateDivisionForm.tsx -----

// src/components/features/league/divisions/CreateDivisionForm.tsx

/**
 * SOLID - Single Responsibility Principle (SRP)
 * Division creation form ONLY
 */

"use client";

import { useState, useMemo } from "react";
import { useRouter } from "next/navigation";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { Checkbox } from "@/components/ui/checkbox";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Loader2, AlertCircle, Info } from "lucide-react";
import { toast } from "sonner";
import {
  createDivisionSchema,
  CreateDivisionInput,
} from "@/lib/validations/division";
import { format, subDays } from "date-fns";

interface City {
  _id: string;
  cityName: string;
  region: string;
  locations: any[];
}

interface Level {
  _id: string;
  name: string;
  grade: number;
}

interface Price {
  _id: string;
  name: string;
  amount: number;
  type: string;
}

interface CreateDivisionFormProps {
  cities: City[];
  levels: Level[];
  prices: Price[];
}

export function CreateDivisionForm({
  cities,
  levels,
  prices,
}: CreateDivisionFormProps) {
  const router = useRouter();
  const [isLoading, setIsLoading] = useState(false);
  const [selectedCity, setSelectedCity] = useState(cities[0]?._id || "");
  const [selectedStartDate, setSelectedStartDate] = useState<string>("");
  const [conflictWarning, setConflictWarning] = useState<string | null>(null);

  const {
    register,
    handleSubmit,
    formState: { errors },
    setValue,
    watch,
  } = useForm<CreateDivisionInput>({
    resolver: zodResolver(createDivisionSchema),
    defaultValues: {
      city: cities[0]?._id || "",
      active: false,
      register: false,
    },
  });

  const selectedLocation = watch("location");
  const selectedLevel = watch("level");
  const selectedDay = watch("day");
  const active = watch("active");
  const registerOpen = watch("register");

  // Filter locations by selected city
  const availableLocations = useMemo(() => {
    const city = cities.find((c) => c._id === selectedCity);
    return city?.locations || [];
  }, [cities, selectedCity]);

  // Filter prices by type
  const pricesByType = useMemo(() => {
    return {
      earlyBird: prices.filter((p) => p.type === "earlyBird"),
      regular: prices.filter((p) => p.type === "regular"),
      installment: prices.filter((p) => p.type === "installment"),
      regularInstallment: prices.filter((p) => p.type === "regularInstallment"),
      firstInstallment: prices.filter((p) => p.type === "firstInstallment"),
    };
  }, [prices]);

  // Calculate early bird end date
  const earlyBirdEndDate = useMemo(() => {
    if (!selectedStartDate) return null;
    const startDate = new Date(selectedStartDate);
    return subDays(startDate, 42);
  }, [selectedStartDate]);

  const onSubmit = async (data: CreateDivisionInput) => {
    setIsLoading(true);
    setConflictWarning(null);

    try {
      const response = await fetch(`/api/v1/divisions`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(data),
      });

      const result = await response.json();

      if (!response.ok) {
        throw new Error(result.error || "Failed to create division");
      }

      // Show conflict warning if exists
      if (result.warning) {
        setConflictWarning(result.warning.message);
      }

      toast.success("Division created successfully!");
      router.push(`/admin/league/divisions`);
      router.refresh();
    } catch (err: any) {
      toast.error(err.message || "Failed to create division");
      console.error("Create division error:", err);
    } finally {
      setIsLoading(false);
    }
  };

  const onError = (errors: any) => {
    console.log("Form validation errors:", errors);
    toast.error("Please fill in all required fields");
  };

  return (
    <form onSubmit={handleSubmit(onSubmit, onError)} className="space-y-6">
      {/* Basic Information */}
      <Card>
        <CardHeader>
          <CardTitle>Basic Information</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div>
            <Label htmlFor="divisionName">Division Name *</Label>
            <Input
              {...register("divisionName")}
              id="divisionName"
              placeholder="Monday A Division - Elite"
              disabled={isLoading}
            />
            {errors.divisionName && (
              <p className="text-sm text-red-600 mt-1">
                {errors.divisionName.message}
              </p>
            )}
          </div>

          <div>
            <Label htmlFor="description">Description *</Label>
            <Textarea
              {...register("description")}
              id="description"
              placeholder="Competitive league for experienced players..."
              rows={3}
              disabled={isLoading}
            />
            {errors.description && (
              <p className="text-sm text-red-600 mt-1">
                {errors.description.message}
              </p>
            )}
          </div>
        </CardContent>
      </Card>

      {/* Location & Level */}
      <Card>
        <CardHeader>
          <CardTitle>Location & Level</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div>
            <Label htmlFor="city">City *</Label>
            <Select
              value={selectedCity}
              onValueChange={(value) => {
                setSelectedCity(value);
                setValue("city", value, { shouldValidate: true });
                setValue("location", "", { shouldValidate: false });
              }}
              disabled={isLoading}
            >
              <SelectTrigger>
                <SelectValue />
              </SelectTrigger>
              <SelectContent>
                {cities.map((city) => (
                  <SelectItem key={city._id} value={city._id}>
                    {city.cityName}, {city.region}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
            {errors.city && (
              <p className="text-sm text-red-600 mt-1">{errors.city.message}</p>
            )}
          </div>

          <div>
            <Label htmlFor="location">Location *</Label>
            <Select
              value={selectedLocation}
              onValueChange={(value) =>
                setValue("location", value, { shouldValidate: true })
              }
              disabled={isLoading || availableLocations.length === 0}
            >
              <SelectTrigger>
                <SelectValue placeholder="Select location" />
              </SelectTrigger>
              <SelectContent>
                {availableLocations.map((location: any) => (
                  <SelectItem
                    key={location._id || location}
                    value={location._id || location}
                  >
                    {location.name}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
            {errors.location && (
              <p className="text-sm text-red-600 mt-1">
                {errors.location.message}
              </p>
            )}
            {conflictWarning && (
              <div className="flex items-start gap-2 mt-2 p-3 bg-yellow-50 border border-yellow-200 rounded-lg">
                <AlertCircle className="h-5 w-5 text-yellow-600 flex-shrink-0 mt-0.5" />
                <p className="text-sm text-yellow-800">{conflictWarning}</p>
              </div>
            )}
          </div>

          <div>
            <Label htmlFor="level">Skill Level *</Label>
            <Select
              value={selectedLevel}
              onValueChange={(value) =>
                setValue("level", value, { shouldValidate: true })
              }
              disabled={isLoading}
            >
              <SelectTrigger>
                <SelectValue placeholder="Select level" />
              </SelectTrigger>
              <SelectContent>
                {levels.map((level) => (
                  <SelectItem key={level._id} value={level._id}>
                    {level.name}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
            {errors.level && (
              <p className="text-sm text-red-600 mt-1">
                {errors.level.message}
              </p>
            )}
          </div>
        </CardContent>
      </Card>

      {/* Schedule */}
      <Card>
        <CardHeader>
          <CardTitle>Schedule</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div>
            <Label htmlFor="day">Day *</Label>
            <Select
              value={selectedDay}
              onValueChange={(value) =>
                setValue("day", value as any, { shouldValidate: true })
              }
              disabled={isLoading}
            >
              <SelectTrigger>
                <SelectValue placeholder="Select day" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="Monday">Monday</SelectItem>
                <SelectItem value="Tuesday">Tuesday</SelectItem>
                <SelectItem value="Wednesday">Wednesday</SelectItem>
                <SelectItem value="Thursday">Thursday</SelectItem>
                <SelectItem value="Friday">Friday</SelectItem>
                <SelectItem value="Saturday">Saturday</SelectItem>
                <SelectItem value="Sunday">Sunday</SelectItem>
              </SelectContent>
            </Select>
            {errors.day && (
              <p className="text-sm text-red-600 mt-1">{errors.day.message}</p>
            )}
          </div>

          <div className="grid gap-4 md:grid-cols-3">
            <div>
              <Label htmlFor="startDate">Start Date</Label>
              <Input
                {...register("startDate")}
                id="startDate"
                type="date"
                disabled={isLoading}
                onChange={(e) => {
                  setSelectedStartDate(e.target.value);
                  setValue("startDate", e.target.value);
                }}
              />
            </div>

            <div>
              <Label htmlFor="startTime">Start Time</Label>
              <Input
                {...register("startTime")}
                id="startTime"
                type="time"
                disabled={isLoading}
              />
            </div>

            <div>
              <Label htmlFor="endTime">End Time</Label>
              <Input
                {...register("endTime")}
                id="endTime"
                type="time"
                disabled={isLoading}
              />
            </div>
          </div>

          {earlyBirdEndDate && (
            <div className="flex items-start gap-2 p-3 bg-blue-50 border border-blue-200 rounded-lg">
              <Info className="h-5 w-5 text-blue-600 flex-shrink-0 mt-0.5" />
              <p className="text-sm text-blue-800">
                Early bird pricing ends 42 days (6 weeks) before start date on{" "}
                <strong>{format(earlyBirdEndDate, "MMM dd, yyyy")}</strong>
              </p>
            </div>
          )}
        </CardContent>
      </Card>

      {/* Pricing */}
      <Card>
        <CardHeader>
          <CardTitle>Pricing</CardTitle>
          <p className="text-sm text-gray-600">
            All pricing options are required and cannot be changed later
          </p>
        </CardHeader>
        <CardContent className="space-y-6">
          {/* Single Payment */}
          <div>
            <h4 className="font-medium mb-3">Single Payment Options</h4>
            <div className="grid gap-4 md:grid-cols-2">
              <div>
                <Label htmlFor="earlyBird">Early Bird Price *</Label>
                <Select
                  onValueChange={(value) =>
                    setValue("prices.earlyBird", value, {
                      shouldValidate: true,
                    })
                  }
                  disabled={isLoading}
                >
                  <SelectTrigger>
                    <SelectValue placeholder="Select price" />
                  </SelectTrigger>
                  <SelectContent>
                    {pricesByType.earlyBird.map((price) => (
                      <SelectItem key={price._id} value={price._id}>
                        ${price.amount.toFixed(2)} - {price.name}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
                {errors.prices?.earlyBird && (
                  <p className="text-sm text-red-600 mt-1">
                    {errors.prices.earlyBird.message}
                  </p>
                )}
              </div>

              <div>
                <Label htmlFor="regular">Regular Price *</Label>
                <Select
                  onValueChange={(value) =>
                    setValue("prices.regular", value, { shouldValidate: true })
                  }
                  disabled={isLoading}
                >
                  <SelectTrigger>
                    <SelectValue placeholder="Select price" />
                  </SelectTrigger>
                  <SelectContent>
                    {pricesByType.regular.map((price) => (
                      <SelectItem key={price._id} value={price._id}>
                        ${price.amount.toFixed(2)} - {price.name}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
                {errors.prices?.regular && (
                  <p className="text-sm text-red-600 mt-1">
                    {errors.prices.regular.message}
                  </p>
                )}
              </div>
            </div>
          </div>

          {/* Installment Payment */}
          <div>
            <h4 className="font-medium mb-3">Installment Payment Options</h4>
            <div className="grid gap-4 md:grid-cols-3">
              <div>
                <Label htmlFor="firstInstallment">Down Payment *</Label>
                <Select
                  onValueChange={(value) =>
                    setValue("prices.firstInstallment", value, {
                      shouldValidate: true,
                    })
                  }
                  disabled={isLoading}
                >
                  <SelectTrigger>
                    <SelectValue placeholder="Select price" />
                  </SelectTrigger>
                  <SelectContent>
                    {pricesByType.firstInstallment.map((price) => (
                      <SelectItem key={price._id} value={price._id}>
                        ${price.amount.toFixed(2)} - {price.name}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
                {errors.prices?.firstInstallment && (
                  <p className="text-sm text-red-600 mt-1">
                    {errors.prices.firstInstallment.message}
                  </p>
                )}
              </div>

              <div>
                <Label htmlFor="installment">Weekly (Early Bird) *</Label>
                <Select
                  onValueChange={(value) =>
                    setValue("prices.installment", value, {
                      shouldValidate: true,
                    })
                  }
                  disabled={isLoading}
                >
                  <SelectTrigger>
                    <SelectValue placeholder="Select price" />
                  </SelectTrigger>
                  <SelectContent>
                    {pricesByType.installment.map((price) => (
                      <SelectItem key={price._id} value={price._id}>
                        ${price.amount.toFixed(2)}/week - {price.name}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
                {errors.prices?.installment && (
                  <p className="text-sm text-red-600 mt-1">
                    {errors.prices.installment.message}
                  </p>
                )}
              </div>

              <div>
                <Label htmlFor="regularInstallment">Weekly (Regular) *</Label>
                <Select
                  onValueChange={(value) =>
                    setValue("prices.regularInstallment", value, {
                      shouldValidate: true,
                    })
                  }
                  disabled={isLoading}
                >
                  <SelectTrigger>
                    <SelectValue placeholder="Select price" />
                  </SelectTrigger>
                  <SelectContent>
                    {pricesByType.regularInstallment.map((price) => (
                      <SelectItem key={price._id} value={price._id}>
                        ${price.amount.toFixed(2)}/week - {price.name}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
                {errors.prices?.regularInstallment && (
                  <p className="text-sm text-red-600 mt-1">
                    {errors.prices.regularInstallment.message}
                  </p>
                )}
              </div>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Status */}
      <Card>
        <CardHeader>
          <CardTitle>Status</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="flex items-center space-x-2">
            <Checkbox
              id="active"
              checked={active}
              onCheckedChange={(checked) =>
                setValue("active", checked as boolean)
              }
              disabled={isLoading}
            />
            <label
              htmlFor="active"
              className="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
            >
              Active (Games are being played)
            </label>
          </div>

          <div className="flex items-center space-x-2">
            <Checkbox
              id="register"
              checked={registerOpen}
              onCheckedChange={(checked) =>
                setValue("register", checked as boolean)
              }
              disabled={isLoading}
            />
            <label
              htmlFor="register"
              className="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
            >
              Registration Open (Teams can join)
            </label>
          </div>
        </CardContent>
      </Card>

      {/* Submit */}
      <div className="flex gap-4">
        <Button type="submit" disabled={isLoading}>
          {isLoading ? (
            <>
              <Loader2 className="mr-2 h-4 w-4 animate-spin" />
              Creating...
            </>
          ) : (
            "Create Division"
          )}
        </Button>
        <Button
          type="button"
          variant="outline"
          onClick={() => router.back()}
          disabled={isLoading}
        >
          Cancel
        </Button>
      </div>
    </form>
  );
}


----- components\features\league\divisions\DivisionCard.tsx -----

// src/components/features/league/divisions/DivisionCard.tsx

/**
 * SOLID - Single Responsibility Principle (SRP)
 * Single division card display ONLY
 */

"use client";

import { useState } from "react";
import { useRouter } from "next/navigation";
import { Card, CardContent, CardHeader } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import {
  MapPin,
  TrendingUp,
  Calendar,
  Clock,
  Users,
  MoreVertical,
  Pencil,
  Power,
  UserCheck,
  UserCircle,
} from "lucide-react";
import { format } from "date-fns";
import { toast } from "sonner";
import { PopulatedDivision } from "@/types/division";
import Link from "next/link";

interface DivisionCardProps {
  division: PopulatedDivision;
}

export function DivisionCard({ division }: DivisionCardProps) {
  const router = useRouter();
  const [isUpdating, setIsUpdating] = useState(false);

  const getStatusBadge = () => {
    const badges: JSX.Element[] = [];

    if (!division.active && !division.register) {
      badges.push(
        <Badge
          variant="outline"
          className="bg-gray-100 text-gray-800 border-gray-200"
        >
          Finished
        </Badge>
      );
    }
    if (division.register) {
      badges.push(
        <Badge
          variant="outline"
          className="bg-yellow-100 text-yellow-800 border-yellow-200"
        >
          Registration
        </Badge>
      );
    }
    if (division.active && !division.register) {
      badges.push(
        <Badge
          variant="outline"
          className="bg-green-100 text-green-800 border-green-200"
        >
          Active - Closed
        </Badge>
      );
    }
    if (division.active && division.register) {
      badges.push(
        <Badge
          variant="outline"
          className="bg-blue-100 text-blue-800 border-blue-200"
        >
          Active - Open
        </Badge>
      );
    }

    return badges;
  };

  const handleToggleActive = async () => {
    setIsUpdating(true);
    try {
      const response = await fetch(`/api/v1/divisions`, {
        method: "PATCH",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          id: division._id,
          active: !division.active,
        }),
      });

      if (!response.ok) throw new Error("Failed to update division");

      toast.success(
        `Division ${division.active ? "deactivated" : "activated"}`
      );
      router.refresh();
    } catch (error) {
      toast.error("Failed to update division status");
    } finally {
      setIsUpdating(false);
    }
  };

  const handleToggleRegister = async () => {
    setIsUpdating(true);
    try {
      const response = await fetch(`/api/v1/divisions`, {
        method: "PATCH",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          id: division._id,
          register: !division.register,
        }),
      });

      if (!response.ok) throw new Error("Failed to update division");

      toast.success(`Registration ${division.register ? "closed" : "opened"}`);
      router.refresh();
    } catch (error) {
      toast.error("Failed to update registration status");
    } finally {
      setIsUpdating(false);
    }
  };

  return (
    <Card className="hover:shadow-lg transition-shadow">
      <CardHeader className="pb-3">
        <div className="flex items-start justify-between">
          <div className="space-y-1 flex-1">
            <div className="flex items-center gap-2">{getStatusBadge()}</div>
            <Link href={`/admin/league/divisions/${division._id}`}>
              <h3 className="font-semibold text-lg leading-tight hover:underline">
                {division.divisionName}
              </h3>
            </Link>
          </div>
          <DropdownMenu>
            <DropdownMenuTrigger asChild>
              <Button variant="ghost" size="icon" disabled={isUpdating}>
                <MoreVertical className="h-4 w-4" />
              </Button>
            </DropdownMenuTrigger>
            <DropdownMenuContent align="end">
              <DropdownMenuItem
                onClick={() =>
                  router.push(`/admin/league/divisions/${division._id}/edit`)
                }
              >
                <Pencil className="mr-2 h-4 w-4" />
                Edit Division
              </DropdownMenuItem>
              <DropdownMenuSeparator />
              <DropdownMenuItem onClick={handleToggleActive}>
                <Power className="mr-2 h-4 w-4" />
                {division.active ? "Deactivate" : "Activate"}
              </DropdownMenuItem>
              <DropdownMenuItem onClick={handleToggleRegister}>
                <UserCheck className="mr-2 h-4 w-4" />
                {division.register ? "Close Registration" : "Open Registration"}
              </DropdownMenuItem>
              <DropdownMenuSeparator />
              <DropdownMenuItem
                onClick={() =>
                  router.push(`/admin/league/teams?division=${division._id}`)
                }
              >
                <Users className="mr-2 h-4 w-4" />
                View Teams
              </DropdownMenuItem>
            </DropdownMenuContent>
          </DropdownMenu>
        </div>
      </CardHeader>

      <CardContent className="space-y-3 text-sm">
        <div className="flex items-center gap-2 text-gray-600">
          <MapPin className="h-4 w-4 flex-shrink-0" />
          <span>{division.location?.name}</span>
        </div>

        <div className="flex items-center gap-2 text-gray-600">
          <TrendingUp className="h-4 w-4 flex-shrink-0" />
          <span>Level: {division.level?.name}</span>
        </div>

        <div className="flex items-center gap-2 text-gray-600">
          <Calendar className="h-4 w-4 flex-shrink-0" />
          <span>{division.day}s</span>
        </div>

        {division.startTime && division.endTime && (
          <div className="flex items-center gap-2 text-gray-600">
            <Clock className="h-4 w-4 flex-shrink-0" />
            <span>
              {division.startTime} - {division.endTime}
            </span>
          </div>
        )}

        <div className="flex items-center gap-2 text-gray-600">
          <Users className="h-4 w-4 flex-shrink-0" />
          <span>{(division as any).teamCount || 0} teams</span>
        </div>

        {(division as any).freeAgentCounts && (
          <div className="flex items-center gap-2 text-gray-600">
            <UserCircle className="h-4 w-4 flex-shrink-0" />
            <span>
              {(division as any).freeAgentCounts.total} free agents
              {(division as any).freeAgentCounts.total > 0 && (
                <span className="text-xs text-gray-500 ml-1">
                  ({(division as any).freeAgentCounts.withTeam} with team, {(division as any).freeAgentCounts.withoutTeam} unassigned)
                </span>
              )}
            </span>
          </div>
        )}

        {division.startDate && (
          <div className="pt-2 border-t text-gray-600">
            <span className="text-xs">
              Starts: {format(new Date(division.startDate), "MMM dd, yyyy")}
            </span>
          </div>
        )}
      </CardContent>
    </Card>
  );
}


----- components\features\league\divisions\DivisionsContent.tsx -----

// src/components/features/league/divisions/DivisionsContent.tsx

/**
 * SOLID - Single Responsibility Principle (SRP)
 * Division list orchestration with tabs and filters
 */

"use client";

import { useState } from "react";
import { useRouter, useSearchParams } from "next/navigation";
import { Tabs, TabsList, TabsTrigger } from "@/components/ui/tabs";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Input } from "@/components/ui/input";
import { Search } from "lucide-react";
import { DivisionsGrid } from "./DivisionsGrid";
import { Pagination } from "@/components/common/Pagination";
import { PopulatedDivision } from "@/types/division";
import { LeanLocation } from "@/types/location";
import { LeanLevel } from "@/types/level";

interface DivisionsContentProps {
  divisions: PopulatedDivision[];
  pagination: {
    total: number;
    page: number;
    limit: number;
    totalPages: number;
  };
  locations: LeanLocation[];
  levels: LeanLevel[];
  currentTab: string;
  currentFilters: {
    location?: string;
    level?: string;
    day?: string;
    search?: string;
  };
}

export function DivisionsContent({
  divisions,
  pagination,
  locations,
  levels,
  currentTab,
  currentFilters,
}: DivisionsContentProps) {
  const router = useRouter();
  const searchParams = useSearchParams();
  const [searchValue, setSearchValue] = useState(currentFilters.search || "");

  const updateFilters = (updates: Record<string, string | undefined>, resetPage = true) => {
    const params = new URLSearchParams(searchParams.toString());

    Object.entries(updates).forEach(([key, value]) => {
      if (value) {
        params.set(key, value);
      } else {
        params.delete(key);
      }
    });

    // Reset to page 1 when filters change (but not when changing page itself)
    if (resetPage && !updates.page) {
      params.set("page", "1");
    }

    router.push(`/admin/league/divisions?${params.toString()}`);
  };

  const handleTabChange = (tab: string) => {
    updateFilters({ tab });
  };

  const handleSearch = (value: string) => {
    setSearchValue(value);
    updateFilters({ search: value || undefined });
  };
  console.log("locations", locations);
  return (
    <div className="space-y-6">
      {/* Tabs */}
      <Tabs value={currentTab} onValueChange={handleTabChange}>
        <TabsList>
          <TabsTrigger value="all">All Divisions</TabsTrigger>
          <TabsTrigger value="active">Active</TabsTrigger>
          <TabsTrigger value="inactive">Inactive</TabsTrigger>
          <TabsTrigger value="registration">Registration Open</TabsTrigger>
        </TabsList>
      </Tabs>

      {/* Filters */}
      <div className="flex flex-col sm:flex-row gap-4">
        <div className="relative flex-1">
          <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400" />
          <Input
            placeholder="Search divisions..."
            value={searchValue}
            onChange={(e) => handleSearch(e.target.value)}
            className="pl-10"
          />
        </div>

        <Select
          value={currentFilters.location || "all"}
          onValueChange={(value) =>
            updateFilters({ location: value === "all" ? undefined : value })
          }
        >
          <SelectTrigger className="w-full sm:w-[200px]">
            <SelectValue placeholder="All Locations" />
          </SelectTrigger>
          <SelectContent>
            <SelectItem value="all">All Locations</SelectItem>
            {locations.map((location) => (
              <SelectItem key={location._id} value={location._id}>
                {location.name}
              </SelectItem>
            ))}
          </SelectContent>
        </Select>

        <Select
          value={currentFilters.level || "all"}
          onValueChange={(value) =>
            updateFilters({ level: value === "all" ? undefined : value })
          }
        >
          <SelectTrigger className="w-full sm:w-[200px]">
            <SelectValue placeholder="All Levels" />
          </SelectTrigger>
          <SelectContent>
            <SelectItem value="all">All Levels</SelectItem>
            {levels.map((level) => (
              <SelectItem key={level._id} value={level._id}>
                {level.name}
              </SelectItem>
            ))}
          </SelectContent>
        </Select>

        <Select
          value={currentFilters.day || "all"}
          onValueChange={(value) =>
            updateFilters({ day: value === "all" ? undefined : value })
          }
        >
          <SelectTrigger className="w-full sm:w-[200px]">
            <SelectValue placeholder="All Days" />
          </SelectTrigger>
          <SelectContent>
            <SelectItem value="all">All Days</SelectItem>
            <SelectItem value="Monday">Monday</SelectItem>
            <SelectItem value="Tuesday">Tuesday</SelectItem>
            <SelectItem value="Wednesday">Wednesday</SelectItem>
            <SelectItem value="Thursday">Thursday</SelectItem>
            <SelectItem value="Friday">Friday</SelectItem>
            <SelectItem value="Saturday">Saturday</SelectItem>
            <SelectItem value="Sunday">Sunday</SelectItem>
          </SelectContent>
        </Select>
      </div>

      {/* Division Cards Grid */}
      <DivisionsGrid divisions={divisions} />

      {/* Pagination */}
      {pagination.totalPages > 1 && (
        <Pagination
          currentPage={pagination.page}
          totalPages={pagination.totalPages}
          total={pagination.total}
          limit={pagination.limit}
          onPageChange={(page) => updateFilters({ page: page.toString() }, false)}
        />
      )}
    </div>
  );
}


----- components\features\league\divisions\DivisionsGrid.tsx -----

// src/components/features/league/divisions/DivisionsGrid.tsx

/**
 * SOLID - Single Responsibility Principle (SRP)
 * Display divisions in responsive card grid ONLY
 */

"use client";

import { DivisionCard } from "./DivisionCard";
import { Calendar } from "lucide-react";
import { PopulatedDivision } from "@/types/division";

interface DivisionsGridProps {
  divisions: PopulatedDivision[];
}

export function DivisionsGrid({ divisions }: DivisionsGridProps) {
  if (divisions.length === 0) {
    return (
      <div className="text-center py-12 bg-white rounded-lg shadow">
        <Calendar className="mx-auto h-12 w-12 text-gray-400" />
        <h3 className="mt-4 text-lg font-medium text-gray-900">
          No divisions found
        </h3>
        <p className="mt-2 text-sm text-gray-500">
          Try adjusting your filters or create a new division.
        </p>
      </div>
    );
  }

  return (
    <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-3">
      {divisions.map((division) => (
        <DivisionCard key={division._id} division={division} />
      ))}
    </div>
  );
}


----- components\features\league\divisions\EditDivisionForm.tsx -----

// src/components/features/league/divisions/EditDivisionForm.tsx

/**
 * SOLID - Single Responsibility Principle (SRP)
 * Division edit form ONLY
 */

"use client";

import { useState, useMemo, useEffect } from "react";
import { useRouter } from "next/navigation";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { Checkbox } from "@/components/ui/checkbox";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Loader2, AlertCircle, Info, Lock } from "lucide-react";
import { toast } from "sonner";
import {
  updateDivisionSchema,
  UpdateDivisionInput,
} from "@/lib/validations/division";
import { format, subDays } from "date-fns";
import { PopulatedDivision } from "@/types/division";
import { LeanCity } from "@/types/city";
import { LeanLevel } from "@/types/level";

interface EditDivisionFormProps {
  division: PopulatedDivision; // Will be PopulatedDivision from DB
  cities: LeanCity[];
  levels: LeanLevel[];
}

export function EditDivisionForm({
  division,
  cities,
  levels,
}: EditDivisionFormProps) {
  const router = useRouter();
  const [isLoading, setIsLoading] = useState(false);
  const [selectedCity, setSelectedCity] = useState(
    typeof division.city === "object" ? division.city._id : division.city
  );
  const [selectedStartDate, setSelectedStartDate] = useState<string>(
    division.startDate ? format(new Date(division.startDate), "yyyy-MM-dd") : ""
  );
  const [conflictWarning, setConflictWarning] = useState<string | null>(null);

  const {
    register,
    handleSubmit,
    formState: { errors },
    setValue,
    watch,
  } = useForm<UpdateDivisionInput>({
    resolver: zodResolver(updateDivisionSchema),
    defaultValues: {
      id: division._id.toString(),
      divisionName: division.divisionName,
      description: division.description,
      location:
        typeof division.location === "object"
          ? division.location._id.toString()
          : division.location,
      level:
        typeof division.level === "object"
          ? division.level._id.toString()
          : division.level,
      day: division.day as
        | "Monday"
        | "Tuesday"
        | "Wednesday"
        | "Thursday"
        | "Friday"
        | "Saturday"
        | "Sunday", // Add type assertion
      startDate: division.startDate
        ? format(new Date(division.startDate), "yyyy-MM-dd")
        : undefined,
      startTime: division.startTime,
      endTime: division.endTime,
      active: division.active,
      register: division.register,
    },
  });

  const selectedLocation = watch("location");
  const selectedLevel = watch("level");
  const selectedDay = watch("day");
  const active = watch("active");
  const registerOpen = watch("register");

  // Filter locations by selected city
  const availableLocations = useMemo(() => {
    const city = cities.find((c) => c._id === selectedCity);
    return city?.locations || [];
  }, [cities, selectedCity]);

  // Calculate early bird end date
  const earlyBirdEndDate = useMemo(() => {
    if (!selectedStartDate) return null;
    const startDate = new Date(selectedStartDate);
    return subDays(startDate, 42);
  }, [selectedStartDate]);

  const onSubmit = async (data: UpdateDivisionInput) => {
    setIsLoading(true);
    setConflictWarning(null);

    try {
      const response = await fetch(`/api/v1/divisions`, {
        method: "PATCH",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(data),
      });

      const result = await response.json();

      if (!response.ok) {
        throw new Error(result.error || "Failed to update division");
      }

      // Show conflict warning if exists
      if (result.warning) {
        setConflictWarning(result.warning.message);
      }

      toast.success("Division updated successfully!");
      router.push(`/admin/league/divisions`);
      router.refresh();
    } catch (err: any) {
      toast.error(err.message || "Failed to update division");
      console.error("Update division error:", err);
    } finally {
      setIsLoading(false);
    }
  };

  const onError = (errors: any) => {
    console.log("Form validation errors:", errors);
    toast.error("Please fill in all required fields");
  };

  return (
    <form onSubmit={handleSubmit(onSubmit, onError)} className="space-y-6">
      {/* Basic Information */}
      <Card>
        <CardHeader>
          <CardTitle>Basic Information</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div>
            <Label htmlFor="divisionName">Division Name *</Label>
            <Input
              {...register("divisionName")}
              id="divisionName"
              disabled={isLoading}
            />
            {errors.divisionName && (
              <p className="text-sm text-red-600 mt-1">
                {errors.divisionName.message}
              </p>
            )}
          </div>

          <div>
            <Label htmlFor="description">Description *</Label>
            <Textarea
              {...register("description")}
              id="description"
              rows={3}
              disabled={isLoading}
            />
            {errors.description && (
              <p className="text-sm text-red-600 mt-1">
                {errors.description.message}
              </p>
            )}
          </div>
        </CardContent>
      </Card>

      {/* Location & Level */}
      <Card>
        <CardHeader>
          <CardTitle>Location & Level</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div>
            <Label htmlFor="city">City (Cannot be changed)</Label>
            <Select
              value={selectedCity}
              onValueChange={(value) => {
                setSelectedCity(value);
                // Reset location when city changes since locations are filtered by city
                setValue("location", "", { shouldValidate: false });
              }}
              disabled={isLoading}
            >
              <SelectTrigger>
                <SelectValue />
              </SelectTrigger>
              <SelectContent>
                {cities.map((city) => (
                  <SelectItem key={city._id} value={city._id}>
                    {city.cityName}, {city.region}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
          </div>

          <div>
            <Label htmlFor="location">Location *</Label>
            <Select
              value={selectedLocation}
              onValueChange={(value) =>
                setValue("location", value, { shouldValidate: true })
              }
              disabled={isLoading}
            >
              <SelectTrigger>
                <SelectValue />
              </SelectTrigger>
              <SelectContent>
                {availableLocations.map((location: any) => (
                  <SelectItem
                    key={location._id || location}
                    value={location._id || location}
                  >
                    {location.name}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
            {errors.location && (
              <p className="text-sm text-red-600 mt-1">
                {errors.location.message}
              </p>
            )}
            {conflictWarning && (
              <div className="flex items-start gap-2 mt-2 p-3 bg-yellow-50 border border-yellow-200 rounded-lg">
                <AlertCircle className="h-5 w-5 text-yellow-600 flex-shrink-0 mt-0.5" />
                <p className="text-sm text-yellow-800">{conflictWarning}</p>
              </div>
            )}
          </div>

          <div>
            <Label htmlFor="level">Skill Level *</Label>
            <Select
              value={selectedLevel}
              onValueChange={(value) =>
                setValue("level", value, { shouldValidate: true })
              }
              disabled={isLoading}
            >
              <SelectTrigger>
                <SelectValue />
              </SelectTrigger>
              <SelectContent>
                {levels.map((level: any) => (
                  <SelectItem key={level._id} value={level._id}>
                    {level.name}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
            {errors.level && (
              <p className="text-sm text-red-600 mt-1">
                {errors.level.message}
              </p>
            )}
          </div>
        </CardContent>
      </Card>

      {/* Schedule */}
      <Card>
        <CardHeader>
          <CardTitle>Schedule</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div>
            <Label htmlFor="day">Day *</Label>
            <Select
              value={selectedDay}
              onValueChange={(value) =>
                setValue("day", value as any, { shouldValidate: true })
              }
              disabled={isLoading}
            >
              <SelectTrigger>
                <SelectValue />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="Monday">Monday</SelectItem>
                <SelectItem value="Tuesday">Tuesday</SelectItem>
                <SelectItem value="Wednesday">Wednesday</SelectItem>
                <SelectItem value="Thursday">Thursday</SelectItem>
                <SelectItem value="Friday">Friday</SelectItem>
                <SelectItem value="Saturday">Saturday</SelectItem>
                <SelectItem value="Sunday">Sunday</SelectItem>
              </SelectContent>
            </Select>
            {errors.day && (
              <p className="text-sm text-red-600 mt-1">{errors.day.message}</p>
            )}
          </div>

          <div className="grid gap-4 md:grid-cols-3">
            <div>
              <Label htmlFor="startDate">Start Date</Label>
              <Input
                {...register("startDate")}
                id="startDate"
                type="date"
                disabled={isLoading}
                onChange={(e) => {
                  setSelectedStartDate(e.target.value);
                  setValue("startDate", e.target.value);
                }}
              />
            </div>

            <div>
              <Label htmlFor="startTime">Start Time</Label>
              <Input
                {...register("startTime")}
                id="startTime"
                type="time"
                disabled={isLoading}
              />
            </div>

            <div>
              <Label htmlFor="endTime">End Time</Label>
              <Input
                {...register("endTime")}
                id="endTime"
                type="time"
                disabled={isLoading}
              />
            </div>
          </div>

          {earlyBirdEndDate && (
            <div className="flex items-start gap-2 p-3 bg-blue-50 border border-blue-200 rounded-lg">
              <Info className="h-5 w-5 text-blue-600 flex-shrink-0 mt-0.5" />
              <p className="text-sm text-blue-800">
                Early bird pricing ends 42 days (6 weeks) before start date on{" "}
                <strong>{format(earlyBirdEndDate, "MMM dd, yyyy")}</strong>
              </p>
            </div>
          )}
        </CardContent>
      </Card>

      {/* Pricing (Locked) */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Lock className="h-5 w-5" />
            Pricing (Locked)
          </CardTitle>
          <p className="text-sm text-gray-600">
            Pricing cannot be changed after division creation
          </p>
        </CardHeader>
        <CardContent>
          <div className="bg-gray-50 border border-gray-200 rounded-lg p-4 space-y-3">
            <div className="grid gap-3 md:grid-cols-2">
              <div>
                <span className="text-xs text-gray-500">Early Bird</span>
                <p className="font-medium">
                  ${division.prices?.earlyBird?.amount?.toFixed(2) || "0.00"} -{" "}
                  {division.prices?.earlyBird?.name || "N/A"}
                </p>
              </div>
              <div>
                <span className="text-xs text-gray-500">Regular</span>
                <p className="font-medium">
                  ${division.prices?.regular?.amount?.toFixed(2) || "0.00"} -{" "}
                  {division.prices?.regular?.name || "N/A"}
                </p>
              </div>
              <div>
                <span className="text-xs text-gray-500">Down Payment</span>
                <p className="font-medium">
                  $
                  {division.prices?.firstInstallment?.amount?.toFixed(2) ||
                    "0.00"}{" "}
                  - {division.prices?.firstInstallment?.name || "N/A"}
                </p>
              </div>
              <div>
                <span className="text-xs text-gray-500">
                  Weekly (Early Bird)
                </span>
                <p className="font-medium">
                  ${division.prices?.installment?.amount?.toFixed(2) || "0.00"}
                  /week - {division.prices?.installment?.name || "N/A"}
                </p>
              </div>
              <div>
                <span className="text-xs text-gray-500">Weekly (Regular)</span>
                <p className="font-medium">
                  $
                  {division.prices?.regularInstallment?.amount?.toFixed(2) ||
                    "0.00"}
                  /week - {division.prices?.regularInstallment?.name || "N/A"}
                </p>
              </div>
              <div>
                <span className="text-xs text-gray-500">Free</span>
                <p className="font-medium">
                  ${division.prices?.free?.amount?.toFixed(2) || "0.00"} -{" "}
                  {division.prices?.free?.name || "N/A"}
                </p>
              </div>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Status */}
      <Card>
        <CardHeader>
          <CardTitle>Status</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="flex items-center space-x-2">
            <Checkbox
              id="active"
              checked={active}
              onCheckedChange={(checked) =>
                setValue("active", checked as boolean)
              }
              disabled={isLoading}
            />
            <label
              htmlFor="active"
              className="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
            >
              Active (Games are being played)
            </label>
          </div>

          <div className="flex items-center space-x-2">
            <Checkbox
              id="register"
              checked={registerOpen}
              onCheckedChange={(checked) =>
                setValue("register", checked as boolean)
              }
              disabled={isLoading}
            />
            <label
              htmlFor="register"
              className="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
            >
              Registration Open (Teams can join)
            </label>
          </div>
        </CardContent>
      </Card>

      {/* Submit */}
      <div className="flex gap-4">
        <Button type="submit" disabled={isLoading}>
          {isLoading ? (
            <>
              <Loader2 className="mr-2 h-4 w-4 animate-spin" />
              Updating...
            </>
          ) : (
            "Update Division"
          )}
        </Button>
        <Button
          type="button"
          variant="outline"
          onClick={() => router.back()}
          disabled={isLoading}
        >
          Cancel
        </Button>
      </div>
    </form>
  );
}


----- components\features\league\levels\CreateLevelForm.tsx -----

// src/components/features/league/levels/CreateLevelForm.tsx

/**
 * SOLID - Single Responsibility Principle (SRP)
 * Level creation form ONLY
 */

"use client";

import { useState } from "react";
import { useRouter } from "next/navigation";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Loader2 } from "lucide-react";
import { toast } from "sonner";
import { createLevelSchema, CreateLevelInput } from "@/lib/validations/level";

export function CreateLevelForm() {
  const router = useRouter();
  const [isLoading, setIsLoading] = useState(false);

  const {
    register,
    handleSubmit,
    formState: { errors },
  } = useForm<CreateLevelInput>({
    resolver: zodResolver(createLevelSchema),
  });

  const onSubmit = async (data: CreateLevelInput) => {
    setIsLoading(true);

    try {
      const response = await fetch("/api/v1/league/levels", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(data),
      });

      const result = await response.json();

      if (!response.ok) {
        throw new Error(result.error || "Failed to create level");
      }

      toast.success("Level created successfully!");
      router.push(`/admin/league/levels`);
      router.refresh();
    } catch (err: any) {
      toast.error(err.message || "Failed to create level");
      console.error("Create level error:", err);
    } finally {
      setIsLoading(false);
    }
  };

  const onError = (errors: any) => {
    console.log("Form validation errors:", errors);
    toast.error("Please fill in all required fields");
  };

  return (
    <form
      onSubmit={handleSubmit(onSubmit, onError)}
      className="space-y-6 bg-white p-6 rounded-lg shadow"
    >
      <div className="space-y-4">
        <div>
          <Label htmlFor="name">Level Name *</Label>
          <Input
            {...register("name")}
            id="name"
            placeholder="Elite / Competitive / Recreational"
            disabled={isLoading}
          />
          {errors.name && (
            <p className="text-sm text-red-600 mt-1">{errors.name.message}</p>
          )}
        </div>

        <div>
          <Label htmlFor="grade">Grade *</Label>
          <Input
            {...register("grade", { valueAsNumber: true })}
            id="grade"
            type="number"
            min="1"
            placeholder="1"
            disabled={isLoading}
          />
          {errors.grade && (
            <p className="text-sm text-red-600 mt-1">{errors.grade.message}</p>
          )}
          <p className="text-sm text-gray-500 mt-1">
            Grade 1 = Highest skill level. Each grade must be unique.
          </p>
        </div>
      </div>

      <div className="flex gap-4">
        <Button type="submit" disabled={isLoading}>
          {isLoading ? (
            <>
              <Loader2 className="mr-2 h-4 w-4 animate-spin" />
              Creating...
            </>
          ) : (
            "Create Level"
          )}
        </Button>
        <Button
          type="button"
          variant="outline"
          onClick={() => router.back()}
          disabled={isLoading}
        >
          Cancel
        </Button>
      </div>
    </form>
  );
}


----- components\features\league\levels\EditLevelDialog.tsx -----

// src/components/features/league/levels/EditLevelDialog.tsx

/**
 * SOLID - Single Responsibility Principle (SRP)
 * Edit level dialog ONLY
 */

"use client";

import { useState, useEffect } from "react";
import { useRouter } from "next/navigation";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Switch } from "@/components/ui/switch";
import { Loader2 } from "lucide-react";
import { toast } from "sonner";
import { updateLevelSchema, UpdateLevelInput } from "@/lib/validations/level";

interface Level {
  _id: string;
  name: string;
  grade: number;
  active: boolean;
}

interface EditLevelDialogProps {
  level: Level;
  open: boolean;
  onOpenChange: (open: boolean) => void;
}

export function EditLevelDialog({
  level,
  open,
  onOpenChange,
}: EditLevelDialogProps) {
  const router = useRouter();
  const [isLoading, setIsLoading] = useState(false);

  const {
    register,
    handleSubmit,
    formState: { errors },
    reset,
    watch,
    setValue,
  } = useForm<UpdateLevelInput>({
    resolver: zodResolver(updateLevelSchema),
    defaultValues: {
      id: level._id,
      name: level.name,
      grade: level.grade,
      active: level.active,
    },
  });

  useEffect(() => {
    if (open) {
      reset({
        id: level._id,
        name: level.name,
        grade: level.grade,
        active: level.active,
      });
    }
  }, [open, level, reset]);

  const activeValue = watch("active");

  const onSubmit = async (data: UpdateLevelInput) => {
    setIsLoading(true);

    try {
      const response = await fetch("/api/v1/league/levels", {
        method: "PATCH",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(data),
      });

      const result = await response.json();

      if (!response.ok) {
        throw new Error(result.error || "Failed to update level");
      }

      toast.success("Level updated successfully!");
      onOpenChange(false);
      router.refresh();
    } catch (err: any) {
      toast.error(err.message || "Failed to update level");
      console.error("Update level error:", err);
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent>
        <DialogHeader>
          <DialogTitle>Edit Level</DialogTitle>
          <DialogDescription>Update skill level information</DialogDescription>
        </DialogHeader>

        <form onSubmit={handleSubmit(onSubmit)} className="space-y-4">
          <div>
            <Label htmlFor="edit-name">Level Name *</Label>
            <Input {...register("name")} id="edit-name" disabled={isLoading} />
            {errors.name && (
              <p className="text-sm text-red-600 mt-1">{errors.name.message}</p>
            )}
          </div>

          <div>
            <Label htmlFor="edit-grade">Grade *</Label>
            <Input
              {...register("grade", { valueAsNumber: true })}
              id="edit-grade"
              type="number"
              min="1"
              disabled={isLoading}
            />
            {errors.grade && (
              <p className="text-sm text-red-600 mt-1">
                {errors.grade.message}
              </p>
            )}
            <p className="text-sm text-gray-500 mt-1">
              Grade 1 = Highest skill level. Each grade must be unique.
            </p>
          </div>

          <div className="flex items-center justify-between p-4 border rounded-lg">
            <div className="space-y-0.5">
              <Label htmlFor="edit-active">Active Status</Label>
              <p className="text-sm text-gray-500">
                Only active levels are shown when creating divisions
              </p>
            </div>
            <Switch
              id="edit-active"
              checked={activeValue}
              onCheckedChange={(checked) => setValue("active", checked)}
              disabled={isLoading}
            />
          </div>

          <div className="flex gap-4 justify-end">
            <Button
              type="button"
              variant="outline"
              onClick={() => onOpenChange(false)}
              disabled={isLoading}
            >
              Cancel
            </Button>
            <Button type="submit" disabled={isLoading}>
              {isLoading ? (
                <>
                  <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                  Saving...
                </>
              ) : (
                "Save Changes"
              )}
            </Button>
          </div>
        </form>
      </DialogContent>
    </Dialog>
  );
}


----- components\features\league\levels\LevelsContent.tsx -----

// src/components/features/league/levels/LevelsContent.tsx

/**
 * SOLID - Single Responsibility Principle (SRP)
 * Levels content with tabs ONLY
 */

"use client";

import { useEffect, useState } from "react";
import { useRouter, useSearchParams } from "next/navigation";
import { Tabs, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Button } from "@/components/ui/button";
import { Plus } from "lucide-react";
import Link from "next/link";
import { LevelsTable } from "./LevelsTable";

interface LevelsContentProps {
  activeFilter: string;
}

export function LevelsContent({ activeFilter }: LevelsContentProps) {
  const router = useRouter();
  const searchParams = useSearchParams();
  const [levels, setLevels] = useState<any[]>([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    fetchLevels();
  }, [activeFilter]);

  const fetchLevels = async () => {
    setLoading(true);
    try {
      const response = await fetch(
        `/api/v1/league/levels?active=${activeFilter}`
      );
      const result = await response.json();

      if (result.success) {
        setLevels(result.data || []);
      }
    } catch (error) {
      console.error("Error fetching levels:", error);
    } finally {
      setLoading(false);
    }
  };

  const handleTabChange = (value: string) => {
    const params = new URLSearchParams(searchParams);
    params.set("tab", value);
    router.push(`?${params.toString()}`);
  };

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <Tabs value={activeFilter} onValueChange={handleTabChange}>
          <TabsList>
            <TabsTrigger value="active">Active</TabsTrigger>
            <TabsTrigger value="inactive">Inactive</TabsTrigger>
            <TabsTrigger value="all">All</TabsTrigger>
          </TabsList>
        </Tabs>

        <Button asChild>
          <Link href="/admin/league/levels/new">
            <Plus className="mr-2 h-4 w-4" />
            Add Level
          </Link>
        </Button>
      </div>

      {loading ? (
        <div className="text-center py-8">
          <p className="text-sm text-gray-500">Loading levels...</p>
        </div>
      ) : (
        <LevelsTable levels={levels} onUpdate={fetchLevels} />
      )}
    </div>
  );
}


----- components\features\league\levels\LevelsTable.tsx -----

// src/components/features/league/levels/LevelsTable.tsx

/**
 * SOLID - Single Responsibility Principle (SRP)
 * Display levels table ONLY
 */

"use client";

import { useState } from "react";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { MoreHorizontal, Pencil, TrendingUp } from "lucide-react";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import { EditLevelDialog } from "./EditLevelDialog";

interface Level {
  _id: string;
  name: string;
  grade: number;
  active: boolean;
}

interface LevelsTableProps {
  levels: Level[];
  onUpdate?: () => void;
}

export function LevelsTable({ levels, onUpdate }: LevelsTableProps) {
  const [editDialogOpen, setEditDialogOpen] = useState(false);
  const [selectedLevel, setSelectedLevel] = useState<Level | null>(null);

  const handleEdit = (level: Level) => {
    setSelectedLevel(level);
    setEditDialogOpen(true);
  };

  const handleDialogClose = (open: boolean) => {
    setEditDialogOpen(open);
    if (!open && onUpdate) {
      onUpdate();
    }
  };

  const getGradeBadgeColor = (grade: number) => {
    if (grade === 1) return "bg-yellow-100 text-yellow-800 border-yellow-200";
    if (grade === 2) return "bg-blue-100 text-blue-800 border-blue-200";
    if (grade === 3) return "bg-green-100 text-green-800 border-green-200";
    return "bg-gray-100 text-gray-800 border-gray-200";
  };

  return (
    <>
      <div className="bg-white rounded-lg shadow">
        <Table>
          <TableHeader>
            <TableRow>
              <TableHead>Grade</TableHead>
              <TableHead>Level Name</TableHead>
              <TableHead>Status</TableHead>
              <TableHead>Description</TableHead>
              <TableHead className="w-[70px]"></TableHead>
            </TableRow>
          </TableHeader>
          <TableBody>
            {levels.length === 0 ? (
              <TableRow>
                <TableCell
                  colSpan={5}
                  className="text-center py-8 text-gray-500"
                >
                  No skill levels found. Create your first level to get started.
                </TableCell>
              </TableRow>
            ) : (
              levels.map((level) => (
                <TableRow key={level._id}>
                  <TableCell>
                    <Badge
                      variant="outline"
                      className={getGradeBadgeColor(level.grade)}
                    >
                      <TrendingUp className="h-3 w-3 mr-1" />
                      Grade {level.grade}
                    </Badge>
                  </TableCell>
                  <TableCell className="font-medium">{level.name}</TableCell>
                  <TableCell>
                    <Badge
                      variant="outline"
                      className={
                        level.active
                          ? "bg-green-50 text-green-700 border-green-200"
                          : "bg-gray-50 text-gray-600 border-gray-200"
                      }
                    >
                      {level.active ? "Active" : "Inactive"}
                    </Badge>
                  </TableCell>
                  <TableCell className="text-sm text-gray-600">
                    {level.grade === 1 && "Highest skill level"}
                    {level.grade === 2 && "Intermediate skill level"}
                    {level.grade === 3 && "Recreational skill level"}
                    {level.grade > 3 && "Custom skill level"}
                  </TableCell>
                  <TableCell>
                    <DropdownMenu>
                      <DropdownMenuTrigger asChild>
                        <Button variant="ghost" size="icon">
                          <MoreHorizontal className="h-4 w-4" />
                        </Button>
                      </DropdownMenuTrigger>
                      <DropdownMenuContent align="end">
                        <DropdownMenuItem onClick={() => handleEdit(level)}>
                          <Pencil className="mr-2 h-4 w-4" />
                          Edit
                        </DropdownMenuItem>
                      </DropdownMenuContent>
                    </DropdownMenu>
                  </TableCell>
                </TableRow>
              ))
            )}
          </TableBody>
        </Table>
      </div>

      {selectedLevel && (
        <EditLevelDialog
          level={selectedLevel}
          open={editDialogOpen}
          onOpenChange={handleDialogClose}
        />
      )}
    </>
  );
}


----- components\features\league\locations\CreateLocationForm.tsx -----

// src/components/features/league/locations/CreateLocationForm.tsx

/**
 * SOLID - Single Responsibility Principle (SRP)
 * Location creation form ONLY
 */

"use client";

import { useState } from "react";
import { useRouter } from "next/navigation";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Loader2 } from "lucide-react";
import { toast } from "sonner";
import {
  createLocationSchema,
  CreateLocationInput,
} from "@/lib/validations/location";

interface City {
  _id: string;
  cityName: string;
  region: string;
  country: string;
}

interface CreateLocationFormProps {
  cities: City[];
  cityId: string;
}

export function CreateLocationForm({
  cities,
  cityId,
}: CreateLocationFormProps) {
  const router = useRouter();
  const [isLoading, setIsLoading] = useState(false);

  const {
    register,
    handleSubmit,
    formState: { errors },
    setValue,
    watch,
  } = useForm<CreateLocationInput>({
    resolver: zodResolver(createLocationSchema),
  });

  const selectedCity = watch("city");

  const onSubmit = async (data: CreateLocationInput) => {
    setIsLoading(true);

    try {
      const response = await fetch("/api/v1/league/locations", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(data),
      });

      const result = await response.json();

      if (!response.ok) {
        throw new Error(result.error || "Failed to create location");
      }

      toast.success("Location created successfully!");
      router.push(`/admin/league/locations`);
      router.refresh();
    } catch (err: any) {
      toast.error(err.message || "Failed to create location");
      console.error("Create location error:", err);
    } finally {
      setIsLoading(false);
    }
  };

  const onError = (errors: any) => {
    console.log("Form validation errors:", errors);
    toast.error("Please fill in all required fields");
  };

  return (
    <form
      onSubmit={handleSubmit(onSubmit, onError)}
      className="space-y-6 bg-white p-6 rounded-lg shadow"
    >
      <div className="space-y-4">
        <div>
          <Label htmlFor="city">City *</Label>
          <Select
            value={selectedCity}
            onValueChange={(value) =>
              setValue("city", value, { shouldValidate: true })
            }
            disabled={isLoading}
          >
            <SelectTrigger>
              <SelectValue placeholder="Select city" />
            </SelectTrigger>
            <SelectContent>
              {cities.map((city) => (
                <SelectItem key={city._id} value={city._id}>
                  {city.cityName}, {city.region}
                </SelectItem>
              ))}
            </SelectContent>
          </Select>
          {errors.city && (
            <p className="text-sm text-red-600 mt-1">{errors.city.message}</p>
          )}
        </div>

        <div>
          <Label htmlFor="name">Location Name *</Label>
          <Input
            {...register("name")}
            id="name"
            placeholder="Downtown Community Center"
            disabled={isLoading}
          />
          {errors.name && (
            <p className="text-sm text-red-600 mt-1">{errors.name.message}</p>
          )}
        </div>

        <div>
          <Label htmlFor="address">Address *</Label>
          <Input
            {...register("address")}
            id="address"
            placeholder="123 Main Street, City, State 12345"
            disabled={isLoading}
          />
          {errors.address && (
            <p className="text-sm text-red-600 mt-1">
              {errors.address.message}
            </p>
          )}
        </div>

        <div className="border-t pt-4">
          <h3 className="text-sm font-medium mb-3">Coordinates (Optional)</h3>
          <div className="grid gap-4 md:grid-cols-2">
            <div>
              <Label htmlFor="latitude">Latitude</Label>
              <Input
                {...register("coordinates.latitude", {
                  valueAsNumber: true,
                  setValueAs: (v) => (v === "" ? undefined : parseFloat(v)),
                })}
                id="latitude"
                type="number"
                step="any"
                placeholder="43.6532"
                disabled={isLoading}
              />
            </div>

            <div>
              <Label htmlFor="longitude">Longitude</Label>
              <Input
                {...register("coordinates.longitude", {
                  valueAsNumber: true,
                  setValueAs: (v) => (v === "" ? undefined : parseFloat(v)),
                })}
                id="longitude"
                type="number"
                step="any"
                placeholder="-79.3832"
                disabled={isLoading}
              />
            </div>
          </div>
          <p className="text-sm text-gray-500 mt-2">
            Add coordinates for map integration (optional)
          </p>
        </div>
      </div>

      <div className="flex gap-4">
        <Button type="submit" disabled={isLoading}>
          {isLoading ? (
            <>
              <Loader2 className="mr-2 h-4 w-4 animate-spin" />
              Creating...
            </>
          ) : (
            "Create Location"
          )}
        </Button>
        <Button
          type="button"
          variant="outline"
          onClick={() => router.back()}
          disabled={isLoading}
        >
          Cancel
        </Button>
      </div>
    </form>
  );
}


----- components\features\league\locations\DeleteLocationDialog.tsx -----

// src/components/features/league/locations/DeleteLocationDialog.tsx

/**
 * SOLID - Single Responsibility Principle (SRP)
 * Delete location confirmation dialog ONLY
 */

"use client";

import { useState } from "react";
import { useRouter } from "next/navigation";
import {
  AlertDialog,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
} from "@/components/ui/alert-dialog";
import { Button } from "@/components/ui/button";
import { Loader2 } from "lucide-react";
import { toast } from "sonner";

interface Location {
  _id: string;
  name: string;
  address: string;
}

interface DeleteLocationDialogProps {
  location: Location;
  open: boolean;
  onOpenChange: (open: boolean) => void;
}

export function DeleteLocationDialog({
  location,
  open,
  onOpenChange,
}: DeleteLocationDialogProps) {
  const router = useRouter();
  const [isLoading, setIsLoading] = useState(false);

  const handleDelete = async () => {
    setIsLoading(true);

    try {
      const response = await fetch(
        `/api/v1/league/locations?id=${location._id}`,
        {
          method: "DELETE",
        }
      );

      const result = await response.json();

      if (!response.ok) {
        throw new Error(result.error || "Failed to delete location");
      }

      toast.success("Location deleted successfully");
      onOpenChange(false);
      router.refresh();
    } catch (err: any) {
      toast.error(err.message || "Failed to delete location");
      console.error("Delete location error:", err);
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <AlertDialog open={open} onOpenChange={onOpenChange}>
      <AlertDialogContent>
        <AlertDialogHeader>
          <AlertDialogTitle>Delete Location</AlertDialogTitle>
          <AlertDialogDescription>
            Are you sure you want to delete{" "}
            <span className="font-semibold">{location.name}</span>?
            <br />
            <br />
            This action cannot be undone. You can only delete locations that
            have no active divisions.
          </AlertDialogDescription>
        </AlertDialogHeader>
        <AlertDialogFooter>
          <Button
            variant="outline"
            onClick={() => onOpenChange(false)}
            disabled={isLoading}
          >
            Cancel
          </Button>
          <Button
            variant="destructive"
            onClick={handleDelete}
            disabled={isLoading}
          >
            {isLoading ? (
              <>
                <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                Deleting...
              </>
            ) : (
              "Delete Location"
            )}
          </Button>
        </AlertDialogFooter>
      </AlertDialogContent>
    </AlertDialog>
  );
}


----- components\features\league\locations\EditLocationDialog.tsx -----

// src/components/features/league/locations/EditLocationDialog.tsx

/**
 * SOLID - Single Responsibility Principle (SRP)
 * Edit location dialog ONLY
 */

"use client";

import { useState, useEffect } from "react";
import { useRouter } from "next/navigation";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Loader2 } from "lucide-react";
import { toast } from "sonner";
import {
  createLocationSchema,
  CreateLocationInput,
} from "@/lib/validations/location";

interface Location {
  _id: string;
  name: string;
  address: string;
  coordinates?: {
    latitude?: number;
    longitude?: number;
  };
}

interface City {
  _id: string;
  cityName: string;
}

interface EditLocationDialogProps {
  location: Location;
  cities: City[];
  open: boolean;
  onOpenChange: (open: boolean) => void;
}

export function EditLocationDialog({
  location,
  cities,
  open,
  onOpenChange,
}: EditLocationDialogProps) {
  const router = useRouter();
  const [isLoading, setIsLoading] = useState(false);

  const {
    register,
    handleSubmit,
    formState: { errors },
    reset,
  } = useForm<Omit<CreateLocationInput, "city">>({
    resolver: zodResolver(createLocationSchema.omit({ city: true })),
    defaultValues: {
      name: location.name,
      address: location.address,
      coordinates: location.coordinates,
    },
  });

  useEffect(() => {
    if (open) {
      reset({
        name: location.name,
        address: location.address,
        coordinates: location.coordinates,
      });
    }
  }, [open, location, reset]);

  const onSubmit = async (data: Omit<CreateLocationInput, "city">) => {
    setIsLoading(true);

    try {
      const response = await fetch("/api/v1/league/locations", {
        method: "PATCH",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          id: location._id,
          ...data,
        }),
      });

      const result = await response.json();

      if (!response.ok) {
        throw new Error(result.error || "Failed to update location");
      }

      toast.success("Location updated successfully!");
      onOpenChange(false);
      router.refresh();
    } catch (err: any) {
      toast.error(err.message || "Failed to update location");
      console.error("Update location error:", err);
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent>
        <DialogHeader>
          <DialogTitle>Edit Location</DialogTitle>
          <DialogDescription>Update location information</DialogDescription>
        </DialogHeader>

        <form onSubmit={handleSubmit(onSubmit)} className="space-y-4">
          <div>
            <Label htmlFor="edit-name">Location Name *</Label>
            <Input {...register("name")} id="edit-name" disabled={isLoading} />
            {errors.name && (
              <p className="text-sm text-red-600 mt-1">{errors.name.message}</p>
            )}
          </div>

          <div>
            <Label htmlFor="edit-address">Address *</Label>
            <Input
              {...register("address")}
              id="edit-address"
              disabled={isLoading}
            />
            {errors.address && (
              <p className="text-sm text-red-600 mt-1">
                {errors.address.message}
              </p>
            )}
          </div>

          <div className="border-t pt-4">
            <h3 className="text-sm font-medium mb-3">Coordinates (Optional)</h3>
            <div className="grid gap-4 md:grid-cols-2">
              <div>
                <Label htmlFor="edit-latitude">Latitude</Label>
                <Input
                  {...register("coordinates.latitude", {
                    valueAsNumber: true,
                    setValueAs: (v) => (v === "" ? undefined : parseFloat(v)),
                  })}
                  id="edit-latitude"
                  type="number"
                  step="any"
                  disabled={isLoading}
                />
              </div>

              <div>
                <Label htmlFor="edit-longitude">Longitude</Label>
                <Input
                  {...register("coordinates.longitude", {
                    valueAsNumber: true,
                    setValueAs: (v) => (v === "" ? undefined : parseFloat(v)),
                  })}
                  id="edit-longitude"
                  type="number"
                  step="any"
                  disabled={isLoading}
                />
              </div>
            </div>
          </div>

          <div className="flex gap-4 justify-end">
            <Button
              type="button"
              variant="outline"
              onClick={() => onOpenChange(false)}
              disabled={isLoading}
            >
              Cancel
            </Button>
            <Button type="submit" disabled={isLoading}>
              {isLoading ? (
                <>
                  <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                  Saving...
                </>
              ) : (
                "Save Changes"
              )}
            </Button>
          </div>
        </form>
      </DialogContent>
    </Dialog>
  );
}


----- components\features\league\locations\LocationsTable.tsx -----

// src/components/features/league/locations/LocationsTable.tsx

/**
 * SOLID - Single Responsibility Principle (SRP)
 * Display locations table ONLY
 */

"use client";

import { useState, useMemo } from "react";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import { Button } from "@/components/ui/button";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { MoreHorizontal, Pencil, Trash2, MapPin } from "lucide-react";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import { DeleteLocationDialog } from "./DeleteLocationDialog";
import { EditLocationDialog } from "./EditLocationDialog";

interface Location {
  _id: string;
  name: string;
  address: string;
  coordinates?: {
    latitude?: number;
    longitude?: number;
  };
}

interface City {
  _id: string;
  cityName: string;
  region: string;
  country: string;
  locations: any[];
}

interface LocationsTableProps {
  locations: Location[];
  cities: City[];
}

export function LocationsTable({ locations, cities }: LocationsTableProps) {
  const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);
  const [editDialogOpen, setEditDialogOpen] = useState(false);
  const [selectedLocation, setSelectedLocation] = useState<Location | null>(
    null
  );
  const [filterCity, setFilterCity] = useState<string>("all");

  // Create a map of location IDs to city info
  const locationCityMap = useMemo(() => {
    const map = new Map<string, { cityName: string; cityId: string }>();
    cities.forEach((city) => {
      city.locations.forEach((loc: any) => {
        map.set(loc._id || loc, {
          cityName: `${city.cityName}, ${city.region}`,
          cityId: city._id,
        });
      });
    });
    return map;
  }, [cities]);

  const filteredLocations = useMemo(() => {
    if (filterCity === "all") return locations;

    return locations.filter((location) => {
      const cityInfo = locationCityMap.get(location._id);
      return cityInfo?.cityId === filterCity;
    });
  }, [locations, filterCity, locationCityMap]);

  const handleDelete = (location: Location) => {
    setSelectedLocation(location);
    setDeleteDialogOpen(true);
  };

  const handleEdit = (location: Location) => {
    setSelectedLocation(location);
    setEditDialogOpen(true);
  };

  return (
    <>
      <div className="mb-4">
        <div className="flex items-center gap-4">
          <label className="text-sm font-medium">Filter by City:</label>
          <Select value={filterCity} onValueChange={setFilterCity}>
            <SelectTrigger className="w-64">
              <SelectValue />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="all">All Cities</SelectItem>
              {cities.map((city) => (
                <SelectItem key={city._id} value={city._id}>
                  {city.cityName}, {city.region}
                </SelectItem>
              ))}
            </SelectContent>
          </Select>
        </div>
      </div>

      <div className="bg-white rounded-lg shadow">
        <Table>
          <TableHeader>
            <TableRow>
              <TableHead>Location Name</TableHead>
              <TableHead>Address</TableHead>
              <TableHead>City</TableHead>
              <TableHead>Coordinates</TableHead>
              <TableHead className="w-[70px]"></TableHead>
            </TableRow>
          </TableHeader>
          <TableBody>
            {filteredLocations.length === 0 ? (
              <TableRow>
                <TableCell
                  colSpan={5}
                  className="text-center py-8 text-gray-500"
                >
                  No locations found. Create your first location to get started.
                </TableCell>
              </TableRow>
            ) : (
              filteredLocations.map((location) => {
                const cityInfo = locationCityMap.get(location._id);
                return (
                  <TableRow key={location._id}>
                    <TableCell className="font-medium">
                      <div className="flex items-center gap-2">
                        <MapPin className="h-4 w-4 text-gray-400" />
                        {location.name}
                      </div>
                    </TableCell>
                    <TableCell>{location.address}</TableCell>
                    <TableCell className="text-sm text-gray-600">
                      {cityInfo?.cityName || "Unknown"}
                    </TableCell>
                    <TableCell className="text-sm text-gray-600">
                      {location.coordinates?.latitude &&
                      location.coordinates?.longitude
                        ? `${location.coordinates.latitude}, ${location.coordinates.longitude}`
                        : "Not set"}
                    </TableCell>
                    <TableCell>
                      <DropdownMenu>
                        <DropdownMenuTrigger asChild>
                          <Button variant="ghost" size="icon">
                            <MoreHorizontal className="h-4 w-4" />
                          </Button>
                        </DropdownMenuTrigger>
                        <DropdownMenuContent align="end">
                          <DropdownMenuItem
                            onClick={() => handleEdit(location)}
                          >
                            <Pencil className="mr-2 h-4 w-4" />
                            Edit
                          </DropdownMenuItem>
                          <DropdownMenuItem
                            onClick={() => handleDelete(location)}
                            className="text-red-600"
                          >
                            <Trash2 className="mr-2 h-4 w-4" />
                            Delete
                          </DropdownMenuItem>
                        </DropdownMenuContent>
                      </DropdownMenu>
                    </TableCell>
                  </TableRow>
                );
              })
            )}
          </TableBody>
        </Table>
      </div>

      {selectedLocation && (
        <>
          <DeleteLocationDialog
            location={selectedLocation}
            open={deleteDialogOpen}
            onOpenChange={setDeleteDialogOpen}
          />
          <EditLocationDialog
            location={selectedLocation}
            cities={cities}
            open={editDialogOpen}
            onOpenChange={setEditDialogOpen}
          />
        </>
      )}
    </>
  );
}


----- components\features\league\players\CreatePlayerForm.tsx -----

// src/components/features/league/players/CreatePlayerForm.tsx

/**
 * SOLID - Single Responsibility Principle (SRP)
 * Player creation form ONLY
 */

"use client";

import { useState, useEffect } from "react"; // Changed: Remove useMemo, add useEffect
import { useRouter } from "next/navigation";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Loader2, Info } from "lucide-react";
import { toast } from "sonner";
import {
  CreatePlayerInput,
  createPlayerSchema,
} from "@/lib/validations/player";
import { formatTime } from "@/lib/utils/time";

interface CreatePlayerFormProps {
  cityId: string;
  cities: any[];
}

export function CreatePlayerForm({ cityId, cities }: CreatePlayerFormProps) {
  const router = useRouter();
  const [isLoading, setIsLoading] = useState(false);
  const [selectedCity, setSelectedCity] = useState(cityId);
  const [loadingDivisions, setLoadingDivisions] = useState(false);
  const [divisions, setDivisions] = useState<any[]>([]);
  const [loadingTeams, setLoadingTeams] = useState(false);
  const [teams, setTeams] = useState<any[]>([]);

  const {
    register,
    handleSubmit,
    formState: { errors },
    setValue,
    watch,
  } = useForm<CreatePlayerInput>({
    resolver: zodResolver(createPlayerSchema),
  });

  const selectedDivision = watch("division");
  const selectedTeam = watch("team");

  // Define functions before using them
  const fetchDivisions = async (cityId: string) => {
    setLoadingDivisions(true);
    try {
      const response = await fetch(
        `/api/v1/${cityId}/divisions?page=1&limit=100`
      );
      const result = await response.json();

      if (result.success) {
        setDivisions(result.data.divisions || []);
      }
    } catch (error) {
      console.error("Error fetching divisions:", error);
      setDivisions([]);
    } finally {
      setLoadingDivisions(false);
    }
  };

  const fetchTeams = async (divisionId: string) => {
    setLoadingTeams(true);
    try {
      const response = await fetch(
        `/api/v1/${selectedCity}/teams?division=${divisionId}&limit=100`
      );
      const result = await response.json();

      if (result.success) {
        setTeams(result.data.teams || []);
      }
    } catch (error) {
      console.error("Error fetching teams:", error);
      setTeams([]);
    } finally {
      setLoadingTeams(false);
    }
  };

  // Fetch divisions when city changes
  useEffect(() => {
    if (selectedCity) {
      fetchDivisions(selectedCity);
    }
  }, [selectedCity]);

  // Fetch teams when division changes
  useEffect(() => {
    if (selectedDivision) {
      fetchTeams(selectedDivision);
    } else {
      setTeams([]);
    }
  }, [selectedDivision]);

  const onSubmit = async (data: CreatePlayerInput) => {
    setIsLoading(true);

    try {
      const response = await fetch(`/api/v1/${cityId}/players`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(data),
      });

      const result = await response.json();

      if (!response.ok) {
        throw new Error(result.error || "Failed to create player");
      }

      toast.success("Player created successfully!");
      router.push(`/admin/league/players/${result.data._id}`);
      router.refresh();
    } catch (err: any) {
      toast.error(err.message || "Failed to create player");
      console.error("Create player error:", err);
    } finally {
      setIsLoading(false);
    }
  };

  const onError = (errors: any) => {
    console.log("Form validation errors:", errors);
    toast.error("Please fill in all required fields");
  };

  return (
    <form onSubmit={handleSubmit(onSubmit, onError)} className="space-y-6">
      {/* Division Assignment */}
      <Card>
        <CardHeader>
          <CardTitle>Division Assignment</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div>
            <Label htmlFor="city">City *</Label>
            <Select
              value={selectedCity}
              onValueChange={(value) => {
                setSelectedCity(value);
                setValue("division", "", { shouldValidate: false });
                setValue("team", "", { shouldValidate: false });
                setDivisions([]);
                setTeams([]);
              }}
              disabled={isLoading}
            >
              <SelectTrigger>
                <SelectValue />
              </SelectTrigger>
              <SelectContent>
                {cities.map((city) => (
                  <SelectItem key={city._id} value={city._id}>
                    {city.cityName}, {city.region}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
          </div>

          <div>
            <Label htmlFor="division">Division *</Label>
            <Select
              value={selectedDivision}
              onValueChange={(value) => {
                setValue("division", value, { shouldValidate: true });
                setValue("team", "", { shouldValidate: false });
              }}
              disabled={isLoading || loadingDivisions || divisions.length === 0}
            >
              <SelectTrigger>
                <SelectValue
                  placeholder={
                    loadingDivisions ? "Loading..." : "Select division"
                  }
                />
              </SelectTrigger>
              <SelectContent>
                {divisions.map((division: any) => (
                  <SelectItem key={division._id} value={division._id}>
                    {division.location?.name} - {division.divisionName}:{" "}
                    {division.day} {formatTime(division.startTime)} -{" "}
                    {formatTime(division.endTime)}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
            {errors.division && (
              <p className="text-sm text-red-600 mt-1">
                {errors.division.message}
              </p>
            )}
          </div>

          <div>
            <Label htmlFor="team">Team (Optional)</Label>
            <Select
              value={selectedTeam}
              onValueChange={(value) =>
                setValue("team", value === "none" ? undefined : value)
              }
              disabled={isLoading || loadingTeams || !selectedDivision}
            >
              <SelectTrigger>
                <SelectValue
                  placeholder={
                    loadingTeams ? "Loading..." : "Free agent (no team)"
                  }
                />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="none">Free agent (no team)</SelectItem>
                {teams.map((team: any) => (
                  <SelectItem key={team._id} value={team._id}>
                    {team.teamName}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
            <p className="text-sm text-gray-500 mt-1">
              Leave as free agent or assign to a team in the selected division
            </p>
          </div>
        </CardContent>
      </Card>

      {/* Player Information */}
      <Card>
        <CardHeader>
          <CardTitle>Player Information</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div>
            <Label htmlFor="playerName">Player Name *</Label>
            <Input
              {...register("playerName")}
              id="playerName"
              placeholder="John Doe"
              disabled={isLoading}
            />
            {errors.playerName && (
              <p className="text-sm text-red-600 mt-1">
                {errors.playerName.message}
              </p>
            )}
          </div>

          <div>
            <Label htmlFor="instagram">Instagram (Optional)</Label>
            <Input
              {...register("instagram")}
              id="instagram"
              placeholder="@username"
              disabled={isLoading}
            />
          </div>
        </CardContent>
      </Card>

      {/* Jersey Information */}
      <Card>
        <CardHeader>
          <CardTitle>Jersey Information</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="grid gap-4 md:grid-cols-3">
            <div>
              <Label htmlFor="jerseyNumber">Jersey Number</Label>
              <Input
                {...register("jerseyNumber", { valueAsNumber: true })}
                id="jerseyNumber"
                type="number"
                min="0"
                max="99"
                placeholder="23"
                disabled={isLoading}
              />
              {errors.jerseyNumber && (
                <p className="text-sm text-red-600 mt-1">
                  {errors.jerseyNumber.message}
                </p>
              )}
            </div>

            <div>
              <Label htmlFor="jerseySize">Jersey Size</Label>
              <Select
                onValueChange={(value) =>
                  setValue(
                    "jerseySize",
                    value as "S" | "M" | "L" | "XL" | "2XL"
                  )
                }
                disabled={isLoading}
              >
                <SelectTrigger>
                  <SelectValue placeholder="Select size" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="S">Small</SelectItem>
                  <SelectItem value="M">Medium</SelectItem>
                  <SelectItem value="L">Large</SelectItem>
                  <SelectItem value="XL">XL</SelectItem>
                  <SelectItem value="2XL">2XL</SelectItem>
                </SelectContent>
              </Select>
            </div>

            <div>
              <Label htmlFor="jerseyName">Jersey Name</Label>
              <Input
                {...register("jerseyName")}
                id="jerseyName"
                placeholder="DOE"
                disabled={isLoading}
              />
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Info Message */}
      <div className="flex items-start gap-2 p-4 bg-blue-50 border border-blue-200 rounded-lg">
        <Info className="h-5 w-5 text-blue-600 flex-shrink-0 mt-0.5" />
        <div className="text-sm text-blue-800">
          <p className="font-medium">After creating this player:</p>
          <ul className="list-disc list-inside mt-1 space-y-1">
            <li>Set up payment in Payment Management section</li>
            <li>Optionally link to an existing User account</li>
            <li>Player stats will be tracked automatically during games</li>
          </ul>
        </div>
      </div>

      {/* Submit */}
      <div className="flex gap-4">
        <Button type="submit" disabled={isLoading}>
          {isLoading ? (
            <>
              <Loader2 className="mr-2 h-4 w-4 animate-spin" />
              Creating...
            </>
          ) : (
            "Create Player"
          )}
        </Button>
        <Button
          type="button"
          variant="outline"
          onClick={() => router.back()}
          disabled={isLoading}
        >
          Cancel
        </Button>
      </div>
    </form>
  );
}


----- components\features\league\players\EditPlayerForm.tsx -----

// src/components/features/league/players/EditPlayerForm.tsx

/**
 * SOLID - Single Responsibility Principle (SRP)
 * Player edit form ONLY
 */

"use client";

import { useState, useMemo, useEffect } from "react";
import { useRouter } from "next/navigation";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Loader2, AlertCircle } from "lucide-react";
import { toast } from "sonner";
import {
  updatePlayerSchema,
  UpdatePlayerInput,
} from "@/lib/validations/player";
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
} from "@/components/ui/alert-dialog";
import { UserSearchSelect } from "./UserSearchSelect";

interface EditPlayerFormProps {
  player: any;
  cityId: string;
  cities: any[];
}

export function EditPlayerForm({
  player,
  cityId,
  cities,
}: EditPlayerFormProps) {
  const router = useRouter();
  const [isLoading, setIsLoading] = useState(false);
  const [selectedCity, setSelectedCity] = useState(
    typeof player.division?.city === "object"
      ? player.division.city._id
      : player.division?.city || cityId
  );
  const [loadingDivisions, setLoadingDivisions] = useState(false);
  const [divisions, setDivisions] = useState<any[]>([]);
  const [loadingTeams, setLoadingTeams] = useState(false);
  const [teams, setTeams] = useState<any[]>([]);
  const [showDivisionChangeWarning, setShowDivisionChangeWarning] =
    useState(false);
  const [pendingDivisionChange, setPendingDivisionChange] = useState<
    string | null
  >(null);

  const {
    register,
    handleSubmit,
    formState: { errors },
    setValue,
    watch,
  } = useForm<UpdatePlayerInput>({
    resolver: zodResolver(updatePlayerSchema),
    defaultValues: {
      id: player._id.toString(),
      playerName: player.playerName,
      division:
        typeof player.division === "object"
          ? player.division._id.toString()
          : player.division,
      team: player.team?._id?.toString() || null,
      jerseyNumber: player.jerseyNumber || null,
      jerseySize: player.jerseySize || null,
      jerseyName: player.jerseyName || null,
      instagram: player.instagram || null,
      user: player.user?._id?.toString() || null,
    },
  });

  const selectedDivision = watch("division");
  const selectedTeam = watch("team");

  // Fetch divisions when city changes
  useEffect(() => {
    if (selectedCity) {
      fetchDivisions(selectedCity);
    }
  }, [selectedCity]);

  // Fetch teams when division changes
  useEffect(() => {
    if (selectedDivision) {
      fetchTeams(selectedDivision);
    } else {
      setTeams([]);
    }
  }, [selectedDivision]);

  const fetchDivisions = async (cityId: string) => {
    setLoadingDivisions(true);
    try {
      const response = await fetch(
        `/api/v1/${cityId}/divisions?page=1&limit=100`
      );
      const result = await response.json();

      if (result.success) {
        setDivisions(result.data.divisions || []);
      }
    } catch (error) {
      console.error("Error fetching divisions:", error);
      setDivisions([]);
    } finally {
      setLoadingDivisions(false);
    }
  };

  const fetchTeams = async (divisionId: string) => {
    setLoadingTeams(true);
    try {
      const response = await fetch(
        `/api/v1/${selectedCity}/teams?division=${divisionId}&limit=100`
      );
      const result = await response.json();

      if (result.success) {
        setTeams(result.data.teams || []);
      }
    } catch (error) {
      console.error("Error fetching teams:", error);
      setTeams([]);
    } finally {
      setLoadingTeams(false);
    }
  };

  const handleDivisionChange = (newDivisionId: string) => {
    const newDivision = divisions.find((d) => d._id === newDivisionId);
    const currentDivision = divisions.find((d) => d._id === selectedDivision);

    // Check if moving to different city
    if (
      newDivision &&
      currentDivision &&
      newDivision.city._id !== currentDivision.city._id
    ) {
      setPendingDivisionChange(newDivisionId);
      setShowDivisionChangeWarning(true);
    } else {
      setValue("division", newDivisionId, { shouldValidate: true });
      setValue("team", null, { shouldValidate: false });
    }
  };

  const confirmDivisionChange = () => {
    if (pendingDivisionChange) {
      setValue("division", pendingDivisionChange, { shouldValidate: true });
      setValue("team", null, { shouldValidate: false });
      const newDivision = divisions.find(
        (d) => d._id === pendingDivisionChange
      );
      if (newDivision) {
        setSelectedCity(newDivision.city._id);
      }
    }
    setShowDivisionChangeWarning(false);
    setPendingDivisionChange(null);
  };

  const onSubmit = async (data: UpdatePlayerInput) => {
    setIsLoading(true);

    try {
      const response = await fetch(`/api/v1/${cityId}/players/${player._id}`, {
        method: "PATCH",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(data),
      });

      const result = await response.json();

      if (!response.ok) {
        throw new Error(result.error || "Failed to update player");
      }

      toast.success("Player updated successfully!");
      router.push(`/admin/league/players/${player._id}`);
      router.refresh();
    } catch (err: any) {
      toast.error(err.message || "Failed to update player");
      console.error("Update player error:", err);
    } finally {
      setIsLoading(false);
    }
  };

  const onError = (errors: any) => {
    console.log("Form validation errors:", errors);
    toast.error("Please check the form for errors");
  };

  return (
    <>
      <form onSubmit={handleSubmit(onSubmit, onError)} className="space-y-6">
        {/* Division Assignment */}
        <Card>
          <CardHeader>
            <CardTitle>Division & Team</CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            <div>
              <Label htmlFor="division">Division *</Label>
              <Select
                value={selectedDivision}
                onValueChange={handleDivisionChange}
                disabled={isLoading || loadingDivisions}
              >
                <SelectTrigger>
                  <SelectValue
                    placeholder={
                      loadingDivisions ? "Loading..." : "Select division"
                    }
                  />
                </SelectTrigger>
                <SelectContent>
                  {divisions.map((division: any) => (
                    <SelectItem key={division._id} value={division._id}>
                      {division.divisionName} ({division.city?.cityName})
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
              {errors.division && (
                <p className="text-sm text-red-600 mt-1">
                  {errors.division.message}
                </p>
              )}
            </div>

            <div>
              <Label htmlFor="team">Team</Label>
              <Select
                value={selectedTeam || "none"}
                onValueChange={(value) =>
                  setValue("team", value === "none" ? null : value)
                }
                disabled={isLoading || loadingTeams || !selectedDivision}
              >
                <SelectTrigger>
                  <SelectValue
                    placeholder={loadingTeams ? "Loading..." : "Free agent"}
                  />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="none">Free agent (no team)</SelectItem>
                  {teams.map((team: any) => (
                    <SelectItem key={team._id} value={team._id}>
                      {team.teamName}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>
          </CardContent>
        </Card>

        {/* Player Information */}
        <Card>
          <CardHeader>
            <CardTitle>Player Information</CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            <div>
              <Label htmlFor="playerName">Player Name *</Label>
              <Input
                {...register("playerName")}
                id="playerName"
                disabled={isLoading}
              />
              {errors.playerName && (
                <p className="text-sm text-red-600 mt-1">
                  {errors.playerName.message}
                </p>
              )}
            </div>

            <div>
              <Label htmlFor="instagram">Instagram</Label>
              <Input
                {...register("instagram")}
                id="instagram"
                placeholder="@username"
                disabled={isLoading}
              />
            </div>
          </CardContent>
        </Card>

        {/* Jersey Information */}
        <Card>
          <CardHeader>
            <CardTitle>Jersey Information</CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="grid gap-4 md:grid-cols-3">
              <div>
                <Label htmlFor="jerseyNumber">Jersey Number</Label>
                <Input
                  {...register("jerseyNumber", { valueAsNumber: true })}
                  id="jerseyNumber"
                  type="number"
                  min="0"
                  max="99"
                  disabled={isLoading}
                />
                {errors.jerseyNumber && (
                  <p className="text-sm text-red-600 mt-1">
                    {errors.jerseyNumber.message}
                  </p>
                )}
              </div>

              <div>
                <Label htmlFor="jerseySize">Jersey Size</Label>
                <Select
                  value={watch("jerseySize") || "none"}
                  onValueChange={(value) =>
                    setValue(
                      "jerseySize",
                      value === "none"
                        ? null
                        : (value as "S" | "M" | "L" | "XL" | "2XL")
                    )
                  }
                  disabled={isLoading}
                >
                  <SelectTrigger>
                    <SelectValue placeholder="Select size" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="none">Not specified</SelectItem>
                    <SelectItem value="S">Small</SelectItem>
                    <SelectItem value="M">Medium</SelectItem>
                    <SelectItem value="L">Large</SelectItem>
                    <SelectItem value="XL">XL</SelectItem>
                    <SelectItem value="2XL">2XL</SelectItem>
                  </SelectContent>
                </Select>
              </div>

              <div>
                <Label htmlFor="jerseyName">Jersey Name</Label>
                <Input
                  {...register("jerseyName")}
                  id="jerseyName"
                  placeholder="DOE"
                  disabled={isLoading}
                />
              </div>
            </div>
          </CardContent>
        </Card>

        {/* User Account Link */}
        <Card>
          <CardHeader>
            <CardTitle>User Account</CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            {watch("user") ? (
              <div>
                <div className="flex items-center justify-between p-4 bg-green-50 border border-green-200 rounded-lg">
                  <div>
                    <p className="text-sm font-medium text-green-900">
                      Linked to User Account
                    </p>
                    <p className="text-sm text-green-700">
                      {(player.user as any)?.email || "User email"}
                    </p>
                  </div>
                  <Button
                    type="button"
                    variant="outline"
                    size="sm"
                    onClick={() => setValue("user", null)}
                    disabled={isLoading}
                  >
                    Unlink
                  </Button>
                </div>
                <p className="text-xs text-gray-500 mt-2">
                  Unlinking will not delete the user account, only remove the
                  connection to this player profile.
                </p>
              </div>
            ) : (
              <div>
                <div className="p-4 bg-gray-50 border border-gray-200 rounded-lg">
                  <p className="text-sm text-gray-500">
                    No user account linked to this player
                  </p>
                </div>
                <div className="mt-3">
                  <Label htmlFor="userLink">Link to Existing User</Label>
                  <UserSearchSelect
                    onSelectUser={(userId) => setValue("user", userId)}
                    disabled={isLoading}
                    cityId={cityId}
                  />
                  <p className="text-xs text-gray-500 mt-2">
                    Search by email to link this player to an existing user
                    account
                  </p>
                </div>
              </div>
            )}
          </CardContent>
        </Card>
        {/* Submit */}
        <div className="flex gap-4">
          <Button type="submit" disabled={isLoading}>
            {isLoading ? (
              <>
                <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                Updating...
              </>
            ) : (
              "Update Player"
            )}
          </Button>
          <Button
            type="button"
            variant="outline"
            onClick={() => router.back()}
            disabled={isLoading}
          >
            Cancel
          </Button>
        </div>
      </form>

      {/* Division Change Warning Dialog */}
      <AlertDialog
        open={showDivisionChangeWarning}
        onOpenChange={setShowDivisionChangeWarning}
      >
        <AlertDialogContent>
          <AlertDialogHeader>
            <AlertDialogTitle>Change Player Division?</AlertDialogTitle>
            <AlertDialogDescription>
              {pendingDivisionChange && (
                <>
                  You are moving this player from{" "}
                  <strong>
                    {
                      divisions.find((d) => d._id === selectedDivision)?.city
                        ?.cityName
                    }
                  </strong>{" "}
                  to{" "}
                  <strong>
                    {
                      divisions.find((d) => d._id === pendingDivisionChange)
                        ?.city?.cityName
                    }
                  </strong>
                  . The player will be removed from their current team and
                  become a free agent.
                </>
              )}
            </AlertDialogDescription>
          </AlertDialogHeader>
          <AlertDialogFooter>
            <AlertDialogCancel onClick={() => setPendingDivisionChange(null)}>
              Cancel
            </AlertDialogCancel>
            <AlertDialogAction onClick={confirmDivisionChange}>
              Confirm Change
            </AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>
    </>
  );
}


----- components\features\league\players\PlayerCard.tsx -----

// src/components/features/league/players/PlayerCard.tsx

/**
 * SOLID - Single Responsibility Principle (SRP)
 * Single player card display ONLY
 */

"use client";

import { useRouter } from "next/navigation";
import Link from "next/link";
import { Card, CardContent, CardHeader } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import { Trophy, Mail, User, MoreVertical, Pencil, MapPin, Users } from "lucide-react";

interface PlayerCardProps {
  player: any;
  cityId: string;
}

export function PlayerCard({ player }: PlayerCardProps) {
  const router = useRouter();

  return (
    <Card className="hover:shadow-lg transition-shadow">
      <CardHeader className="pb-3">
        <div className="flex items-start justify-between">
          <div className="space-y-1 flex-1">
            <div className="flex items-center gap-2 flex-wrap">
              {player.freeAgent && player.team && (
                <Badge
                  variant="outline"
                  className="bg-green-100 text-green-800 border-green-200"
                >
                  <Users className="h-3 w-3 mr-1" />
                  Free Agent • {player.team.teamName}
                </Badge>
              )}
              {player.freeAgent && !player.team && (
                <Badge
                  variant="outline"
                  className="bg-yellow-100 text-yellow-800 border-yellow-200"
                >
                  Free Agent • Unassigned
                </Badge>
              )}
              {!player.freeAgent && !player.team && (
                <Badge
                  variant="outline"
                  className="bg-amber-100 text-amber-800 border-amber-200"
                >
                  Unassigned
                </Badge>
              )}
              {!player.user && (
                <Badge
                  variant="outline"
                  className="bg-gray-100 text-gray-800 border-gray-200"
                >
                  No Account
                </Badge>
              )}
            </div>
            <Link href={`/admin/league/players/${player._id}`}>
              <h3 className="font-semibold text-lg leading-tight hover:underline">
                {player.playerName}
              </h3>
            </Link>
            {player.jerseyNumber && (
              <p className="text-sm text-gray-500">#{player.jerseyNumber}</p>
            )}
          </div>
          <DropdownMenu>
            <DropdownMenuTrigger asChild>
              <Button variant="ghost" size="icon">
                <MoreVertical className="h-4 w-4" />
              </Button>
            </DropdownMenuTrigger>
            <DropdownMenuContent align="end">
              <DropdownMenuItem
                onClick={() =>
                  router.push(`/admin/league/players/${player._id}/edit`)
                }
              >
                <Pencil className="mr-2 h-4 w-4" />
                Edit Player
              </DropdownMenuItem>
            </DropdownMenuContent>
          </DropdownMenu>
        </div>
      </CardHeader>

      <CardContent className="space-y-3 text-sm">
        <div className="flex items-center gap-2 text-gray-600">
          <Trophy className="h-4 w-4 flex-shrink-0" />
          <span className="truncate">
            {player.team?.teamName || "Free Agent"}
            {player.division?.divisionName && ` - ${player.division.divisionName}`}
          </span>
        </div>

        <div className="flex items-center gap-2 text-gray-600">
          <MapPin className="h-4 w-4 flex-shrink-0" />
          <span className="truncate">
            {player.division?.location?.name || "N/A"}
            {player.division?.city?.cityName && `, ${player.division.city.cityName}`}
          </span>
        </div>

        {player.user && (
          <div className="flex items-center gap-2 text-gray-600">
            <Mail className="h-4 w-4 flex-shrink-0" />
            <span className="truncate">{player.user.email}</span>
          </div>
        )}

        {player.jerseySize && (
          <div className="pt-2 border-t">
            <span className="text-xs text-gray-500">Jersey: </span>
            <span className="text-xs font-medium">
              {player.jerseySize}
              {player.jerseyName && ` - ${player.jerseyName}`}
            </span>
          </div>
        )}
      </CardContent>
    </Card>
  );
}


----- components\features\league\players\PlayersContent.tsx -----

// src/components/features/league/players/PlayersContent.tsx

/**
 * SOLID - Single Responsibility Principle (SRP)
 * Player list orchestration with filters
 */

"use client";

import { useEffect, useMemo, useState } from "react";
import { useRouter, useSearchParams } from "next/navigation";
import { Tabs, TabsList, TabsTrigger } from "@/components/ui/tabs";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Input } from "@/components/ui/input";
import { Checkbox } from "@/components/ui/checkbox";
import { Label } from "@/components/ui/label";
import { Filter, Search, X } from "lucide-react";
import { PlayersGrid } from "./PlayersGrid";
import { Pagination } from "@/components/common/Pagination";
import { debounce } from "lodash";
import { Button } from "@/components/ui/button";

interface PlayersContentProps {
  players: any[];
  allPlayers: any[];
  pagination: {
    total: number;
    page: number;
    limit: number;
    totalPages: number;
  };
  locations: any[];
  divisions: any[];
  cityId: string;
  currentTab: "active" | "inactive" | "all";
  currentFilters: {
    division?: string;
    location?: string;
    team?: string;
    freeAgents?: boolean;
    hasUser?: boolean;
    search?: string;
  };
}

export function PlayersContent({
  players,
  allPlayers,
  pagination,
  locations,
  divisions,
  cityId,
  currentTab,
  currentFilters,
}: PlayersContentProps) {
  const router = useRouter();
  const searchParams = useSearchParams();
  const [searchValue, setSearchValue] = useState(currentFilters.search || "");

  // Calculate overall stats (unfiltered)
  const stats = useMemo(() => {
    const total = allPlayers.length;
    const withTeam = allPlayers.filter((p) => p.team).length;
    const freeAgents = allPlayers.filter((p) => !p.team).length;
    const withAccount = allPlayers.filter((p) => p.user).length;
    const withoutAccount = allPlayers.filter((p) => !p.user).length;
    return { total, withTeam, freeAgents, withAccount, withoutAccount };
  }, [allPlayers]);

  const updateFilters = (updates: Record<string, string | undefined>) => {
    const params = new URLSearchParams(searchParams.toString());

    Object.entries(updates).forEach(([key, value]) => {
      if (value) {
        params.set(key, value);
      } else {
        params.delete(key);
      }
    });

    if (!updates.page) {
      params.set("page", "1");
    }

    router.push(`/admin/league/players?${params.toString()}`);
  };

  const handleTabChange = (tab: string) => {
    updateFilters({ tab });
  };

  // create a stable debounced version of updateFilters
  const debouncedUpdateFilters = useMemo(
    () =>
      debounce((value: string) => {
        updateFilters({ search: value || undefined });
      }, 500), // 500ms delay
    [searchParams] // dependencies
  );

  const handleSearch = (value: string) => {
    setSearchValue(value);
    debouncedUpdateFilters(value);
  };

  useEffect(() => {
    return () => {
      debouncedUpdateFilters.cancel();
    };
  }, [debouncedUpdateFilters]);

  // Sort locations by name
  const sortedLocations = useMemo(() => {
    return [...locations].sort((a, b) =>
      (a.name || '').localeCompare(b.name || '')
    );
  }, [locations]);

  // Filter and sort divisions by location name
  const filteredDivisions = useMemo(() => {
    let filtered = divisions;
    if (currentFilters.location && currentFilters.location !== "all") {
      filtered = divisions.filter((d) => d.location?._id === currentFilters.location);
    }
    return filtered.sort((a, b) =>
      (a.location?.name || '').localeCompare(b.location?.name || '')
    );
  }, [divisions, currentFilters.location]);

  const clearAllFilters = () => {
    router.push(`/admin/league/players`);
    setSearchValue("");
  };

  const hasActiveFilters =
    currentFilters.location ||
    currentFilters.division ||
    currentFilters.team ||
    currentFilters.freeAgents ||
    currentFilters.hasUser !== undefined ||
    currentFilters.search;

  console.log("Paginated players (should be max 12):", players.length, players);
  console.log("All players for stats:", allPlayers.length);

  return (
    <div className="space-y-6">
      {/* Tabs */}
      <Tabs value={currentTab} onValueChange={handleTabChange}>
        <TabsList>
          <TabsTrigger value="active">Active</TabsTrigger>
          <TabsTrigger value="inactive">Inactive</TabsTrigger>
          <TabsTrigger value="all">All</TabsTrigger>
        </TabsList>
      </Tabs>

      {/* Stats Overview */}
      <div className="bg-white rounded-lg shadow p-6">
        <div>
          <h2 className="text-lg font-semibold text-gray-900">
            Active Player Overview
          </h2>
          <p className="text-sm text-gray-600 mt-1">
            {stats.total} total players • {stats.withTeam} assigned to teams •{" "}
            {stats.freeAgents} free agents • {stats.withAccount} with user
            accounts • {stats.withoutAccount} without user accounts
          </p>
        </div>
      </div>

      {/* Filters */}
      <div className="flex flex-col gap-4">
        <div className="flex flex-col sm:flex-row gap-4">
          <div className="relative flex-1">
            <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400" />
            <Input
              placeholder="Search players..."
              value={searchValue}
              onChange={(e) => handleSearch(e.target.value)}
              className="pl-10"
            />
          </div>

          <Select
            value={currentFilters.location || "all"}
            onValueChange={(value) =>
              updateFilters({
                location: value === "all" ? undefined : value,
                division: undefined,
              })
            }
          >
            <SelectTrigger className="w-full sm:w-[200px]">
              <SelectValue placeholder="All Locations" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="all">All Locations</SelectItem>
              {sortedLocations.map((location: any) => (
                <SelectItem key={location._id} value={location._id}>
                  {location.name}
                </SelectItem>
              ))}
            </SelectContent>
          </Select>
          <Select
            value={currentFilters.division || "all"}
            onValueChange={(value) =>
              updateFilters({ division: value === "all" ? undefined : value })
            }
          >
            <SelectTrigger className="w-full sm:w-[200px]">
              <SelectValue placeholder="All Divisions" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="all">All Divisions</SelectItem>
              {filteredDivisions.map((division: any) => (
                <SelectItem key={division._id} value={division._id}>
                  {division.location?.name} - {division.divisionName}
                </SelectItem>
              ))}
            </SelectContent>
          </Select>
          <div className="flex items-end">
            <Button
              variant="outline"
              onClick={clearAllFilters}
              disabled={!hasActiveFilters}
              className="w-full"
            >
              <X className="h-4 w-4 mr-2" />
              Clear Filters
            </Button>
          </div>
        </div>

        <div className="flex flex-wrap gap-4">
          <div className="flex items-center space-x-2">
            <Checkbox
              id="freeAgents"
              checked={currentFilters.freeAgents}
              onCheckedChange={(checked) =>
                updateFilters({ freeAgents: checked ? "true" : undefined })
              }
            />
            <Label htmlFor="freeAgents" className="text-sm cursor-pointer">
              Free agents only
            </Label>
          </div>

          <div className="flex items-center space-x-2">
            <Checkbox
              id="hasUser"
              checked={currentFilters.hasUser}
              onCheckedChange={(checked) =>
                updateFilters({ hasUser: checked ? "true" : undefined })
              }
            />
            <Label htmlFor="hasUser" className="text-sm cursor-pointer">
              Has user account
            </Label>
          </div>
        </div>
        {/* Active Filters */}
        {hasActiveFilters && (
          <div className="flex items-center gap-2 pt-2 border-t">
            <span className="text-sm text-gray-500">Active Filters:</span>
            <div className="flex flex-wrap gap-2">
              {currentFilters.location && (
                <span className="inline-flex items-center gap-1 px-2 py-1 bg-blue-100 text-blue-800 rounded text-xs">
                  <Filter className="h-3 w-3" />
                  Location
                </span>
              )}
              {currentFilters.division && (
                <span className="inline-flex items-center gap-1 px-2 py-1 bg-blue-100 text-blue-800 rounded text-xs">
                  <Filter className="h-3 w-3" />
                  Division
                </span>
              )}
              {currentFilters.freeAgents && (
                <span className="inline-flex items-center gap-1 px-2 py-1 bg-blue-100 text-blue-800 rounded text-xs">
                  <Filter className="h-3 w-3" />
                  Free Agents
                </span>
              )}
              {currentFilters.hasUser !== undefined && (
                <span className="inline-flex items-center gap-1 px-2 py-1 bg-blue-100 text-blue-800 rounded text-xs">
                  <Filter className="h-3 w-3" />
                  {currentFilters.hasUser ? "Has Account" : "No Account"}
                </span>
              )}
              {currentFilters.search && (
                <span className="inline-flex items-center gap-1 px-2 py-1 bg-blue-100 text-blue-800 rounded text-xs">
                  <Search className="h-3 w-3" />
                  {currentFilters.search}
                </span>
              )}
            </div>
          </div>
        )}
      </div>

      {/* Players Grid */}
      <PlayersGrid players={players} cityId={cityId} />

      {/* Pagination */}
      <Pagination
        currentPage={pagination.page}
        totalPages={pagination.totalPages}
        total={pagination.total} // or your total items variable
        limit={pagination.limit} // number of items per page
        onPageChange={(page) => updateFilters({ page: page.toString() })}
        label="players" // optional, "divisions", "teams", etc.
      />
    </div>
  );
}


----- components\features\league\players\PlayersGrid.tsx -----

// src/components/features/league/players/PlayersGrid.tsx

/**
 * SOLID - Single Responsibility Principle (SRP)
 * Display players in responsive card grid ONLY
 */

"use client";

import { Users } from "lucide-react";
import { PlayerCard } from "./PlayerCard";

interface PlayersGridProps {
  players: any[];
  cityId: string;
}

export function PlayersGrid({ players, cityId }: PlayersGridProps) {
  if (players.length === 0) {
    return (
      <div className="text-center py-12 bg-white rounded-lg shadow">
        <Users className="mx-auto h-12 w-12 text-gray-400" />
        <h3 className="mt-4 text-lg font-medium text-gray-900">
          No players found
        </h3>
        <p className="mt-2 text-sm text-gray-500">
          Try adjusting your filters or create a new player.
        </p>
      </div>
    );
  }

  return (
    <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-3">
      {players.map((player) => (
        <PlayerCard key={player._id} player={player} cityId={cityId} />
      ))}
    </div>
  );
}


----- components\features\league\players\UserSearchSelect.tsx -----

// src/components/features/league/players/UserSearchSelect.tsx

/**
 * SOLID - Single Responsibility Principle (SRP)
 * User search and select component ONLY
 */

"use client";

import { useState, useEffect } from "react";
import {
  Command,
  CommandEmpty,
  CommandGroup,
  CommandInput,
  CommandItem,
  CommandList,
} from "@/components/ui/command";
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/ui/popover";
import { Button } from "@/components/ui/button";
import { Check, ChevronsUpDown } from "lucide-react";
import { cn } from "@/lib/utils";

interface UserSearchSelectProps {
  onSelectUser: (userId: string) => void;
  disabled?: boolean;
  cityId: string;
}

export function UserSearchSelect({
  onSelectUser,
  disabled,
  cityId,
}: UserSearchSelectProps) {
  const [open, setOpen] = useState(false);
  const [users, setUsers] = useState<any[]>([]);
  const [loading, setLoading] = useState(false);
  const [searchQuery, setSearchQuery] = useState("");
  const [selectedUser, setSelectedUser] = useState<any>(null);

  useEffect(() => {
    if (searchQuery.length >= 2) {
      fetchUsers(searchQuery);
    } else {
      setUsers([]);
    }
  }, [searchQuery]);

  const fetchUsers = async (query: string) => {
    setLoading(true);
    try {
      const response = await fetch(
        `/api/v1/${cityId}/users/search?q=${encodeURIComponent(query)}`
      );
      const result = await response.json();

      if (result.success) {
        setUsers(result.data || []);
      }
    } catch (error) {
      console.error("Error fetching users:", error);
      setUsers([]);
    } finally {
      setLoading(false);
    }
  };

  const handleSelect = (user: any) => {
    setSelectedUser(user);
    onSelectUser(user._id);
    setOpen(false);
  };

  return (
    <Popover open={open} onOpenChange={setOpen}>
      <PopoverTrigger asChild>
        <Button
          variant="outline"
          role="combobox"
          aria-expanded={open}
          className="w-full justify-between"
          disabled={disabled}
        >
          {selectedUser ? selectedUser.email : "Search by email..."}
          <ChevronsUpDown className="ml-2 h-4 w-4 shrink-0 opacity-50" />
        </Button>
      </PopoverTrigger>
      <PopoverContent className="w-full p-0">
        <Command>
          <CommandInput
            placeholder="Type email to search..."
            value={searchQuery}
            onValueChange={setSearchQuery}
          />
          <CommandList>
            {loading && <CommandEmpty>Searching...</CommandEmpty>}
            {!loading && searchQuery.length < 2 && (
              <CommandEmpty>Type at least 2 characters to search</CommandEmpty>
            )}
            {!loading && searchQuery.length >= 2 && users.length === 0 && (
              <CommandEmpty>No users found</CommandEmpty>
            )}
            {users.length > 0 && (
              <CommandGroup>
                {users.map((user) => (
                  <CommandItem
                    key={user._id}
                    value={user._id}
                    onSelect={() => handleSelect(user)}
                  >
                    <Check
                      className={cn(
                        "mr-2 h-4 w-4",
                        selectedUser?._id === user._id
                          ? "opacity-100"
                          : "opacity-0"
                      )}
                    />
                    <div>
                      <p className="font-medium">{user.email}</p>
                      <p className="text-sm text-gray-500">{user.name}</p>
                    </div>
                  </CommandItem>
                ))}
              </CommandGroup>
            )}
          </CommandList>
        </Command>
      </PopoverContent>
    </Popover>
  );
}


----- components\features\league\prices\CreatePriceForm.tsx -----

// src/components/features/league/prices/CreatePriceForm.tsx

/**
 * SOLID - Single Responsibility Principle (SRP)
 * Price creation form ONLY
 */

"use client";

import { useState } from "react";
import { useRouter } from "next/navigation";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Loader2 } from "lucide-react";
import { toast } from "sonner";
import { createPriceSchema, CreatePriceInput } from "@/lib/validations/price";

interface CreatePriceFormProps {
  cityId: string;
}

export function CreatePriceForm({ cityId }: CreatePriceFormProps) {
  const router = useRouter();
  const [isLoading, setIsLoading] = useState(false);

  const {
    register,
    handleSubmit,
    formState: { errors },
    setValue,
    watch,
  } = useForm<CreatePriceInput>({
    resolver: zodResolver(createPriceSchema),
  });

  const selectedType = watch("type");

  const onSubmit = async (data: CreatePriceInput) => {
    setIsLoading(true);

    try {
      const response = await fetch("/api/v1/league/prices", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(data),
      });

      const result = await response.json();

      if (!response.ok) {
        throw new Error(result.error || "Failed to create price");
      }

      toast.success("Price created successfully!");
      router.push(`/admin/league/prices`);
      router.refresh();
    } catch (err: any) {
      toast.error(err.message || "Failed to create price");
      console.error("Create price error:", err);
    } finally {
      setIsLoading(false);
    }
  };

  const onError = (errors: any) => {
    console.log("Form validation errors:", errors);
    toast.error("Please fill in all required fields");
  };

  return (
    <form
      onSubmit={handleSubmit(onSubmit, onError)}
      className="space-y-6 bg-white p-6 rounded-lg shadow"
    >
      <div className="space-y-4">
        <div>
          <Label htmlFor="name">Display Name *</Label>
          <Input
            {...register("name")}
            id="name"
            placeholder="Winter 2025 Early Bird"
            disabled={isLoading}
          />
          {errors.name && (
            <p className="text-sm text-red-600 mt-1">{errors.name.message}</p>
          )}
        </div>

        <div>
          <Label htmlFor="priceId">Stripe Price ID *</Label>
          <Input
            {...register("priceId")}
            id="priceId"
            placeholder="price_1234567890abcdef"
            disabled={isLoading}
          />
          {errors.priceId && (
            <p className="text-sm text-red-600 mt-1">
              {errors.priceId.message}
            </p>
          )}
          <p className="text-sm text-gray-500 mt-1">
            Must start with "price_" from your Stripe account
          </p>
        </div>

        <div>
          <Label htmlFor="amount">Amount (USD) *</Label>
          <Input
            {...register("amount", { valueAsNumber: true })}
            id="amount"
            type="number"
            step="0.01"
            min="0"
            placeholder="150.00"
            disabled={isLoading}
          />
          {errors.amount && (
            <p className="text-sm text-red-600 mt-1">{errors.amount.message}</p>
          )}
        </div>

        <div>
          <Label htmlFor="type">Price Type *</Label>
          <Select
            value={selectedType}
            onValueChange={(value) =>
              setValue("type", value as any, { shouldValidate: true })
            }
            disabled={isLoading}
          >
            <SelectTrigger>
              <SelectValue placeholder="Select price type" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="earlyBird">
                Early Bird (Single Payment)
              </SelectItem>
              <SelectItem value="regular">Regular (Single Payment)</SelectItem>
              <SelectItem value="firstInstallment">
                First Installment (Down Payment)
              </SelectItem>
              <SelectItem value="installment">
                Installment - Early Bird (Weekly)
              </SelectItem>
              <SelectItem value="regularInstallment">
                Installment - Regular (Weekly)
              </SelectItem>
              <SelectItem value="free">Free</SelectItem>
            </SelectContent>
          </Select>
          {errors.type && (
            <p className="text-sm text-red-600 mt-1">{errors.type.message}</p>
          )}
        </div>
      </div>

      <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-4">
        <p className="text-sm text-yellow-800">
          <strong>Note:</strong> Prices are permanent once created and cannot be
          edited or deleted.
        </p>
      </div>

      <div className="flex gap-4">
        <Button type="submit" disabled={isLoading}>
          {isLoading ? (
            <>
              <Loader2 className="mr-2 h-4 w-4 animate-spin" />
              Creating...
            </>
          ) : (
            "Create Price"
          )}
        </Button>
        <Button
          type="button"
          variant="outline"
          onClick={() => router.back()}
          disabled={isLoading}
        >
          Cancel
        </Button>
      </div>
    </form>
  );
}


----- components\features\league\prices\PricesGrid.tsx -----

// src/components/features/league/prices/PricesGrid.tsx

/**
 * SOLID - Single Responsibility Principle (SRP)
 * Display prices in responsive card grid ONLY
 */

"use client";

import { useMemo } from "react";
import { Badge } from "@/components/ui/badge";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { DollarSign, Tag } from "lucide-react";

interface Price {
  _id: string;
  name: string;
  priceId: string;
  amount: number;
  type:
    | "earlyBird"
    | "regular"
    | "installment"
    | "regularInstallment"
    | "firstInstallment"
    | "free";
}

interface PricesGridProps {
  prices: Price[];
}

export function PricesGrid({ prices }: PricesGridProps) {
  const groupedPrices = useMemo(() => {
    return {
      earlyBird: prices.filter((p) => p.type === "earlyBird"),
      regular: prices.filter((p) => p.type === "regular"),
      installment: prices.filter((p) => p.type === "installment"),
      regularInstallment: prices.filter((p) => p.type === "regularInstallment"),
      firstInstallment: prices.filter((p) => p.type === "firstInstallment"),
      free: prices.filter((p) => p.type === "free"),
    };
  }, [prices]);

  const getTypeBadge = (type: string) => {
    const badges = {
      earlyBird: {
        label: "Early Bird",
        className: "bg-blue-100 text-blue-800 border-blue-200",
      },
      regular: {
        label: "Regular",
        className: "bg-gray-100 text-gray-800 border-gray-200",
      },
      installment: {
        label: "Installment (EB)",
        className: "bg-green-100 text-green-800 border-green-200",
      },
      regularInstallment: {
        label: "Installment (Reg)",
        className: "bg-orange-100 text-orange-800 border-orange-200",
      },
      firstInstallment: {
        label: "Down Payment",
        className: "bg-purple-100 text-purple-800 border-purple-200",
      },
      free: {
        label: "Free",
        className: "bg-yellow-100 text-yellow-800 border-yellow-200",
      },
    };
    return badges[type as keyof typeof badges] || badges.regular;
  };

  if (prices.length === 0) {
    return (
      <div className="text-center py-12 bg-white rounded-lg shadow">
        <DollarSign className="mx-auto h-12 w-12 text-gray-400" />
        <h3 className="mt-4 text-lg font-medium text-gray-900">
          No prices yet
        </h3>
        <p className="mt-2 text-sm text-gray-500">
          Get started by creating your first price from your Stripe account.
        </p>
      </div>
    );
  }

  const renderPriceSection = (title: string, prices: Price[]) => {
    if (prices.length === 0) return null;

    return (
      <div key={title} className="space-y-3">
        <h3 className="text-lg font-semibold text-gray-900">{title}</h3>
        <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
          {prices.map((price) => {
            const badge = getTypeBadge(price.type);
            return (
              <Card key={price._id}>
                <CardHeader className="pb-3">
                  <div className="flex items-start justify-between">
                    <CardTitle className="text-base">{price.name}</CardTitle>
                    <Badge variant="outline" className={badge.className}>
                      {badge.label}
                    </Badge>
                  </div>
                </CardHeader>
                <CardContent className="space-y-2">
                  <div className="flex items-center justify-between">
                    <span className="text-2xl font-bold text-gray-900">
                      ${price.amount.toFixed(2)}
                    </span>
                  </div>
                  <div className="text-xs text-gray-500 flex items-center gap-1">
                    <Tag className="h-3 w-3" />
                    {price.priceId}
                  </div>
                </CardContent>
              </Card>
            );
          })}
        </div>
      </div>
    );
  };

  return (
    <div className="space-y-8">
      {renderPriceSection("Single Payment", [
        ...groupedPrices.earlyBird,
        ...groupedPrices.regular,
      ])}
      {renderPriceSection("Installment Payments", [
        ...groupedPrices.firstInstallment,
        ...groupedPrices.installment,
        ...groupedPrices.regularInstallment,
      ])}
      {renderPriceSection("Free", groupedPrices.free)}
    </div>
  );
}


----- components\features\league\teams\AddPlayerDialog.tsx -----

// src/components/features/league/teams/AddPlayerDialog.tsx

/**
 * SOLID - Single Responsibility Principle (SRP)
 * Add player dialog ONLY
 */

"use client";

import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { ScrollArea } from "@/components/ui/scroll-area";
import { UserPlus } from "lucide-react";

interface AddPlayerDialogProps {
  open: boolean;
  onOpenChange: (open: boolean) => void;
  freeAgents: any[];
  onAddPlayer: (playerId: string) => void;
  isProcessing: boolean;
}

export function AddPlayerDialog({
  open,
  onOpenChange,
  freeAgents,
  onAddPlayer,
  isProcessing,
}: AddPlayerDialogProps) {
  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="max-w-md">
        <DialogHeader>
          <DialogTitle>Add Player to Roster</DialogTitle>
          <DialogDescription>
            Select a free agent from this division to add to the team
          </DialogDescription>
        </DialogHeader>

        <ScrollArea className="max-h-[400px] pr-4">
          <div className="space-y-2">
            {freeAgents.map((player) => (
              <div
                key={player._id}
                className="flex items-center justify-between p-3 rounded-lg border hover:bg-gray-50"
              >
                <div className="flex items-center gap-3">
                  <div className="flex items-center justify-center w-10 h-10 rounded-full bg-gray-100 font-bold text-gray-600">
                    {player.jerseyNumber || "—"}
                  </div>
                  <div>
                    <p className="font-medium">{player.playerName}</p>
                  </div>
                </div>
                <Button
                  size="sm"
                  onClick={() => onAddPlayer(player._id)}
                  disabled={isProcessing}
                >
                  <UserPlus className="h-4 w-4 mr-2" />
                  Add
                </Button>
              </div>
            ))}
          </div>
        </ScrollArea>
      </DialogContent>
    </Dialog>
  );
}


----- components\features\league\teams\CreateTeamForm.tsx -----

// src/components/features/league/teams/CreateTeamForm.tsx

/**
 * SOLID - Single Responsibility Principle (SRP)
 * Team creation form ONLY
 */

"use client";

import { useState, useMemo } from "react";
import { useRouter } from "next/navigation";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Loader2, Info } from "lucide-react";
import { toast } from "sonner";
import { createTeamSchema, CreateTeamInput } from "@/lib/validations/team";

interface CreateTeamFormProps {
  cities: any[];
}

export function CreateTeamForm({ cities }: CreateTeamFormProps) {
  const router = useRouter();
  const [isLoading, setIsLoading] = useState(false);
  const [selectedCity, setSelectedCity] = useState("");
  const [loadingDivisions, setLoadingDivisions] = useState(false);
  const [divisions, setDivisions] = useState<any[]>([]);

  const {
    register,
    handleSubmit,
    formState: { errors },
    setValue,
    watch,
  } = useForm<CreateTeamInput>({
    resolver: zodResolver(createTeamSchema),
    defaultValues: {
      city: cities[0]?._id || "",
    },
  });

  const selectedLocation = watch("location");
  const selectedDivision = watch("division");

  // Filter locations by selected city
  const availableLocations = useMemo(() => {
    const city = cities.find((c) => c._id === selectedCity);
    return city?.locations || [];
  }, [cities, selectedCity]);

  // Fetch divisions when location changes (active/register only)
  const fetchDivisions = async (locationId?: string) => {
    if (!locationId) {
      setDivisions([]);
      return;
    }

    setLoadingDivisions(true);
    try {
      const params = new URLSearchParams({
        page: "1",
        limit: "100",
        location: locationId,
        tab: "active", // Only fetch active or register divisions
      });

      const response = await fetch(`/api/v1/divisions?${params.toString()}`);
      const result = await response.json();

      if (result.success) {
        setDivisions(result.data.divisions || []);
      }
    } catch (error) {
      console.error("Error fetching divisions:", error);
      setDivisions([]);
    } finally {
      setLoadingDivisions(false);
    }
  };

  // Fetch divisions when location changes
  useMemo(() => {
    if (selectedLocation) {
      fetchDivisions(selectedLocation);
    } else {
      setDivisions([]);
    }
  }, [selectedLocation]);

  const onSubmit = async (data: CreateTeamInput) => {
    setIsLoading(true);

    try {
      const response = await fetch(`/api/v1/teams`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(data),
      });

      const result = await response.json();

      if (!response.ok) {
        throw new Error(result.error || "Failed to create team");
      }

      toast.success("Team created successfully!");
      router.push(`/admin/league/teams/${result.data._id}`);
      router.refresh();
    } catch (err: any) {
      toast.error(err.message || "Failed to create team");
      console.error("Create team error:", err);
    } finally {
      setIsLoading(false);
    }
  };

  const onError = (errors: any) => {
    console.log("Form validation errors:", errors);
    toast.error("Please fill in all required fields");
  };

  return (
    <form onSubmit={handleSubmit(onSubmit, onError)} className="space-y-6">
      {/* Location Selection */}
      <Card>
        <CardHeader>
          <CardTitle>Location</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div>
            <Label htmlFor="city">City *</Label>
            <Select
              value={selectedCity}
              onValueChange={(value) => {
                setSelectedCity(value);
                setValue("city", value, { shouldValidate: true });
                setValue("location", "", { shouldValidate: false });
                setValue("division", "", { shouldValidate: false });
                setDivisions([]);
              }}
              disabled={isLoading}
            >
              <SelectTrigger>
                <SelectValue placeholder={"Select city"} />
              </SelectTrigger>
              <SelectContent>
                {cities.map((city) => (
                  <SelectItem key={city._id} value={city._id}>
                    {city.cityName}, {city.region}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
            {errors.city && (
              <p className="text-sm text-red-600 mt-1">{errors.city.message}</p>
            )}
          </div>

          <div>
            <Label htmlFor="location">Location *</Label>
            <Select
              value={selectedLocation}
              onValueChange={(value) => {
                setValue("location", value, { shouldValidate: true });
                setValue("division", "", { shouldValidate: false });
              }}
              disabled={
                isLoading || !selectedCity || availableLocations.length === 0
              }
            >
              <SelectTrigger>
                <SelectValue
                  placeholder={
                    !selectedCity
                      ? "Select city first"
                      : availableLocations.length === 0
                      ? "No locations available"
                      : "Select location"
                  }
                />
              </SelectTrigger>
              <SelectContent>
                {availableLocations.map((location: any) => (
                  <SelectItem
                    key={location._id || location}
                    value={location._id || location}
                  >
                    {location.name || "Location"}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
            {errors.location && (
              <p className="text-sm text-red-600 mt-1">
                {errors.location.message}
              </p>
            )}
            {!selectedCity && (
              <p className="text-sm text-gray-500 mt-1">
                Please select a city first to see available locations.
              </p>
            )}
          </div>

          <div>
            <Label htmlFor="division">Division *</Label>
            <Select
              value={selectedDivision}
              onValueChange={(value) =>
                setValue("division", value, { shouldValidate: true })
              }
              disabled={
                isLoading ||
                loadingDivisions ||
                !selectedLocation ||
                divisions.length === 0
              }
            >
              <SelectTrigger>
                <SelectValue
                  placeholder={
                    !selectedLocation
                      ? "Select location first"
                      : loadingDivisions
                      ? "Loading divisions..."
                      : divisions.length === 0
                      ? "No active divisions available"
                      : "Select division"
                  }
                />
              </SelectTrigger>
              <SelectContent>
                {divisions.map((division: any) => (
                  <SelectItem key={division._id} value={division._id}>
                    {division.divisionName}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
            {errors.division && (
              <p className="text-sm text-red-600 mt-1">
                {errors.division.message}
              </p>
            )}
            {!selectedLocation && (
              <p className="text-sm text-gray-500 mt-1">
                Please select a location first to see available divisions.
              </p>
            )}
            {!loadingDivisions &&
              divisions.length === 0 &&
              selectedLocation && (
                <p className="text-sm text-gray-500 mt-1">
                  No active divisions available for this location.
                </p>
              )}
          </div>
        </CardContent>
      </Card>

      {/* Team Information */}
      <Card>
        <CardHeader>
          <CardTitle>Team Information</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div>
            <Label htmlFor="teamName">Team Name *</Label>
            <Input
              {...register("teamName")}
              id="teamName"
              placeholder="Toronto Raptors"
              disabled={isLoading}
            />
            {errors.teamName && (
              <p className="text-sm text-red-600 mt-1">
                {errors.teamName.message}
              </p>
            )}
          </div>

          <div>
            <Label htmlFor="teamNameShort">Team Name Short *</Label>
            <Input
              {...register("teamNameShort")}
              id="teamNameShort"
              placeholder="Raptors"
              disabled={isLoading}
            />
            {errors.teamNameShort && (
              <p className="text-sm text-red-600 mt-1">
                {errors.teamNameShort.message}
              </p>
            )}
          </div>

          <div>
            <Label htmlFor="teamCode">Team Code *</Label>
            <Input
              {...register("teamCode")}
              id="teamCode"
              placeholder="aBcd123"
              disabled={isLoading}
              onChange={(e) => {
                setValue("teamCode", e.target.value);
              }}
            />
            {errors.teamCode && (
              <p className="text-sm text-red-600 mt-1">
                {errors.teamCode.message}
              </p>
            )}
          </div>
        </CardContent>
      </Card>

      {/* Info Message */}
      <div className="flex items-start gap-2 p-4 bg-blue-50 border border-blue-200 rounded-lg">
        <Info className="h-5 w-5 text-blue-600 flex-shrink-0 mt-0.5" />
        <div className="text-sm text-blue-800">
          <p className="font-medium">What happens after creation:</p>
          <ul className="list-disc list-inside mt-1 space-y-1">
            <li>Add players to the roster</li>
            <li>Assign a team captain from the roster</li>
            <li>Configure jersey colors and design (in Jersey Management)</li>
            <li>Stats will update automatically as games are played</li>
          </ul>
        </div>
      </div>

      {/* Submit */}
      <div className="flex gap-4">
        <Button type="submit" disabled={isLoading}>
          {isLoading ? (
            <>
              <Loader2 className="mr-2 h-4 w-4 animate-spin" />
              Creating...
            </>
          ) : (
            "Create Team"
          )}
        </Button>
        <Button
          type="button"
          variant="outline"
          onClick={() => router.back()}
          disabled={isLoading}
        >
          Cancel
        </Button>
      </div>
    </form>
  );
}


----- components\features\league\teams\DeletePlayerDialog.tsx -----

// src/components/features/league/teams/DeletePlayerDialog.tsx

/**
 * SOLID - Single Responsibility Principle (SRP)
 * Delete player confirmation dialog ONLY
 */

"use client";

import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
} from "@/components/ui/alert-dialog";
import { AlertCircle } from "lucide-react";

interface DeletePlayerDialogProps {
  open: boolean;
  onOpenChange: (open: boolean) => void;
  player: any;
  onDelete: (playerId: string) => void;
  isProcessing: boolean;
}

export function DeletePlayerDialog({
  open,
  onOpenChange,
  player,
  onDelete,
  isProcessing,
}: DeletePlayerDialogProps) {
  if (!player) return null;

  return (
    <AlertDialog open={open} onOpenChange={onOpenChange}>
      <AlertDialogContent>
        <AlertDialogHeader>
          <AlertDialogTitle>Delete Player?</AlertDialogTitle>
          <AlertDialogDescription>
            Are you sure you want to permanently delete{" "}
            <strong>{player.playerName}</strong>? This action cannot be undone.
            {player.user && (
              <div className="flex items-start gap-2 mt-3 p-3 bg-red-50 border border-red-200 rounded-lg">
                <AlertCircle className="h-5 w-5 text-red-600 flex-shrink-0 mt-0.5" />
                <p className="text-sm text-red-800">
                  This player has a user account linked. You cannot delete
                  players with linked accounts. Please make them a free agent
                  instead.
                </p>
              </div>
            )}
          </AlertDialogDescription>
        </AlertDialogHeader>
        <AlertDialogFooter>
          <AlertDialogCancel>Cancel</AlertDialogCancel>
          <AlertDialogAction
            onClick={() => onDelete(player._id)}
            disabled={isProcessing || player.user}
            className="bg-red-600 hover:bg-red-700"
          >
            {isProcessing ? "Deleting..." : "Delete Player"}
          </AlertDialogAction>
        </AlertDialogFooter>
      </AlertDialogContent>
    </AlertDialog>
  );
}


----- components\features\league\teams\EditTeamForm.tsx -----

// src/components/features/league/teams/EditTeamForm.tsx

/**
 * SOLID - Single Responsibility Principle (SRP)
 * Team edit form ONLY
 */

"use client";

import { useState, useMemo, useEffect } from "react";
import { useRouter } from "next/navigation";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Loader2, AlertCircle } from "lucide-react";
import { toast } from "sonner";
import { updateTeamSchema, UpdateTeamInput } from "@/lib/validations/team";
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
} from "@/components/ui/alert-dialog";

interface EditTeamFormProps {
  team: any;
  cityId: string;
  cities: any[];
}

export function EditTeamForm({ team, cityId, cities }: EditTeamFormProps) {
  const router = useRouter();
  const [isLoading, setIsLoading] = useState(false);
  const [selectedCity, setSelectedCity] = useState(
    typeof team.division?.city === "object"
      ? team.division.city._id
      : team.division?.city || cityId
  );
  const [loadingDivisions, setLoadingDivisions] = useState(false);
  const [divisions, setDivisions] = useState<any[]>([]);
  const [showMoveWarning, setShowMoveWarning] = useState(false);
  const [pendingDivisionChange, setPendingDivisionChange] = useState<
    string | null
  >(null);

  const {
    register,
    handleSubmit,
    formState: { errors },
    setValue,
    watch,
  } = useForm<UpdateTeamInput>({
    resolver: zodResolver(updateTeamSchema),
    defaultValues: {
      id: team._id.toString(),
      teamName: team.teamName,
      teamNameShort: team.teamNameShort,
      teamCode: team.teamCode,
      division:
        typeof team.division === "object"
          ? team.division._id.toString()
          : team.division,
      teamCaptain: team.teamCaptain?._id?.toString() || null,
    },
  });

  const selectedDivision = watch("division");
  const selectedCaptain = watch("teamCaptain");

  // Filter locations by selected city
  const availableLocations = useMemo(() => {
    const city = cities.find((c) => c._id === selectedCity);
    return city?.locations || [];
  }, [cities, selectedCity]);

  // Fetch divisions when city changes
  const fetchDivisions = async (cityId: string) => {
    setLoadingDivisions(true);
    try {
      const response = await fetch(
        `/api/v1/divisions?page=1&limit=100&tab=active`
      );
      const result = await response.json();

      if (result.success) {
        setDivisions(result.data.divisions || []);
      }
    } catch (error) {
      console.error("Error fetching divisions:", error);
      setDivisions([]);
    } finally {
      setLoadingDivisions(false);
    }
  };

  // Fetch divisions when city changes
  useEffect(() => {
    if (selectedCity) {
      fetchDivisions(selectedCity);
    }
  }, [selectedCity]);

  const handleDivisionChange = (newDivisionId: string) => {
    const newDivision = divisions.find((d) => d._id === newDivisionId);
    const currentDivision = divisions.find((d) => d._id === selectedDivision);

    // Check if moving to different city
    if (
      newDivision &&
      currentDivision &&
      newDivision.city._id !== currentDivision.city._id
    ) {
      setPendingDivisionChange(newDivisionId);
      setShowMoveWarning(true);
    } else {
      setValue("division", newDivisionId, { shouldValidate: true });
    }
  };

  const confirmDivisionChange = () => {
    if (pendingDivisionChange) {
      setValue("division", pendingDivisionChange, { shouldValidate: true });
      const newDivision = divisions.find(
        (d) => d._id === pendingDivisionChange
      );
      if (newDivision) {
        setSelectedCity(newDivision.city._id);
      }
    }
    setShowMoveWarning(false);
    setPendingDivisionChange(null);
  };

  const onSubmit = async (data: UpdateTeamInput) => {
    setIsLoading(true);

    try {
      const response = await fetch(`/api/v1/teams`, {
        method: "PATCH",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(data),
      });

      const result = await response.json();

      if (!response.ok) {
        throw new Error(result.error || "Failed to update team");
      }

      toast.success("Team updated successfully!");
      router.push(`/admin/league/teams/${team._id}`);
      router.refresh();
    } catch (err: any) {
      toast.error(err.message || "Failed to update team");
      console.error("Update team error:", err);
    } finally {
      setIsLoading(false);
    }
  };

  const onError = (errors: any) => {
    console.log("Form validation errors:", errors);
    toast.error("Please fill in all required fields");
  };

  return (
    <>
      <form onSubmit={handleSubmit(onSubmit, onError)} className="space-y-6">
        {/* Division */}
        <Card>
          <CardHeader>
            <CardTitle>Division</CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            <div>
              <Label htmlFor="division">Division *</Label>
              <Select
                value={selectedDivision}
                onValueChange={handleDivisionChange}
                disabled={isLoading || loadingDivisions}
              >
                <SelectTrigger>
                  <SelectValue
                    placeholder={
                      loadingDivisions ? "Loading..." : "Select division"
                    }
                  />
                </SelectTrigger>
                <SelectContent>
                  {divisions.map((division: any) => (
                    <SelectItem key={division._id} value={division._id}>
                      {division.location.name} - {division.divisionName}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
              {errors.division && (
                <p className="text-sm text-red-600 mt-1">
                  {errors.division.message}
                </p>
              )}
            </div>
          </CardContent>
        </Card>

        {/* Team Information */}
        <Card>
          <CardHeader>
            <CardTitle>Team Information</CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            <div>
              <Label htmlFor="teamName">Team Name *</Label>
              <Input
                {...register("teamName")}
                id="teamName"
                disabled={isLoading}
              />
              {errors.teamName && (
                <p className="text-sm text-red-600 mt-1">
                  {errors.teamName.message}
                </p>
              )}
            </div>

            <div>
              <Label htmlFor="teamNameShort">Team Name Short *</Label>
              <Input
                {...register("teamNameShort")}
                id="teamNameShort"
                disabled={isLoading}
              />
              {errors.teamNameShort && (
                <p className="text-sm text-red-600 mt-1">
                  {errors.teamNameShort.message}
                </p>
              )}
            </div>

            <div>
              <Label htmlFor="teamCode">Team Code *</Label>
              <Input
                {...register("teamCode")}
                id="teamCode"
                disabled={isLoading}
                onChange={(e) => {
                  const upper = e.target.value.toUpperCase();
                  setValue("teamCode", upper);
                }}
              />
              {errors.teamCode && (
                <p className="text-sm text-red-600 mt-1">
                  {errors.teamCode.message}
                </p>
              )}
              <p className="text-sm text-gray-500 mt-1">
                Must be unique within the division
              </p>
            </div>
          </CardContent>
        </Card>

        {/* Team Captain */}
        <Card>
          <CardHeader>
            <CardTitle>Team Captain</CardTitle>
          </CardHeader>
          <CardContent>
            {team.players && team.players.length > 0 ? (
              <div>
                <Label htmlFor="teamCaptain">Select Captain</Label>
                <Select
                  value={selectedCaptain || "none"}
                  onValueChange={(value) =>
                    setValue("teamCaptain", value === "none" ? null : value)
                  }
                  disabled={isLoading}
                >
                  <SelectTrigger>
                    <SelectValue placeholder="No captain assigned" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="none">No captain</SelectItem>
                    {team.players.map((player: any) => (
                      <SelectItem
                        key={player._id}
                        value={player._id.toString()}
                      >
                        {player.playerName}
                        {player.jerseyNumber && ` (#${player.jerseyNumber})`}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
                {!selectedCaptain && (
                  <div className="flex items-start gap-2 mt-2 p-3 bg-yellow-50 border border-yellow-200 rounded-lg">
                    <AlertCircle className="h-5 w-5 text-yellow-600 flex-shrink-0 mt-0.5" />
                    <p className="text-sm text-yellow-800">
                      No captain assigned. Consider assigning a team captain.
                    </p>
                  </div>
                )}
              </div>
            ) : (
              <div className="text-sm text-gray-500 p-4 bg-gray-50 rounded-lg">
                Add players to the roster before assigning a captain.
              </div>
            )}
          </CardContent>
        </Card>

        {/* Submit */}
        <div className="flex gap-4">
          <Button type="submit" disabled={isLoading}>
            {isLoading ? (
              <>
                <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                Updating...
              </>
            ) : (
              "Update Team"
            )}
          </Button>
          <Button
            type="button"
            variant="outline"
            onClick={() => router.back()}
            disabled={isLoading}
          >
            Cancel
          </Button>
        </div>
      </form>

      {/* Move Team Warning Dialog */}
      <AlertDialog open={showMoveWarning} onOpenChange={setShowMoveWarning}>
        <AlertDialogContent>
          <AlertDialogHeader>
            <AlertDialogTitle>Move Team to Different City?</AlertDialogTitle>
            <AlertDialogDescription>
              {pendingDivisionChange && (
                <>
                  You are moving this team from{" "}
                  <strong>
                    {
                      divisions.find((d) => d._id === selectedDivision)?.city
                        ?.cityName
                    }
                  </strong>{" "}
                  to{" "}
                  <strong>
                    {
                      divisions.find((d) => d._id === pendingDivisionChange)
                        ?.city?.cityName
                    }
                  </strong>
                  . All stats and history will be preserved.
                </>
              )}
            </AlertDialogDescription>
          </AlertDialogHeader>
          <AlertDialogFooter>
            <AlertDialogCancel onClick={() => setPendingDivisionChange(null)}>
              Cancel
            </AlertDialogCancel>
            <AlertDialogAction onClick={confirmDivisionChange}>
              Confirm Move
            </AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>
    </>
  );
}


----- components\features\league\teams\QuickCreatePlayerDialog.tsx -----

// src/components/features/league/teams/QuickCreatePlayerDialog.tsx

/**
 * SOLID - Single Responsibility Principle (SRP)
 * Quick create player and add to team dialog ONLY
 */

"use client";

import { useState } from "react";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Loader2 } from "lucide-react";
import { toast } from "sonner";
import { z } from "zod";

// Simplified schema for quick create
const quickCreateSchema = z.object({
  playerName: z.string().min(2, "Player name must be at least 2 characters"),
  jerseyNumber: z
    .number()
    .min(0, "Jersey number must be 0 or greater")
    .max(99, "Jersey number must be 99 or less")
    .optional()
    .nullable(),
  jerseySize: z.enum(["S", "M", "L", "XL", "2XL"]).optional(),
});

type QuickCreateInput = z.infer<typeof quickCreateSchema>;

interface QuickCreatePlayerDialogProps {
  open: boolean;
  onOpenChange: (open: boolean) => void;
  team: any;
  cityId: string;
  onSuccess: () => void;
}

export function QuickCreatePlayerDialog({
  open,
  onOpenChange,
  team,
  cityId,
  onSuccess,
}: QuickCreatePlayerDialogProps) {
  const [isLoading, setIsLoading] = useState(false);

  const {
    register,
    handleSubmit,
    formState: { errors },
    setValue,
    reset,
  } = useForm<QuickCreateInput>({
    resolver: zodResolver(quickCreateSchema),
  });

  const onSubmit = async (data: QuickCreateInput) => {
    setIsLoading(true);

    try {
      // Create player with team assignment
      const createPayload = {
        playerName: data.playerName,
        division:
          typeof team.division === "object" ? team.division._id : team.division,
        team: team._id,
        jerseyNumber: data.jerseyNumber,
        jerseySize: data.jerseySize,
      };

      const response = await fetch(`/api/v1/players`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(createPayload),
      });

      const result = await response.json();

      if (!response.ok) {
        throw new Error(result.error || "Failed to create player");
      }

      toast.success("Player created and added to roster!");
      reset();
      onSuccess();
    } catch (err: any) {
      toast.error(err.message || "Failed to create player");
      console.error("Quick create player error:", err);
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="max-w-md">
        <DialogHeader>
          <DialogTitle>Quick Create Player</DialogTitle>
          <DialogDescription>
            Create a new player and add them to {team.teamName}
          </DialogDescription>
        </DialogHeader>

        <form onSubmit={handleSubmit(onSubmit)} className="space-y-4">
          <div>
            <Label htmlFor="playerName">Player Name *</Label>
            <Input
              {...register("playerName")}
              id="playerName"
              placeholder="John Doe"
              disabled={isLoading}
            />
            {errors.playerName && (
              <p className="text-sm text-red-600 mt-1">
                {errors.playerName.message}
              </p>
            )}
          </div>

          <div className="grid gap-4 md:grid-cols-2">
            <div>
              <Label htmlFor="jerseyNumber">Jersey Number</Label>
              <Input
                {...register("jerseyNumber", { valueAsNumber: true })}
                id="jerseyNumber"
                type="number"
                min="0"
                max="99"
                placeholder="23"
                disabled={isLoading}
              />
              {errors.jerseyNumber && (
                <p className="text-sm text-red-600 mt-1">
                  {errors.jerseyNumber.message}
                </p>
              )}
            </div>

            <div>
              <Label htmlFor="jerseySize">Jersey Size</Label>
              <Select
                onValueChange={(value) =>
                  setValue(
                    "jerseySize",
                    value as "S" | "M" | "L" | "XL" | "2XL"
                  )
                }
                disabled={isLoading}
              >
                <SelectTrigger>
                  <SelectValue placeholder="Select size" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="S">Small</SelectItem>
                  <SelectItem value="M">Medium</SelectItem>
                  <SelectItem value="L">Large</SelectItem>
                  <SelectItem value="XL">XL</SelectItem>
                  <SelectItem value="2XL">2XL</SelectItem>
                </SelectContent>
              </Select>
            </div>
          </div>

          <div className="flex gap-3 pt-4">
            <Button type="submit" disabled={isLoading} className="flex-1">
              {isLoading ? (
                <>
                  <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                  Creating...
                </>
              ) : (
                "Create & Add to Roster"
              )}
            </Button>
            <Button
              type="button"
              variant="outline"
              onClick={() => onOpenChange(false)}
              disabled={isLoading}
            >
              Cancel
            </Button>
          </div>
        </form>
      </DialogContent>
    </Dialog>
  );
}


----- components\features\league\teams\RemovePlayerDialog.tsx -----

// src/components/features/league/teams/RemovePlayerDialog.tsx

/**
 * SOLID - Single Responsibility Principle (SRP)
 * Remove player confirmation dialog ONLY
 */

"use client";

import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
} from "@/components/ui/alert-dialog";
import { AlertCircle } from "lucide-react";

interface RemovePlayerDialogProps {
  open: boolean;
  onOpenChange: (open: boolean) => void;
  player: any;
  onRemove: (playerId: string) => void;
  isProcessing: boolean;
  isCaptain: boolean;
}

export function RemovePlayerDialog({
  open,
  onOpenChange,
  player,
  onRemove,
  isProcessing,
  isCaptain,
}: RemovePlayerDialogProps) {
  if (!player) return null;

  return (
    <AlertDialog open={open} onOpenChange={onOpenChange}>
      <AlertDialogContent>
        <AlertDialogHeader>
          <AlertDialogTitle>Make Player Free Agent?</AlertDialogTitle>
          <AlertDialogDescription>
            Are you sure you want to remove <strong>{player.playerName}</strong>{" "}
            from the team roster? This player will become a free agent in the division and can be added to another team.
            {isCaptain && (
              <div className="flex items-start gap-2 mt-3 p-3 bg-yellow-50 border border-yellow-200 rounded-lg">
                <AlertCircle className="h-5 w-5 text-yellow-600 flex-shrink-0 mt-0.5" />
                <p className="text-sm text-yellow-800">
                  This player is the team captain. Removing them will also
                  remove the captain assignment.
                </p>
              </div>
            )}
          </AlertDialogDescription>
        </AlertDialogHeader>
        <AlertDialogFooter>
          <AlertDialogCancel>Cancel</AlertDialogCancel>
          <AlertDialogAction
            onClick={() => onRemove(player._id)}
            disabled={isProcessing}
            className="bg-orange-600 hover:bg-orange-700"
          >
            {isProcessing ? "Removing..." : "Make Free Agent"}
          </AlertDialogAction>
        </AlertDialogFooter>
      </AlertDialogContent>
    </AlertDialog>
  );
}


----- components\features\league\teams\RosterManager.tsx -----

// src/components/features/league/teams/RosterManager.tsx - Add quick create

/**
 * SOLID - Single Responsibility Principle (SRP)
 * Roster management orchestration ONLY
 */

"use client";

import { useState, useEffect } from "react";
import { useRouter } from "next/navigation";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import {
  Users,
  UserPlus,
  Trash2,
  AlertCircle,
  Plus,
  UserCheck,
  UserMinus,
} from "lucide-react";
import { toast } from "sonner";
import { AddPlayerDialog } from "./AddPlayerDialog";
import { RemovePlayerDialog } from "./RemovePlayerDialog";
import { QuickCreatePlayerDialog } from "./QuickCreatePlayerDialog";
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
} from "@/components/ui/alert-dialog";

interface RosterManagerProps {
  team: any;
  cityId: string;
}

export function RosterManager({ team, cityId }: RosterManagerProps) {
  const router = useRouter();
  const [freeAgents, setFreeAgents] = useState<any[]>([]);
  const [loadingFreeAgents, setLoadingFreeAgents] = useState(true);
  const [showAddDialog, setShowAddDialog] = useState(false);
  const [showRemoveDialog, setShowRemoveDialog] = useState(false);
  const [showDeleteDialog, setShowDeleteDialog] = useState(false);
  const [showQuickCreateDialog, setShowQuickCreateDialog] = useState(false);
  const [selectedPlayer, setSelectedPlayer] = useState<any>(null);
  const [isProcessing, setIsProcessing] = useState(false);

  useEffect(() => {
    fetchFreeAgents();
  }, [team._id]);

  const fetchFreeAgents = async () => {
    setLoadingFreeAgents(true);
    try {
      const response = await fetch(`/api/v1/teams/${team._id}/roster`);
      const result = await response.json();

      if (result.success) {
        setFreeAgents(result.data || []);
      }
    } catch (error) {
      console.error("Error fetching free agents:", error);
      toast.error("Failed to load free agents");
    } finally {
      setLoadingFreeAgents(false);
    }
  };

  const handleAddPlayer = async (playerId: string) => {
    setIsProcessing(true);
    try {
      const response = await fetch(
        `/api/v1/${cityId}/teams/${team._id}/roster`,
        {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ playerId }),
        }
      );

      const result = await response.json();

      if (!response.ok) {
        throw new Error(result.error || "Failed to add player");
      }

      toast.success("Player added to roster");
      setShowAddDialog(false);
      router.refresh();
      fetchFreeAgents();
    } catch (error: any) {
      toast.error(error.message || "Failed to add player");
    } finally {
      setIsProcessing(false);
    }
  };

  const handleRemovePlayer = async (playerId: string) => {
    setIsProcessing(true);
    try {
      const response = await fetch(
        `/api/v1/teams/${team._id}/roster?playerId=${playerId}`,
        {
          method: "DELETE",
        }
      );

      const result = await response.json();

      if (!response.ok) {
        throw new Error(result.error || "Failed to remove player");
      }

      toast.success("Player removed from roster (now free agent)");
      setShowRemoveDialog(false);
      setSelectedPlayer(null);
      router.refresh();
      fetchFreeAgents();
    } catch (error: any) {
      toast.error(error.message || "Failed to remove player");
    } finally {
      setIsProcessing(false);
    }
  };

  const handleDeletePlayer = async (playerId: string) => {
    setIsProcessing(true);
    try {
      const response = await fetch(`/api/v1/players?id=${playerId}`, {
        method: "DELETE",
      });

      const result = await response.json();

      if (!response.ok) {
        throw new Error(result.error || "Failed to delete player");
      }

      toast.success("Player deleted successfully");
      setShowDeleteDialog(false);
      setSelectedPlayer(null);
      router.refresh();
      fetchFreeAgents();
    } catch (error: any) {
      toast.error(error.message || "Failed to delete player");
    } finally {
      setIsProcessing(false);
    }
  };

  const handleQuickCreateSuccess = () => {
    setShowQuickCreateDialog(false);
    router.refresh();
    fetchFreeAgents();
  };

  return (
    <div className="grid gap-6 md:grid-cols-2">
      {/* Current Roster */}
      <Card>
        <CardHeader>
          <div className="flex items-center justify-between">
            <CardTitle>Current Roster ({team.players?.length || 0})</CardTitle>
            <div className="flex gap-2">
              <Button
                size="sm"
                variant="outline"
                onClick={() => setShowQuickCreateDialog(true)}
              >
                <Plus className="h-4 w-4 mr-2" />
                Create New
              </Button>
              <Button
                size="sm"
                onClick={() => setShowAddDialog(true)}
                disabled={loadingFreeAgents || freeAgents.length === 0}
              >
                <UserPlus className="h-4 w-4 mr-2" />
                Add Existing
              </Button>
            </div>
          </div>
        </CardHeader>
        <CardContent>
          {!team.players || team.players.length === 0 ? (
            <div className="text-center py-8">
              <Users className="mx-auto h-12 w-12 text-gray-400" />
              <p className="mt-2 text-sm text-gray-500">No players on roster</p>
              <div className="flex gap-2 justify-center mt-4">
                <Button
                  variant="outline"
                  size="sm"
                  onClick={() => setShowQuickCreateDialog(true)}
                >
                  Create New Player
                </Button>
                <Button
                  variant="outline"
                  size="sm"
                  onClick={() => setShowAddDialog(true)}
                  disabled={loadingFreeAgents || freeAgents.length === 0}
                >
                  Add Existing Player
                </Button>
              </div>
            </div>
          ) : (
            <div className="space-y-2">
              {team.players.map((player: any) => (
                <div
                  key={player._id}
                  className="flex items-center justify-between p-3 rounded-lg border hover:bg-gray-50"
                >
                  <div className="flex items-center gap-3">
                    <div className="flex items-center justify-center w-10 h-10 rounded-full bg-gray-100 font-bold text-gray-600">
                      {player.jerseyNumber || "—"}
                    </div>
                    <div>
                      <p className="font-medium">{player.playerName}</p>
                      <div className="flex items-center gap-2 mt-1">
                        {player._id === team.teamCaptain?._id && (
                          <Badge variant="outline">Captain</Badge>
                        )}
                        {player.user ? (
                          <Badge
                            variant="outline"
                            className="bg-green-50 text-green-700 border-green-200"
                          >
                            <UserCheck className="h-3 w-3 mr-1" />
                            Has Account
                          </Badge>
                        ) : (
                          <Badge
                            variant="outline"
                            className="bg-gray-50 text-gray-600 border-gray-200"
                          >
                            No Account
                          </Badge>
                        )}
                      </div>
                    </div>
                  </div>
                  <div className="flex gap-2">
                    <Button
                      variant="ghost"
                      size="sm"
                      onClick={() => {
                        setSelectedPlayer(player);
                        setShowRemoveDialog(true);
                      }}
                      title="Make free agent"
                    >
                      <UserMinus className="h-4 w-4 text-orange-600" />
                    </Button>
                    {!player.user && (
                      <Button
                        variant="ghost"
                        size="sm"
                        onClick={() => {
                          setSelectedPlayer(player);
                          setShowDeleteDialog(true);
                        }}
                        title="Delete player (only for players without accounts)"
                      >
                        <Trash2 className="h-4 w-4 text-red-600" />
                      </Button>
                    )}
                  </div>
                </div>
              ))}
            </div>
          )}
        </CardContent>
      </Card>

      {/* Available Free Agents */}
      <Card>
        <CardHeader>
          <CardTitle>Available Free Agents ({freeAgents.length})</CardTitle>
        </CardHeader>
        <CardContent>
          {loadingFreeAgents ? (
            <div className="text-center py-8">
              <p className="text-sm text-gray-500">Loading free agents...</p>
            </div>
          ) : freeAgents.length === 0 ? (
            <div className="text-center py-8">
              <Users className="mx-auto h-12 w-12 text-gray-400" />
              <p className="mt-2 text-sm text-gray-500">
                No free agents available in this division
              </p>
              <p className="text-xs text-gray-400 mt-1">
                Create a new player to add them to the roster
              </p>
            </div>
          ) : (
            <div className="space-y-2 max-h-[500px] overflow-y-auto">
              {freeAgents.map((player: any) => (
                <div
                  key={player._id}
                  className="flex items-center justify-between p-3 rounded-lg border hover:bg-gray-50"
                >
                  <div className="flex items-center gap-3">
                    <div className="flex items-center justify-center w-10 h-10 rounded-full bg-gray-100 font-bold text-gray-600">
                      {player.jerseyNumber || "—"}
                    </div>
                    <div>
                      <p className="font-medium">{player.playerName}</p>
                      {player.user ? (
                        <Badge
                          variant="outline"
                          className="bg-green-50 text-green-700 border-green-200 mt-1"
                        >
                          <UserCheck className="h-3 w-3 mr-1" />
                          Has Account
                        </Badge>
                      ) : (
                        <Badge
                          variant="outline"
                          className="bg-gray-50 text-gray-600 border-gray-200 mt-1"
                        >
                          No Account
                        </Badge>
                      )}
                    </div>
                  </div>
                  <Button
                    size="sm"
                    onClick={() => handleAddPlayer(player._id)}
                    disabled={isProcessing}
                  >
                    <UserPlus className="h-4 w-4 mr-2" />
                    Add
                  </Button>
                </div>
              ))}
            </div>
          )}
        </CardContent>
      </Card>

      {/* Dialogs */}
      <AddPlayerDialog
        open={showAddDialog}
        onOpenChange={setShowAddDialog}
        freeAgents={freeAgents}
        onAddPlayer={handleAddPlayer}
        isProcessing={isProcessing}
      />

      <RemovePlayerDialog
        open={showRemoveDialog}
        onOpenChange={setShowRemoveDialog}
        player={selectedPlayer}
        onRemove={handleRemovePlayer}
        isProcessing={isProcessing}
        isCaptain={selectedPlayer?._id === team.teamCaptain?._id}
      />

      {/* Delete Player Dialog */}
      {selectedPlayer && (
        <AlertDialog open={showDeleteDialog} onOpenChange={setShowDeleteDialog}>
          <AlertDialogContent>
            <AlertDialogHeader>
              <AlertDialogTitle>Delete Player?</AlertDialogTitle>
              <AlertDialogDescription>
                Are you sure you want to permanently delete{" "}
                <strong>{selectedPlayer.playerName}</strong>? This action cannot
                be undone.
                {selectedPlayer.user && (
                  <div className="flex items-start gap-2 mt-3 p-3 bg-red-50 border border-red-200 rounded-lg">
                    <AlertCircle className="h-5 w-5 text-red-600 flex-shrink-0 mt-0.5" />
                    <p className="text-sm text-red-800">
                      This player has a user account linked. You cannot delete
                      players with linked accounts. Please make them a free
                      agent instead.
                    </p>
                  </div>
                )}
              </AlertDialogDescription>
            </AlertDialogHeader>
            <AlertDialogFooter>
              <AlertDialogCancel>Cancel</AlertDialogCancel>
              <AlertDialogAction
                onClick={() => handleDeletePlayer(selectedPlayer._id)}
                disabled={isProcessing || selectedPlayer.user}
                className="bg-red-600 hover:bg-red-700"
              >
                {isProcessing ? "Deleting..." : "Delete Player"}
              </AlertDialogAction>
            </AlertDialogFooter>
          </AlertDialogContent>
        </AlertDialog>
      )}

      <QuickCreatePlayerDialog
        open={showQuickCreateDialog}
        onOpenChange={setShowQuickCreateDialog}
        team={team}
        cityId={cityId}
        onSuccess={handleQuickCreateSuccess}
      />
    </div>
  );
}


----- components\features\league\teams\TeamCard.tsx -----

// src/components/features/league/teams/TeamCard.tsx

/**
 * SOLID - Single Responsibility Principle (SRP)
 * Single team card display ONLY
 */

"use client";

import { useState } from "react";
import { useRouter } from "next/navigation";
import Link from "next/link";
import { Card, CardContent, CardHeader } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import {
  MapPin,
  Users,
  Trophy,
  MoreVertical,
  Pencil,
  Trash2,
  AlertCircle,
  Building2,
  Clock,
} from "lucide-react";
import { toast } from "sonner";
import { format, subDays, isBefore } from "date-fns";
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
} from "@/components/ui/alert-dialog";

interface TeamCardProps {
  team: any;
}

export function TeamCard({ team }: TeamCardProps) {
  const router = useRouter();
  const [isDeleting, setIsDeleting] = useState(false);
  const [showDeleteDialog, setShowDeleteDialog] = useState(false);

  // Calculate early bird status
  const divisionStartDate = team.division?.startDate;
  const earlyBirdDeadline = divisionStartDate
    ? subDays(new Date(divisionStartDate), 42)
    : null;
  const teamCreatedAt = team.createdAt;
  const isEarlyBird =
    earlyBirdDeadline && teamCreatedAt
      ? isBefore(new Date(teamCreatedAt), earlyBirdDeadline)
      : false;

  const handleDelete = async () => {
    setIsDeleting(true);
    try {
      const response = await fetch(`/api/v1/teams?id=${team._id}`, {
        method: "DELETE",
      });

      const result = await response.json();

      if (!response.ok) {
        throw new Error(result.error || "Failed to delete team");
      }

      toast.success("Team deleted successfully");
      router.refresh();
    } catch (error: any) {
      toast.error(error.message || "Failed to delete team");
    } finally {
      setIsDeleting(false);
      setShowDeleteDialog(false);
    }
  };

  const noCaptainWarning = !team.teamCaptain && team.players?.length > 0;

  return (
    <>
      <Card className="hover:shadow-lg transition-shadow">
        <CardHeader className="pb-3">
          <div className="flex items-start justify-between">
            <div className="space-y-1 flex-1">
              {noCaptainWarning && (
                <Badge
                  variant="outline"
                  className="bg-yellow-100 text-yellow-800 border-yellow-200"
                >
                  <AlertCircle className="h-3 w-3 mr-1" />
                  No Captain
                </Badge>
              )}
              <Link href={`/admin/league/teams/${team._id}`}>
                <h3 className="font-semibold text-lg leading-tight hover:underline">
                  {team.teamName}
                </h3>
              </Link>
              <p className="text-sm text-gray-500">{team.teamNameShort}</p>
              <p className="text-xs text-gray-400 font-mono">{team.teamCode}</p>
            </div>
            <DropdownMenu>
              <DropdownMenuTrigger asChild>
                <Button variant="ghost" size="icon">
                  <MoreVertical className="h-4 w-4" />
                </Button>
              </DropdownMenuTrigger>
              <DropdownMenuContent align="end">
                <DropdownMenuItem
                  onClick={() =>
                    router.push(`/admin/league/teams/${team._id}/edit`)
                  }
                >
                  <Pencil className="mr-2 h-4 w-4" />
                  Edit Team
                </DropdownMenuItem>
                <DropdownMenuSeparator />
                <DropdownMenuItem
                  onClick={() => setShowDeleteDialog(true)}
                  className="text-red-600"
                >
                  <Trash2 className="mr-2 h-4 w-4" />
                  Delete Team
                </DropdownMenuItem>
              </DropdownMenuContent>
            </DropdownMenu>
          </div>
        </CardHeader>

        <CardContent className="space-y-3 text-sm">
          <div className="flex items-center gap-2 text-gray-600">
            <Building2 className="h-4 w-4 flex-shrink-0" />
            <span>{team.division?.city?.cityName || "N/A"}</span>
          </div>

          <div className="flex items-center gap-2 text-gray-600">
            <MapPin className="h-4 w-4 flex-shrink-0" />
            <span>{team.division?.location?.name || "N/A"}</span>
          </div>

          <div className="flex items-center gap-2 text-gray-600">
            <Trophy className="h-4 w-4 flex-shrink-0" />
            <span>{team.division?.divisionName || "N/A"}</span>
          </div>

          <div className="flex items-center gap-2 text-gray-600">
            <Users className="h-4 w-4 flex-shrink-0" />
            <span>{team.players?.length || 0} players</span>
          </div>

          <div className="flex items-center gap-2 text-gray-600">
            <Clock className="h-4 w-4 flex-shrink-0" />
            <div className="flex items-center gap-2 flex-1">
              <span className="text-xs">
                {teamCreatedAt
                  ? format(new Date(teamCreatedAt), "MMM dd, yyyy")
                  : "N/A"}
              </span>
              {isEarlyBird ? (
                <Badge
                  variant="outline"
                  className="bg-green-100 text-green-800 border-green-200 text-xs"
                >
                  Early Bird
                </Badge>
              ) : (
                <Badge
                  variant="outline"
                  className="bg-gray-100 text-gray-800 border-gray-200 text-xs"
                >
                  Regular
                </Badge>
              )}
            </div>
          </div>

          <div className="pt-2 border-t">
            <div className="flex items-center justify-between">
              <span className="text-xs text-gray-500">Record:</span>
              <span className="font-medium">
                {team.wins}-{team.losses} ({team.pointDifference > 0 ? "+" : ""}
                {team.pointDifference})
              </span>
            </div>
            {team.teamCaptain && (
              <div className="flex items-center justify-between mt-1">
                <span className="text-xs text-gray-500">Captain:</span>
                <span className="text-xs">{team.teamCaptain.playerName}</span>
              </div>
            )}
          </div>
        </CardContent>
      </Card>

      {/* Delete Confirmation Dialog */}
      <AlertDialog open={showDeleteDialog} onOpenChange={setShowDeleteDialog}>
        <AlertDialogContent>
          <AlertDialogHeader>
            <AlertDialogTitle>Delete Team?</AlertDialogTitle>
            <AlertDialogDescription>
              Are you sure you want to delete "{team.teamName}"? This action
              cannot be undone.
              {(team.players?.length > 0 || team.games?.length > 0) && (
                <p className="mt-2 text-red-600 font-medium">
                  This team has {team.players?.length || 0} players and{" "}
                  {team.games?.length || 0} games. Remove all players and game
                  history before deleting.
                </p>
              )}
            </AlertDialogDescription>
          </AlertDialogHeader>
          <AlertDialogFooter>
            <AlertDialogCancel>Cancel</AlertDialogCancel>
            <AlertDialogAction
              onClick={handleDelete}
              disabled={
                isDeleting || team.players?.length > 0 || team.games?.length > 0
              }
              className="bg-red-600 hover:bg-red-700"
            >
              {isDeleting ? "Deleting..." : "Delete"}
            </AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>
    </>
  );
}


----- components\features\league\teams\TeamsContent.tsx -----

// src/components/features/league/teams/TeamsContent.tsx

/**
 * SOLID - Single Responsibility Principle (SRP)
 * Team list orchestration with tabs, filters, and view modes
 */

"use client";

import { useEffect, useMemo, useState } from "react";
import { useRouter, useSearchParams } from "next/navigation";
import { Tabs, TabsList, TabsTrigger } from "@/components/ui/tabs";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { Checkbox } from "@/components/ui/checkbox";
import { Label } from "@/components/ui/label";
import { Search, LayoutGrid, List, X, Filter } from "lucide-react";
import { TeamsGrid } from "./TeamsGrid";
import { TeamsList } from "./TeamsList";
import { Pagination } from "@/components/common/Pagination";
import { debounce } from "lodash";

interface TeamsContentProps {
  teams: any[];
  pagination: {
    total: number;
    page: number;
    limit: number;
    totalPages: number;
  };
  divisions: any[];
  locations: any[];
  currentTab: "active" | "inactive" | "all";
  currentView: "card" | "list";
  currentFilters: {
    division?: string;
    location?: string;
    search?: string;
    noCaptain?: boolean;
    noPlayers?: boolean;
  };
}

export function TeamsContent({
  teams,
  pagination,
  divisions,
  locations,
  currentTab,
  currentView,
  currentFilters,
}: TeamsContentProps) {
  const router = useRouter();
  const searchParams = useSearchParams();
  const [searchValue, setSearchValue] = useState(currentFilters.search || "");

  const updateFilters = (updates: Record<string, string | undefined>) => {
    const params = new URLSearchParams(searchParams.toString());

    Object.entries(updates).forEach(([key, value]) => {
      if (value) {
        params.set(key, value);
      } else {
        params.delete(key);
      }
    });

    // Reset to page 1 when filters change
    if (!updates.page) {
      params.set("page", "1");
    }

    router.push(`/admin/league/teams?${params.toString()}`);
  };

  const handleTabChange = (tab: string) => {
    updateFilters({ tab });
  };

  // create a stable debounced version of updateFilters
  const debouncedUpdateFilters = useMemo(
    () =>
      debounce((value: string) => {
        updateFilters({ search: value || undefined });
      }, 500), // 500ms delay
    [searchParams] // dependencies
  );

  const handleSearch = (value: string) => {
    setSearchValue(value);
    debouncedUpdateFilters(value);
  };

  useEffect(() => {
    return () => {
      debouncedUpdateFilters.cancel();
    };
  }, [debouncedUpdateFilters]);

  const handleViewChange = (view: "card" | "list") => {
    updateFilters({ view });
  };

  // Sort locations by name
  const sortedLocations = useMemo(() => {
    return [...locations].sort((a, b) =>
      (a.name || '').localeCompare(b.name || '')
    );
  }, [locations]);

  // Filter and sort divisions by location name
  const filteredDivisions = useMemo(() => {
    let filtered = divisions;
    if (currentFilters.location && currentFilters.location !== "all") {
      filtered = divisions.filter((d) => d.location?._id === currentFilters.location);
    }
    return filtered.sort((a, b) =>
      (a.location?.name || '').localeCompare(b.location?.name || '')
    );
  }, [divisions, currentFilters.location]);

  const clearAllFilters = () => {
    router.push(`/admin/league/teams?tab=${currentTab}&view=${currentView}`);
    setSearchValue("");
  };

  const hasActiveFilters =
    currentFilters.location ||
    currentFilters.division ||
    currentFilters.search ||
    currentFilters.noCaptain ||
    currentFilters.noPlayers;

  return (
    <div className="space-y-6">
      {/* Tabs */}
      <Tabs value={currentTab} onValueChange={handleTabChange}>
        <TabsList>
          <TabsTrigger value="active">Active</TabsTrigger>
          <TabsTrigger value="inactive">Inactive</TabsTrigger>
          <TabsTrigger value="all">All</TabsTrigger>
        </TabsList>
      </Tabs>

      {/* Filters */}
      <div className="flex flex-col gap-4">
        <div className="flex flex-col sm:flex-row gap-4">
          <div className="relative flex-1">
            <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400" />
            <Input
              placeholder="Search teams..."
              value={searchValue}
              onChange={(e) => handleSearch(e.target.value)}
              className="pl-10"
            />
          </div>

          <Select
            value={currentFilters.location || "all"}
            onValueChange={(value) =>
              updateFilters({
                location: value === "all" ? undefined : value,
                division: undefined,
              })
            }
          >
            <SelectTrigger className="w-full sm:w-[200px]">
              <SelectValue placeholder="All Locations" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="all">All Locations</SelectItem>
              {sortedLocations.map((location: any) => (
                <SelectItem key={location._id} value={location._id}>
                  {location.name}
                </SelectItem>
              ))}
            </SelectContent>
          </Select>

          <Select
            value={currentFilters.division || "all"}
            onValueChange={(value) =>
              updateFilters({ division: value === "all" ? undefined : value })
            }
          >
            <SelectTrigger className="w-full sm:w-[200px]">
              <SelectValue placeholder="Active Divisions" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="all">All Divisions</SelectItem>
              {filteredDivisions.map((division: any) => (
                <SelectItem key={division._id} value={division._id}>
                  {division.location?.name} - {division.divisionName}
                </SelectItem>
              ))}
            </SelectContent>
          </Select>

          <div className="flex items-end">
            <Button
              variant="outline"
              onClick={clearAllFilters}
              disabled={!hasActiveFilters}
              className="w-full"
            >
              <X className="h-4 w-4 mr-2" />
              Clear Filters
            </Button>
          </div>
        </div>

        <div className="flex flex-wrap gap-4 items-center justify-between">
          <div className="flex flex-wrap gap-4">
            <div className="flex items-center space-x-2">
              <Checkbox
                id="noCaptain"
                checked={currentFilters.noCaptain}
                onCheckedChange={(checked) =>
                  updateFilters({ noCaptain: checked ? "true" : undefined })
                }
              />
              <Label htmlFor="noCaptain" className="text-sm cursor-pointer">
                No captain assigned
              </Label>
            </div>

            <div className="flex items-center space-x-2">
              <Checkbox
                id="noPlayers"
                checked={currentFilters.noPlayers}
                onCheckedChange={(checked) =>
                  updateFilters({ noPlayers: checked ? "true" : undefined })
                }
              />
              <Label htmlFor="noPlayers" className="text-sm cursor-pointer">
                No players
              </Label>
            </div>
          </div>

          {/* View Toggle */}
          <div className="flex gap-2">
            <Button
              variant={currentView === "card" ? "default" : "outline"}
              size="sm"
              onClick={() => handleViewChange("card")}
            >
              <LayoutGrid className="h-4 w-4" />
            </Button>
            <Button
              variant={currentView === "list" ? "default" : "outline"}
              size="sm"
              onClick={() => handleViewChange("list")}
            >
              <List className="h-4 w-4" />
            </Button>
          </div>
        </div>

        {/* Active Filters */}
        {hasActiveFilters && (
          <div className="flex items-center gap-2 pt-2 border-t">
            <span className="text-sm text-gray-500">Active Filters:</span>
            <div className="flex flex-wrap gap-2">
              {currentFilters.location && (
                <span className="inline-flex items-center gap-1 px-2 py-1 bg-blue-100 text-blue-800 rounded text-xs">
                  <Filter className="h-3 w-3" />
                  Location
                </span>
              )}
              {currentFilters.division && (
                <span className="inline-flex items-center gap-1 px-2 py-1 bg-blue-100 text-blue-800 rounded text-xs">
                  <Filter className="h-3 w-3" />
                  Division
                </span>
              )}
              {currentFilters.noCaptain && (
                <span className="inline-flex items-center gap-1 px-2 py-1 bg-blue-100 text-blue-800 rounded text-xs">
                  <Filter className="h-3 w-3" />
                  No Captain
                </span>
              )}
              {currentFilters.noPlayers && (
                <span className="inline-flex items-center gap-1 px-2 py-1 bg-blue-100 text-blue-800 rounded text-xs">
                  <Filter className="h-3 w-3" />
                  No Players
                </span>
              )}
              {currentFilters.search && (
                <span className="inline-flex items-center gap-1 px-2 py-1 bg-blue-100 text-blue-800 rounded text-xs">
                  <Search className="h-3 w-3" />
                  {currentFilters.search}
                </span>
              )}
            </div>
          </div>
        )}
      </div>

      {/* Teams Display */}
      {currentView === "card" ? (
        <TeamsGrid teams={teams} />
      ) : (
        <TeamsList teams={teams} />
      )}

      {/* Pagination */}
      {pagination.totalPages > 1 && (
        <Pagination
          currentPage={pagination.page}
          totalPages={pagination.totalPages}
          total={pagination.total}
          limit={pagination.limit}
          onPageChange={(page) => updateFilters({ page: page.toString() })}
        />
      )}
    </div>
  );
}


----- components\features\league\teams\TeamsGrid.tsx -----

// src/components/features/league/teams/TeamsGrid.tsx

/**
 * SOLID - Single Responsibility Principle (SRP)
 * Display teams in responsive card grid ONLY
 */

"use client";

import { Users } from "lucide-react";
import { TeamCard } from "./TeamCard";

interface TeamsGridProps {
  teams: any[];
}

export function TeamsGrid({ teams }: TeamsGridProps) {
  if (teams.length === 0) {
    return (
      <div className="text-center py-12 bg-white rounded-lg shadow">
        <Users className="mx-auto h-12 w-12 text-gray-400" />
        <h3 className="mt-4 text-lg font-medium text-gray-900">
          No teams found
        </h3>
        <p className="mt-2 text-sm text-gray-500">
          Try adjusting your filters or create a new team.
        </p>
      </div>
    );
  }

  return (
    <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-3">
      {teams.map((team) => (
        <TeamCard key={team._id} team={team} />
      ))}
    </div>
  );
}


----- components\features\league\teams\TeamsList.tsx -----

// src/components/features/league/teams/TeamsList.tsx

/**
 * SOLID - Single Responsibility Principle (SRP)
 * Display teams in list/table view ONLY
 */

"use client";

import Link from "next/link";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Users, AlertCircle, ExternalLink } from "lucide-react";

interface TeamsListProps {
  teams: any[];
}

export function TeamsList({ teams }: TeamsListProps) {
  if (teams.length === 0) {
    return (
      <div className="text-center py-12 bg-white rounded-lg shadow">
        <Users className="mx-auto h-12 w-12 text-gray-400" />
        <h3 className="mt-4 text-lg font-medium text-gray-900">
          No teams found
        </h3>
        <p className="mt-2 text-sm text-gray-500">
          Try adjusting your filters or create a new team.
        </p>
      </div>
    );
  }

  return (
    <div className="bg-white rounded-lg shadow overflow-hidden">
      <div className="overflow-x-auto">
        <table className="min-w-full divide-y divide-gray-200">
          <thead className="bg-gray-50">
            <tr>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Team
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                City
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Location
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Division
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Record
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Players
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Captain
              </th>
              <th className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                Actions
              </th>
            </tr>
          </thead>
          <tbody className="bg-white divide-y divide-gray-200">
            {teams.map((team) => (
              <tr key={team._id} className="hover:bg-gray-50">
                <td className="px-6 py-4 whitespace-nowrap">
                  <div>
                    <div className="font-medium text-gray-900">
                      {team.teamName}
                    </div>
                    <div className="text-sm text-gray-500">
                      {team.teamNameShort}
                    </div>
                    <div className="text-xs text-gray-400 font-mono">
                      {team.teamCode}
                    </div>
                  </div>
                </td>
                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                  {team.division?.city?.cityName || "N/A"}
                </td>
                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                  {team.division?.location?.name || "N/A"}
                </td>
                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                  {team.division?.divisionName || "N/A"}
                </td>
                <td className="px-6 py-4 whitespace-nowrap text-sm">
                  <span className="font-medium">
                    {team.wins}-{team.losses}
                  </span>
                  <span className="text-gray-500 ml-1">
                    ({team.pointDifference > 0 ? "+" : ""}
                    {team.pointDifference})
                  </span>
                </td>
                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                  {team.players?.length || 0}
                </td>
                <td className="px-6 py-4 whitespace-nowrap text-sm">
                  {team.teamCaptain ? (
                    <span className="text-gray-900">
                      {team.teamCaptain.playerName}
                    </span>
                  ) : team.players?.length > 0 ? (
                    <Badge
                      variant="outline"
                      className="bg-yellow-100 text-yellow-800 border-yellow-200"
                    >
                      <AlertCircle className="h-3 w-3 mr-1" />
                      No Captain
                    </Badge>
                  ) : (
                    <span className="text-gray-400">—</span>
                  )}
                </td>
                <td className="px-6 py-4 whitespace-nowrap text-right text-sm">
                  <Button variant="ghost" size="sm" asChild>
                    <Link href={`/admin/league/teams/${team._id}`}>
                      <ExternalLink className="h-4 w-4" />
                    </Link>
                  </Button>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    </div>
  );
}


----- components\features\payments\ChargeCardModal.tsx -----

// src/components/features/payments/ChargeCardModal.tsx

/**
 * SOLID - Single Responsibility Principle (SRP)
 * Charge card confirmation modal ONLY
 */

"use client";

import { useState } from "react";
import { useRouter } from "next/navigation";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogFooter,
} from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { Loader2, Zap, CreditCard, AlertCircle } from "lucide-react";
import { toast } from "sonner";

interface ChargeCardModalProps {
  open: boolean;
  onOpenChange: (open: boolean) => void;
  player: any;
  payment: any;
  cardInfo: any;
  paymentMethod: any;
  cityId: string;
}

export function ChargeCardModal({
  open,
  onOpenChange,
  player,
  payment,
  cardInfo,
  paymentMethod,
  cityId,
}: ChargeCardModalProps) {
  const router = useRouter();
  const [isCharging, setIsCharging] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const amount =
    payment.paymentNumber === 1
      ? 60
      : paymentMethod.pricingTier === "EARLY_BIRD"
      ? 25
      : 30;

  const brandDisplay =
    cardInfo.brand.charAt(0).toUpperCase() + cardInfo.brand.slice(1);

  const handleCharge = async () => {
    setIsCharging(true);
    setError(null);

    try {
      const response = await fetch(`/api/v1/${cityId}/payments/charge-card`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          playerId: player._id,
          paymentMethodId: paymentMethod._id,
          paymentNumber: payment.paymentNumber,
          amount: amount * 100, // Convert to cents
        }),
      });

      const data = await response.json();

      if (!response.ok) {
        throw new Error(data.error || "Failed to charge card");
      }

      toast.success("Card charged successfully!");
      onOpenChange(false);
      router.refresh();
    } catch (error: any) {
      setError(error.message);
      toast.error(error.message);
    } finally {
      setIsCharging(false);
    }
  };

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent>
        <DialogHeader>
          <DialogTitle className="flex items-center gap-2">
            <Zap className="h-5 w-5 text-blue-600" />
            Charge Card
          </DialogTitle>
          <DialogDescription>
            Charge payment #{payment.paymentNumber} to customer's card on file.
          </DialogDescription>
        </DialogHeader>

        <div className="space-y-4 py-4">
          {/* Charge Details */}
          <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
            <div className="space-y-2">
              <div className="flex justify-between text-sm">
                <span className="text-gray-600">Player:</span>
                <span className="font-medium">{player.playerName}</span>
              </div>
              <div className="flex justify-between text-sm">
                <span className="text-gray-600">Payment:</span>
                <span className="font-medium">
                  #{payment.paymentNumber}
                  {payment.paymentNumber === 1 && " (Down Payment)"}
                </span>
              </div>
              <div className="flex justify-between text-sm">
                <span className="text-gray-600">Amount:</span>
                <span className="font-bold text-lg">${amount}.00</span>
              </div>
            </div>
          </div>

          {/* Card Info */}
          <div className="flex items-center gap-3 p-3 bg-gray-50 rounded-lg">
            <CreditCard className="h-5 w-5 text-gray-400" />
            <div>
              <p className="text-sm font-medium text-gray-900">
                {brandDisplay} ****{cardInfo.last4}
              </p>
              <p className="text-xs text-gray-500">
                Expires {cardInfo.expMonth}/{cardInfo.expYear}
              </p>
            </div>
          </div>

          {/* Warning */}
          <Alert>
            <AlertCircle className="h-4 w-4" />
            <AlertDescription className="text-sm">
              This will immediately charge ${amount} to the customer's card. An
              SMS confirmation and Stripe receipt will be sent automatically.
            </AlertDescription>
          </Alert>

          {/* Error Display */}
          {error && (
            <Alert variant="destructive">
              <AlertCircle className="h-4 w-4" />
              <AlertDescription className="text-sm">{error}</AlertDescription>
            </Alert>
          )}
        </div>

        <DialogFooter>
          <Button
            variant="outline"
            onClick={() => onOpenChange(false)}
            disabled={isCharging}
          >
            Cancel
          </Button>
          <Button
            onClick={handleCharge}
            disabled={isCharging}
            className="bg-blue-600 hover:bg-blue-700"
          >
            {isCharging ? (
              <>
                <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                Charging...
              </>
            ) : (
              <>
                <Zap className="mr-2 h-4 w-4" />
                Charge ${amount}
              </>
            )}
          </Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
}


----- components\features\payments\CriticalPlayerView.tsx -----

// src/components/features/payments/CriticalPlayerView.tsx

/**
 * SOLID - Single Responsibility Principle (SRP)
 * Critical installment player detail view ONLY
 */

"use client";

import { useState } from "react";
import Link from "next/link";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import {
  ArrowLeft,
  AlertOctagon,
  Mail,
  Phone,
  Instagram as InstagramIcon,
  Calendar,
  Users,
  MapPin,
  CheckCircle2,
  XCircle,
  ExternalLink,
  MessageSquare,
  ShieldAlert,
} from "lucide-react";
import { format } from "date-fns";
import { SendSpecificReminderModal } from "./SendSpecificReminderModal";
import { EscalateToCaptainModal } from "./EscalateToCaptainModal";
import { SuspensionWarningModal } from "./SuspensionWarningModal";

interface CriticalPlayerViewProps {
  player: any;
  paymentMethod: any;
  cityId: string;
}

export function CriticalPlayerView({
  player,
  paymentMethod,
  cityId,
}: CriticalPlayerViewProps) {
  const [selectedPayment, setSelectedPayment] = useState<any>(null);
  const [showReminderModal, setShowReminderModal] = useState(false);
  const [showEscalateModal, setShowEscalateModal] = useState(false);
  const [showSuspensionModal, setShowSuspensionModal] = useState(false);

  const subscriptionPayments =
    paymentMethod.installments?.subscriptionPayments || [];
  const completedPayments = subscriptionPayments.filter(
    (p: any) => p.status === "succeeded"
  ).length;
  const failedPayments = subscriptionPayments.filter(
    (p: any) => p.status === "failed"
  );
  const totalPayments = 8;
  const progressPercentage = Math.round(
    (completedPayments / totalPayments) * 100
  );

  const daysSinceRegistration = player.createdAt
    ? Math.floor(
        (Date.now() - new Date(player.createdAt).getTime()) /
          (1000 * 60 * 60 * 24)
      )
    : 0;

  const handleSendReminder = (payment: any) => {
    setSelectedPayment(payment);
    setShowReminderModal(true);
  };

  return (
    <div className="p-6 space-y-6">
      {/* Header */}
      <div className="flex items-center gap-4">
        <Button variant="ghost" size="sm" asChild>
          <Link href={`/admin/payments`}>
            <ArrowLeft className="h-4 w-4 mr-2" />
            Back to Payments
          </Link>
        </Button>
      </div>

      {/* Player Overview */}
      <div>
        <div className="flex items-center gap-3 mb-2">
          <h1 className="text-3xl font-bold tracking-tight">
            {player.playerName}
          </h1>
          <Badge className="bg-red-100 text-red-800 border-red-200">
            <AlertOctagon className="h-3 w-3 mr-1" />
            Critical
          </Badge>
        </div>
        <p className="text-gray-600">
          {player.team?.teamName || "No Team"} • {player.division?.divisionName}
        </p>
      </div>

      {/* Critical Alert */}
      <div className="bg-red-50 border-2 border-red-300 rounded-lg p-4 flex items-start gap-3">
        <AlertOctagon className="h-6 w-6 text-red-600 flex-shrink-0 mt-0.5" />
        <div>
          <p className="font-bold text-red-900">Immediate Action Required</p>
          <p className="text-sm text-red-700 mt-1">
            {failedPayments.length} payments failed. Registered{" "}
            {daysSinceRegistration} days ago. Escalation or suspension
            consideration needed.
          </p>
        </div>
      </div>

      <div className="grid gap-6 md:grid-cols-3">
        {/* Main Content */}
        <div className="md:col-span-2 space-y-6">
          {/* Failed Payments */}
          <Card className="border-red-300 bg-red-50">
            <CardHeader>
              <CardTitle className="text-red-900">
                Critical Payment Failures ({failedPayments.length})
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-3">
              {failedPayments.map((payment: any) => (
                <div
                  key={payment.paymentNumber}
                  className="bg-white border-2 border-red-300 rounded-lg p-4"
                >
                  <div className="flex items-start justify-between mb-3">
                    <div>
                      <p className="font-bold text-red-900">
                        Payment #{payment.paymentNumber}
                        {payment.paymentNumber === 1 && " (Down Payment)"}
                      </p>
                      <p className="text-sm text-gray-600 mt-1">
                        Failed {payment.attemptCount || 1} time
                        {payment.attemptCount > 1 ? "s" : ""}
                      </p>
                      {payment.lastAttempt && (
                        <p className="text-xs text-gray-500 mt-1">
                          Last attempt:{" "}
                          {format(
                            new Date(payment.lastAttempt),
                            "MMM dd, yyyy"
                          )}
                        </p>
                      )}
                    </div>
                    <Badge className="bg-red-200 text-red-900 border-red-400 font-bold">
                      Failed
                    </Badge>
                  </div>

                  <div className="flex gap-2">
                    <Button
                      size="sm"
                      className="flex-1 bg-yellow-600 hover:bg-yellow-700"
                      onClick={() => handleSendReminder(payment)}
                    >
                      <MessageSquare className="h-4 w-4 mr-2" />
                      Send Reminder
                    </Button>
                    {payment.paymentLink && (
                      <Button
                        size="sm"
                        variant="outline"
                        className="border-red-300"
                        asChild
                      >
                        <a
                          href={payment.paymentLink}
                          target="_blank"
                          rel="noopener noreferrer"
                        >
                          <ExternalLink className="h-4 w-4 mr-2" />
                          View Link
                        </a>
                      </Button>
                    )}
                  </div>
                </div>
              ))}
            </CardContent>
          </Card>

          {/* Payment Timeline */}
          <Card>
            <CardHeader>
              <CardTitle>Payment Timeline</CardTitle>
            </CardHeader>
            <CardContent className="space-y-3">
              {subscriptionPayments.map((payment: any) => (
                <div
                  key={payment.paymentNumber}
                  className={`flex items-center gap-4 p-3 rounded-lg border ${
                    payment.status === "failed"
                      ? "bg-red-50 border-red-300"
                      : ""
                  }`}
                >
                  <div
                    className={`flex items-center justify-center w-10 h-10 rounded-full ${
                      payment.status === "succeeded"
                        ? "bg-green-100"
                        : payment.status === "failed"
                        ? "bg-red-200"
                        : "bg-gray-100"
                    }`}
                  >
                    {payment.status === "succeeded" ? (
                      <CheckCircle2 className="h-5 w-5 text-green-600" />
                    ) : payment.status === "failed" ? (
                      <XCircle className="h-5 w-5 text-red-700" />
                    ) : (
                      <span className="text-sm font-medium text-gray-400">
                        {payment.paymentNumber}
                      </span>
                    )}
                  </div>
                  <div className="flex-1">
                    <p className="text-sm font-medium">
                      Payment #{payment.paymentNumber}
                      {payment.paymentNumber === 1 && " (Down Payment)"}
                    </p>
                    <p className="text-xs text-gray-500">
                      {payment.dueDate
                        ? format(new Date(payment.dueDate), "MMM dd, yyyy")
                        : "Date pending"}
                    </p>
                    {payment.status === "failed" && payment.attemptCount && (
                      <p className="text-xs text-red-600 font-medium mt-1">
                        {payment.attemptCount} attempt
                        {payment.attemptCount > 1 ? "s" : ""}
                      </p>
                    )}
                  </div>
                  <Badge
                    className={
                      payment.status === "succeeded"
                        ? "bg-green-100 text-green-800 border-green-200"
                        : payment.status === "failed"
                        ? "bg-red-200 text-red-900 border-red-400"
                        : "bg-gray-100 text-gray-800 border-gray-200"
                    }
                  >
                    {payment.status === "succeeded"
                      ? "Paid"
                      : payment.status === "failed"
                      ? "Failed"
                      : "Pending"}
                  </Badge>
                </div>
              ))}

              {/* Visual Progress Dots */}
              <div className="flex items-center gap-2 pt-4 border-t">
                <span className="text-sm text-gray-500 mr-2">Progress:</span>
                {Array(8)
                  .fill(null)
                  .map((_, index) => {
                    const payment = subscriptionPayments.find(
                      (p: any) => p.paymentNumber === index + 1
                    );
                    return (
                      <div
                        key={index}
                        className={`w-3 h-3 rounded-full ${
                          payment?.status === "succeeded"
                            ? "bg-green-500"
                            : payment?.status === "failed"
                            ? "bg-red-600"
                            : "bg-gray-300"
                        }`}
                        title={`Payment ${index + 1}: ${
                          payment?.status || "pending"
                        }`}
                      />
                    );
                  })}
              </div>
            </CardContent>
          </Card>

          {/* Contact Information */}
          <Card>
            <CardHeader>
              <CardTitle>Contact Information</CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              {player.user?.email && (
                <div className="flex items-center gap-3">
                  <Mail className="h-5 w-5 text-gray-400" />
                  <div>
                    <p className="text-sm text-gray-500">Email</p>
                    <p className="font-medium">{player.user.email}</p>
                  </div>
                </div>
              )}

              {player.user?.phoneNumber && (
                <div className="flex items-center gap-3">
                  <Phone className="h-5 w-5 text-gray-400" />
                  <div>
                    <p className="text-sm text-gray-500">Phone</p>
                    <p className="font-medium">{player.user.phoneNumber}</p>
                  </div>
                </div>
              )}

              {player.instagram && (
                <div className="flex items-center gap-3">
                  <InstagramIcon className="h-5 w-5 text-gray-400" />
                  <div>
                    <p className="text-sm text-gray-500">Instagram</p>
                    <p className="font-medium">{player.instagram}</p>
                  </div>
                </div>
              )}
            </CardContent>
          </Card>
        </div>

        {/* Sidebar */}
        <div className="space-y-4">
          <Card className="border-red-300">
            <CardHeader>
              <CardTitle className="text-red-900">Escalation Actions</CardTitle>
            </CardHeader>
            <CardContent className="space-y-3">
              {player.team && (
                <Button
                  className="w-full bg-orange-600 hover:bg-orange-700"
                  onClick={() => setShowEscalateModal(true)}
                >
                  <AlertOctagon className="h-4 w-4 mr-2" />
                  Escalate to Captain
                </Button>
              )}

              <Button
                variant="destructive"
                className="w-full"
                onClick={() => setShowSuspensionModal(true)}
              >
                <ShieldAlert className="h-4 w-4 mr-2" />
                Consider Suspension
              </Button>
            </CardContent>
          </Card>

          <Card>
            <CardHeader>
              <CardTitle>Status Summary</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="text-center py-4">
                <AlertOctagon className="mx-auto h-12 w-12 text-red-600 mb-3" />
                <p className="font-bold text-red-900 mb-1">Critical Risk</p>
                <p className="text-sm text-gray-500">
                  Immediate intervention required
                </p>
              </div>

              <div className="mt-6 pt-4 border-t space-y-3">
                <div className="flex justify-between text-sm">
                  <span className="text-gray-500">Successful:</span>
                  <span className="font-medium text-green-600">
                    {completedPayments}
                  </span>
                </div>
                <div className="flex justify-between text-sm">
                  <span className="text-gray-500">Failed:</span>
                  <span className="font-bold text-red-600">
                    {failedPayments.length}
                  </span>
                </div>
                <div className="flex justify-between text-sm">
                  <span className="text-gray-500">Pending:</span>
                  <span className="font-medium text-gray-600">
                    {totalPayments - completedPayments - failedPayments.length}
                  </span>
                </div>
              </div>

              <div className="mt-4 pt-4 border-t">
                <div className="text-sm mb-2">
                  <span className="text-gray-500">Progress:</span>
                  <span className="font-medium ml-2">
                    {progressPercentage}%
                  </span>
                </div>
                <div className="w-full bg-gray-200 rounded-full h-2">
                  <div
                    className="bg-red-600 h-2 rounded-full transition-all"
                    style={{ width: `${progressPercentage}%` }}
                  />
                </div>
              </div>

              <div className="mt-4 pt-4 border-t text-sm text-gray-500">
                <p>Registered {daysSinceRegistration} days ago</p>
              </div>
            </CardContent>
          </Card>

          <Card>
            <CardHeader>
              <CardTitle>Payment Details</CardTitle>
            </CardHeader>
            <CardContent className="space-y-3">
              <div className="text-sm">
                <p className="text-gray-500">Payment Type</p>
                <p className="font-medium">Installments (8 payments)</p>
              </div>
              <div className="text-sm">
                <p className="text-gray-500">Pricing Tier</p>
                <p className="font-medium">
                  {paymentMethod.pricingTier === "EARLY_BIRD"
                    ? "Early Bird"
                    : "Regular"}
                </p>
              </div>
            </CardContent>
          </Card>
        </div>
      </div>

      {/* Modals */}
      {selectedPayment && (
        <SendSpecificReminderModal
          open={showReminderModal}
          onOpenChange={setShowReminderModal}
          player={player}
          payment={selectedPayment}
          cityId={cityId}
        />
      )}

      {player.team && (
        <EscalateToCaptainModal
          open={showEscalateModal}
          onOpenChange={setShowEscalateModal}
          player={player}
          failedPaymentsCount={failedPayments.length}
          teamId={player.team._id}
          cityId={cityId}
        />
      )}

      <SuspensionWarningModal
        open={showSuspensionModal}
        onOpenChange={setShowSuspensionModal}
        player={player}
        failedPaymentsCount={failedPayments.length}
        cityId={cityId}
      />
    </div>
  );
}


----- components\features\payments\EscalateToCaptainModal.tsx -----

// src/components/features/payments/EscalateToCaptainModal.tsx

/**
 * SOLID - Single Responsibility Principle (SRP)
 * Escalate to team captain modal ONLY
 */

"use client";

import { useState } from "react";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogFooter,
} from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Loader2, AlertOctagon } from "lucide-react";
import { toast } from "sonner";

interface EscalateToCaptainModalProps {
  open: boolean;
  onOpenChange: (open: boolean) => void;
  player: any;
  failedPaymentsCount: number;
  teamId: string;
  cityId: string;
}

export function EscalateToCaptainModal({
  open,
  onOpenChange,
  player,
  failedPaymentsCount,
  teamId,
  cityId,
}: EscalateToCaptainModalProps) {
  const [isEscalating, setIsEscalating] = useState(false);

  const handleEscalate = async () => {
    setIsEscalating(true);
    try {
      const response = await fetch(`/api/v1/${cityId}/payments/escalate-captain`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          playerId: player._id,
          teamId,
          failedPaymentsCount,
        }),
      });

      if (!response.ok) throw new Error("Failed to escalate");

      toast.success("Team captain has been notified!");
      onOpenChange(false);
    } catch (error) {
      toast.error("Failed to escalate. Please try again.");
    } finally {
      setIsEscalating(false);
    }
  };

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent>
        <DialogHeader>
          <DialogTitle className="flex items-center gap-2">
            <AlertOctagon className="h-5 w-5 text-orange-600" />
            Escalate to Team Captain
          </DialogTitle>
          <DialogDescription>
            Notify the team captain about {player.playerName}'s critical payment issues.
          </DialogDescription>
        </DialogHeader>

        <div className="py-4 space-y-4">
          <div className="bg-orange-50 border border-orange-200 rounded-lg p-4">
            <p className="text-sm font-medium text-orange-900">Critical Payment Situation</p>
            <ul className="mt-2 space-y-1 text-sm text-orange-800">
              <li>• {failedPaymentsCount} payments have failed</li>
              <li>• Multiple reminder attempts made</li>
              <li>• Team captain intervention needed</li>
            </ul>
          </div>

          <p className="text-sm text-gray-600">
            The team captain will be notified via email and SMS to follow up urgently with 
            this player about completing their outstanding payments.
          </p>
        </div>

        <DialogFooter>
          <Button variant="outline" onClick={() => onOpenChange(false)}>
            Cancel
          </Button>
          <Button 
            onClick={handleEscalate} 
            disabled={isEscalating}
            className="bg-orange-600 hover:bg-orange-700"
          >
            {isEscalating ? (
              <>
                <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                Escalating...
              </>
            ) : (
              "Escalate to Captain"
            )}
          </Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
}

----- components\features\payments\HasIssuesPlayerView.tsx -----

// src/components/features/payments/HasIssuesPlayerView.tsx

/**
 * SOLID - Single Responsibility Principle (SRP)
 * Has issues installment player detail view ONLY
 */

"use client";

import { useEffect, useState } from "react";
import Link from "next/link";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import {
  ArrowLeft,
  AlertTriangle,
  Mail,
  Phone,
  Instagram as InstagramIcon,
  Calendar,
  Users,
  MapPin,
  CheckCircle2,
  XCircle,
  ExternalLink,
  MessageSquare,
  CreditCard,
  Zap,
} from "lucide-react";
import { format, sub } from "date-fns";
import { SendSpecificReminderModal } from "./SendSpecificReminderModal";
import { NotifyCaptainModal } from "./NotifyCaptainModal";
import { ChargeCardModal } from "./ChargeCardModal";
import { SendPaymentLinkModal } from "./SendPaymentLinkModal";

interface HasIssuesPlayerViewProps {
  player: any;
  paymentMethod: any;
  cityId: string;
}

export function HasIssuesPlayerView({
  player,
  paymentMethod,
  cityId,
}: HasIssuesPlayerViewProps) {
  const [selectedPayment, setSelectedPayment] = useState<any>(null);
  const [showReminderModal, setShowReminderModal] = useState(false);
  const [showCaptainModal, setShowCaptainModal] = useState(false);
  const [showChargeModal, setShowChargeModal] = useState(false);
  const [showPaymentLinkModal, setShowPaymentLinkModal] = useState(false);
  const [cardInfo, setCardInfo] = useState<any>(null);
  const [loadingCard, setLoadingCard] = useState(true);

  const subscriptionPayments =
    paymentMethod.installments?.subscriptionPayments || [];
  const completedPayments = subscriptionPayments.filter(
    (p: any) => p.status === "succeeded"
  ).length;
  const failedPayments = subscriptionPayments.filter(
    (p: any) => p.status === "failed"
  );
  const totalPayments = 8;
  const progressPercentage = Math.round(
    (completedPayments / totalPayments) * 100
  );

  console.log("subscriptionPayments:", subscriptionPayments);

  const handleSendReminder = (payment: any) => {
    setSelectedPayment(payment);
    setShowReminderModal(true);
  };

  // Load card info on mount
  useEffect(() => {
    const loadCardInfo = async () => {
      if (!player.customerId) {
        setLoadingCard(false);
        return;
      }

      try {
        const response = await fetch(
          `/api/v1/payments/card-info/${player.customerId}`
        );
        console.log("response:", response);

        if (response.ok) {
          const data = await response.json();
          console.log("data.data:", data.data);

          setCardInfo(data.data);
        }
      } catch (error) {
        console.error("Error loading card info:", error);
      } finally {
        setLoadingCard(false);
      }
    };

    loadCardInfo();
  }, [player.customerId, cityId]);

  console.log("player.customerId:", player.customerId);

  const handleChargeCard = (payment: any) => {
    setSelectedPayment(payment);
    setShowChargeModal(true);
  };

  const handleSendPaymentLink = (payment: any) => {
    setSelectedPayment(payment);
    setShowPaymentLinkModal(true);
  };

  const getCardDisplay = () => {
    if (loadingCard) {
      return (
        <div className="flex items-center gap-2 text-sm text-gray-500">
          <CreditCard className="h-4 w-4 animate-pulse" />
          <span>Loading card info...</span>
        </div>
      );
    }

    if (!cardInfo?.hasCard) {
      return (
        <div className="flex items-center gap-2 text-sm text-gray-500">
          <CreditCard className="h-4 w-4" />
          <span>No card on file</span>
        </div>
      );
    }

    const brandDisplay =
      cardInfo.brand.charAt(0).toUpperCase() + cardInfo.brand.slice(1);

    return (
      <div className="flex items-center gap-2 text-sm">
        <CreditCard className="h-4 w-4 text-gray-400" />
        <span
          className={cardInfo.isValid ? "text-gray-900" : "text-orange-600"}
        >
          {brandDisplay} ****{cardInfo.last4}
        </span>
        <span className="text-gray-500">
          (Exp: {cardInfo.expMonth}/{cardInfo.expYear})
        </span>
        {cardInfo.isValid ? (
          <Badge className="bg-green-100 text-green-800 border-green-200 text-xs">
            ✓ Valid
          </Badge>
        ) : (
          <Badge className="bg-orange-100 text-orange-800 border-orange-200 text-xs">
            ⚠️ Expired
          </Badge>
        )}
      </div>
    );
  };

  return (
    <div className="p-6 space-y-6">
      {/* Header */}
      <div className="flex items-center gap-4">
        <Button variant="ghost" size="sm" asChild>
          <Link href={`/admin/payments`}>
            <ArrowLeft className="h-4 w-4 mr-2" />
            Back to Payments
          </Link>
        </Button>
      </div>

      {/* Player Overview */}
      <div>
        <div className="flex items-center gap-3 mb-2">
          <h1 className="text-3xl font-bold tracking-tight">
            {player.playerName}
          </h1>
          <Badge className="bg-yellow-100 text-yellow-800 border-yellow-200">
            <AlertTriangle className="h-3 w-3 mr-1" />
            Has Issues
          </Badge>
        </div>
        <p className="text-gray-600">
          {player.team?.teamName || "No Team"} • {player.division?.divisionName}
        </p>
        <div className="mt-2">{getCardDisplay()}</div>
      </div>

      {/* Warning Message */}
      <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-4 flex items-start gap-3">
        <AlertTriangle className="h-5 w-5 text-yellow-600 flex-shrink-0 mt-0.5" />
        <div>
          <p className="font-medium text-yellow-900">Payment Issues Detected</p>
          <p className="text-sm text-yellow-700 mt-1">
            {failedPayments.length} payment
            {failedPayments.length > 1 ? "s" : ""} failed. Commissioner
            follow-up recommended.
          </p>
        </div>
      </div>

      <div className="grid gap-6 md:grid-cols-3">
        {/* Main Content */}
        <div className="md:col-span-2 space-y-6">
          {/* Failed Payments Alert */}
          <Card className="border-yellow-200 bg-yellow-50">
            <CardHeader>
              <CardTitle className="text-yellow-900">Failed Payments</CardTitle>
            </CardHeader>
            <CardContent className="space-y-3">
              {failedPayments.map((payment: any) => {
                const amount =
                  payment.paymentNumber === 1
                    ? 60
                    : paymentMethod.pricingTier === "EARLY_BIRD"
                    ? 25
                    : 30;

                return (
                  <div
                    key={payment.paymentNumber}
                    className="bg-white border border-red-200 rounded-lg p-4"
                  >
                    <div className="flex items-start justify-between mb-3">
                      <div>
                        <p className="font-medium text-red-900">
                          Payment #{payment.paymentNumber}
                          {payment.paymentNumber === 1 && " (Down Payment)"}
                        </p>
                        <p className="text-sm text-gray-600 mt-1">
                          Amount: ${amount} • Failed {payment.attemptCount || 1}{" "}
                          time
                          {payment.attemptCount > 1 ? "s" : ""}
                        </p>
                        {payment.lastAttempt && (
                          <p className="text-xs text-gray-500 mt-1">
                            Last attempt:{" "}
                            {format(
                              new Date(payment.lastAttempt),
                              "MMM dd, yyyy"
                            )}
                          </p>
                        )}
                      </div>
                      <Badge className="bg-red-100 text-red-800 border-red-200">
                        Failed
                      </Badge>
                    </div>

                    <div className="flex gap-2">
                      {cardInfo?.isValid ? (
                        <Button
                          size="sm"
                          className="flex-1 bg-blue-600 hover:bg-blue-700"
                          onClick={() => handleChargeCard(payment)}
                        >
                          <Zap className="h-4 w-4 mr-2" />
                          Charge Card Now
                        </Button>
                      ) : null}

                      <Button
                        size="sm"
                        variant="outline"
                        className={cardInfo?.isValid ? "flex-1" : "flex-1"}
                        onClick={() => handleSendPaymentLink(payment)}
                      >
                        <MessageSquare className="h-4 w-4 mr-2" />
                        Send Payment Link
                      </Button>

                      {payment.paymentLink && (
                        <Button size="sm" variant="outline" asChild>
                          <a
                            href={payment.paymentLink}
                            target="_blank"
                            rel="noopener noreferrer"
                          >
                            <ExternalLink className="h-4 w-4" />
                          </a>
                        </Button>
                      )}
                    </div>
                  </div>
                );
              })}
            </CardContent>
          </Card>

          {/* Payment Timeline */}
          <Card>
            <CardHeader>
              <CardTitle>Payment Timeline</CardTitle>
            </CardHeader>
            <CardContent className="space-y-3">
              {subscriptionPayments.map((payment: any, index: number) => (
                <div
                  key={payment.paymentNumber || index + 1}
                  className={`flex items-center gap-4 p-3 rounded-lg border ${
                    payment.status === "failed"
                      ? "bg-red-50 border-red-200"
                      : ""
                  }`}
                >
                  <div
                    className={`flex items-center justify-center w-10 h-10 rounded-full ${
                      payment.status === "succeeded"
                        ? "bg-green-100"
                        : payment.status === "failed"
                        ? "bg-red-100"
                        : "bg-gray-100"
                    }`}
                  >
                    {payment.status === "succeeded" ? (
                      <CheckCircle2 className="h-5 w-5 text-green-600" />
                    ) : payment.status === "failed" ? (
                      <XCircle className="h-5 w-5 text-red-600" />
                    ) : (
                      <span className="text-sm font-medium text-gray-400">
                        {payment.paymentNumber}
                      </span>
                    )}
                  </div>
                  <div className="flex-1">
                    <p className="text-sm font-medium">
                      Payment #{payment.paymentNumber || index + 1}
                      {payment.paymentNumber === 1 || index === 0
                        ? " (Down Payment)"
                        : ""}
                    </p>
                    <p className="text-xs text-gray-500">
                      {payment.dueDate
                        ? format(new Date(payment.dueDate), "MMM dd, yyyy")
                        : "Date pending"}
                    </p>
                    {payment.status === "failed" && payment.attemptCount && (
                      <p className="text-xs text-red-600 mt-1">
                        {payment.attemptCount} attempt
                        {payment.attemptCount > 1 ? "s" : ""}
                      </p>
                    )}
                  </div>
                  <Badge
                    className={
                      payment.status === "succeeded"
                        ? "bg-green-100 text-green-800 border-green-200"
                        : payment.status === "failed"
                        ? "bg-red-100 text-red-800 border-red-200"
                        : "bg-gray-100 text-gray-800 border-gray-200"
                    }
                  >
                    {payment.status === "succeeded"
                      ? "Paid"
                      : payment.status === "failed"
                      ? "Failed"
                      : "Pending"}
                  </Badge>
                </div>
              ))}

              {/* Visual Progress Dots */}
              <div className="flex items-center gap-2 pt-4 border-t">
                <span className="text-sm text-gray-500 mr-2">Progress:</span>
                {Array(8)
                  .fill(null)
                  .map((_, index) => {
                    // const payment = subscriptionPayments.find(
                    //   (p: any) => p.paymentNumber === index + 1
                    // );

                    const payment = subscriptionPayments[index]; // take the payment directly by array order

                    return (
                      <div
                        key={index}
                        className={`w-3 h-3 rounded-full ${
                          payment?.status === "succeeded"
                            ? "bg-green-500"
                            : payment?.status === "failed"
                            ? "bg-red-500"
                            : "bg-gray-300"
                        }`}
                        title={`Payment ${index + 1}: ${
                          payment?.status || "pending"
                        }`}
                      />
                    );
                  })}
              </div>
            </CardContent>
          </Card>

          {/* Contact Information */}
          <Card>
            <CardHeader>
              <CardTitle>Contact Information</CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              {player.user?.email && (
                <div className="flex items-center gap-3">
                  <Mail className="h-5 w-5 text-gray-400" />
                  <div>
                    <p className="text-sm text-gray-500">Email</p>
                    <p className="font-medium">{player.user.email}</p>
                  </div>
                </div>
              )}

              {player.user?.phoneNumber && (
                <div className="flex items-center gap-3">
                  <Phone className="h-5 w-5 text-gray-400" />
                  <div>
                    <p className="text-sm text-gray-500">Phone</p>
                    <p className="font-medium">{player.user.phoneNumber}</p>
                  </div>
                </div>
              )}

              {player.instagram && (
                <div className="flex items-center gap-3">
                  <InstagramIcon className="h-5 w-5 text-gray-400" />
                  <div>
                    <p className="text-sm text-gray-500">Instagram</p>
                    <p className="font-medium">{player.instagram}</p>
                  </div>
                </div>
              )}
            </CardContent>
          </Card>
        </div>

        {/* Sidebar */}
        <div className="space-y-4">
          <Card>
            <CardHeader>
              <CardTitle>Quick Actions</CardTitle>
            </CardHeader>
            <CardContent className="space-y-3">
              {player.team && (
                <Button
                  variant="outline"
                  className="w-full"
                  onClick={() => setShowCaptainModal(true)}
                >
                  Notify Team Captain
                </Button>
              )}
            </CardContent>
          </Card>

          <Card>
            <CardHeader>
              <CardTitle>Status Summary</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="text-center py-4">
                <AlertTriangle className="mx-auto h-12 w-12 text-yellow-500 mb-3" />
                <p className="font-medium text-yellow-900 mb-1">
                  Needs Attention
                </p>
                <p className="text-sm text-gray-500">Follow up recommended</p>
              </div>

              <div className="mt-6 pt-4 border-t space-y-3">
                <div className="flex justify-between text-sm">
                  <span className="text-gray-500">Successful:</span>
                  <span className="font-medium text-green-600">
                    {completedPayments}
                  </span>
                </div>
                <div className="flex justify-between text-sm">
                  <span className="text-gray-500">Failed:</span>
                  <span className="font-medium text-red-600">
                    {failedPayments.length}
                  </span>
                </div>
                <div className="flex justify-between text-sm">
                  <span className="text-gray-500">Pending:</span>
                  <span className="font-medium text-gray-600">
                    {totalPayments - completedPayments - failedPayments.length}
                  </span>
                </div>
              </div>

              <div className="mt-4 pt-4 border-t">
                <div className="text-sm mb-2">
                  <span className="text-gray-500">Progress:</span>
                  <span className="font-medium ml-2">
                    {progressPercentage}%
                  </span>
                </div>
                <div className="w-full bg-gray-200 rounded-full h-2">
                  <div
                    className="bg-yellow-500 h-2 rounded-full transition-all"
                    style={{ width: `${progressPercentage}%` }}
                  />
                </div>
              </div>
            </CardContent>
          </Card>

          <Card>
            <CardHeader>
              <CardTitle>Payment Details</CardTitle>
            </CardHeader>
            <CardContent className="space-y-3">
              <div className="text-sm">
                <p className="text-gray-500">Payment Type</p>
                <p className="font-medium">Installments (8 payments)</p>
              </div>
              <div className="text-sm">
                <p className="text-gray-500">Pricing Tier</p>
                <p className="font-medium">
                  {paymentMethod.pricingTier === "EARLY_BIRD"
                    ? "Early Bird"
                    : "Regular"}
                </p>
              </div>
            </CardContent>
          </Card>
        </div>
      </div>

      {/* Modals */}
      {selectedPayment && cardInfo?.isValid && (
        <ChargeCardModal
          open={showChargeModal}
          onOpenChange={setShowChargeModal}
          player={player}
          payment={selectedPayment}
          cardInfo={cardInfo}
          paymentMethod={paymentMethod}
          cityId={cityId}
        />
      )}

      {selectedPayment && (
        <SendPaymentLinkModal
          open={showPaymentLinkModal}
          onOpenChange={setShowPaymentLinkModal}
          player={player}
          payment={selectedPayment}
          paymentMethod={paymentMethod}
          cityId={cityId}
        />
      )}

      {selectedPayment && (
        <SendSpecificReminderModal
          open={showReminderModal}
          onOpenChange={setShowReminderModal}
          player={player}
          payment={selectedPayment}
          cityId={cityId}
        />
      )}

      {player.team && (
        <NotifyCaptainModal
          open={showCaptainModal}
          onOpenChange={setShowCaptainModal}
          player={player}
          teamId={player.team._id}
          cityId={cityId}
        />
      )}
    </div>
  );
}


----- components\features\payments\InstallmentProgress.tsx -----

// src/components/features/payments/InstallmentProgress.tsx

/**
 * SOLID - Single Responsibility Principle (SRP)
 * Installment payment progress visualization ONLY
 */

"use client";

export function InstallmentProgress({
  payments,
  size = "md",
}: {
  payments: any[];
  size?: "sm" | "md" | "lg";
}) {
  const dotSize = {
    sm: "w-2 h-2",
    md: "w-3 h-3",
    lg: "w-4 h-4",
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case "succeeded":
        return "bg-green-500";
      case "failed":
        return "bg-red-500";
      default:
        return "bg-gray-300";
    }
  };

  let allPayments;
  if (payments) {
    // Always show 8 dots, map by array index instead of paymentNumber
    allPayments = Array(8)
      .fill(null)
      .map((_, index) => {
        const payment = payments[index]; // take the payment directly by array order
        return {
          paymentNumber: index + 1,
          status: payment?.status || "pending",
        };
      });
  }

  return (
    <div className="flex items-center gap-1">
      {allPayments &&
        allPayments.map((payment, index) => (
          <div
            key={index}
            className={`${dotSize[size]} rounded-full ${getStatusColor(
              payment.status
            )} transition-colors`}
            title={`Payment ${payment.paymentNumber}: ${
              index === 0 ? `${payment.status} (Down Payment)` : payment.status
            }`}
          />
        ))}
    </div>
  );
}


----- components\features\payments\NotifyCaptainModal.tsx -----

// src/components/features/payments/NotifyCaptainModal.tsx

/**
 * SOLID - Single Responsibility Principle (SRP)
 * Notify team captain modal ONLY
 */

"use client";

import { useState } from "react";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogFooter,
} from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Loader2 } from "lucide-react";
import { toast } from "sonner";

interface NotifyCaptainModalProps {
  open: boolean;
  onOpenChange: (open: boolean) => void;
  player: any;
  teamId: string;
  cityId: string;
}

export function NotifyCaptainModal({
  open,
  onOpenChange,
  player,
  teamId,
  cityId,
}: NotifyCaptainModalProps) {
  const [isSending, setIsSending] = useState(false);

  const handleNotify = async () => {
    setIsSending(true);
    try {
      const response = await fetch(`/api/v1/${cityId}/payments/notify-captain`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          playerId: player._id,
          teamId,
        }),
      });

      if (!response.ok) throw new Error("Failed to notify captain");

      toast.success("Team captain notified successfully!");
      onOpenChange(false);
    } catch (error) {
      toast.error("Failed to notify captain. Please try again.");
    } finally {
      setIsSending(false);
    }
  };

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent>
        <DialogHeader>
          <DialogTitle>Notify Team Captain</DialogTitle>
          <DialogDescription>
            Send a notification to the team captain about {player.playerName}'s
            unpaid registration.
          </DialogDescription>
        </DialogHeader>

        <div className="py-4">
          <p className="text-sm text-gray-600">
            The team captain will be notified to follow up with this player about
            completing their payment.
          </p>
        </div>

        <DialogFooter>
          <Button variant="outline" onClick={() => onOpenChange(false)}>
            Cancel
          </Button>
          <Button onClick={handleNotify} disabled={isSending}>
            {isSending ? (
              <>
                <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                Notifying...
              </>
            ) : (
              "Notify Captain"
            )}
          </Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
}

----- components\features\payments\OnTrackPlayerView.tsx -----

// src/components/features/payments/OnTrackPlayerView.tsx

/**
 * SOLID - Single Responsibility Principle (SRP)
 * On-track installment player detail view ONLY
 */

"use client";

import Link from "next/link";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import {
  ArrowLeft,
  TrendingUp,
  Mail,
  Phone,
  Instagram as InstagramIcon,
  Calendar,
  Users,
  MapPin,
  CheckCircle2,
} from "lucide-react";
import { format } from "date-fns";

interface OnTrackPlayerViewProps {
  player: any;
  paymentMethod: any;
  cityId: string;
}

export function OnTrackPlayerView({
  player,
  paymentMethod,
  cityId,
}: OnTrackPlayerViewProps) {
  const subscriptionPayments =
    paymentMethod.installments?.subscriptionPayments || [];
  const completedPayments = subscriptionPayments.filter(
    (p: any) => p.status === "succeeded"
  ).length;
  const totalPayments = 8; // 1 down + 7 weekly
  const progressPercentage = Math.round(
    (completedPayments / totalPayments) * 100
  );

  const nextPayment = subscriptionPayments.find(
    (p: any) => p.status === "pending"
  );

  console.log("player:", player);
  console.log("paymentMethod:", paymentMethod);
  console.log("subscriptionPayments:", subscriptionPayments);

  return (
    <div className="p-6 space-y-6">
      {/* Header */}
      <div className="flex items-center gap-4">
        <Button variant="ghost" size="sm" asChild>
          <Link href={`/admin/payments`}>
            <ArrowLeft className="h-4 w-4 mr-2" />
            Back to Payments
          </Link>
        </Button>
      </div>

      {/* Player Overview */}
      <div>
        <div className="flex items-center gap-3 mb-2">
          <h1 className="text-3xl font-bold tracking-tight">
            {player.playerName}
          </h1>
          <Badge className="bg-green-100 text-green-800 border-green-200">
            <TrendingUp className="h-3 w-3 mr-1" />
            On Track
          </Badge>
        </div>
        <p className="text-gray-600">
          {player.team?.teamName || "No Team"} • {player.division?.divisionName}
        </p>
      </div>

      {/* Success Message */}
      <div className="bg-green-50 border border-green-200 rounded-lg p-4 flex items-start gap-3">
        <CheckCircle2 className="h-5 w-5 text-green-600 flex-shrink-0 mt-0.5" />
        <div>
          <p className="font-medium text-green-900">Payment Plan Active</p>
          <p className="text-sm text-green-700 mt-1">
            All payments made on time. {completedPayments} of {totalPayments}{" "}
            payments completed ({progressPercentage}%).
          </p>
        </div>
      </div>

      <div className="grid gap-6 md:grid-cols-3">
        {/* Main Content */}
        <div className="md:col-span-2 space-y-6">
          {/* Payment Progress */}
          <Card>
            <CardHeader>
              <CardTitle>Payment Progress</CardTitle>
            </CardHeader>
            <CardContent className="space-y-6">
              {/* Progress Bar */}
              <div>
                <div className="flex justify-between text-sm mb-2">
                  <span className="font-medium">
                    {completedPayments} of {totalPayments} payments completed
                  </span>
                  <span className="text-gray-500">{progressPercentage}%</span>
                </div>
                <div className="w-full bg-gray-200 rounded-full h-3">
                  <div
                    className="bg-green-500 h-3 rounded-full transition-all"
                    style={{ width: `${progressPercentage}%` }}
                  />
                </div>
              </div>

              {/* Next Payment */}
              {nextPayment && (
                <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
                  <p className="text-sm font-medium text-blue-900 mb-1">
                    Next Payment Due
                  </p>
                  {/* <p className="text-sm text-blue-700">
                    {nextPayment.dueDate
                      ? format(new Date(nextPayment.dueDate), "MMMM dd, yyyy")
                      : "Date pending"}
                  </p> */}
                </div>
              )}

              {/* Payment Timeline */}
              <div className="space-y-3">
                <p className="text-sm font-medium text-gray-700">
                  Payment Timeline
                </p>
                {subscriptionPayments.map((payment: any, index: number) => (
                  <div
                    key={payment.paymentNumber || index}
                    className="flex items-center gap-4 p-3 rounded-lg border"
                  >
                    <div className="flex items-center justify-center w-10 h-10 rounded-full bg-green-100">
                      {payment.status === "succeeded" ? (
                        <CheckCircle2 className="h-5 w-5 text-green-600" />
                      ) : (
                        <span className="text-sm font-medium text-gray-400">
                          {payment.paymentNumber}
                        </span>
                      )}
                    </div>
                    <div className="flex-1">
                      <p className="text-sm font-medium">
                        Payment #{payment.paymentNumber || index + 1}
                        {payment.paymentNumber === 1 || index === 0
                          ? " (Down Payment)"
                          : ""}
                      </p>
                      {/* <p className="text-xs text-gray-500">
                        {payment.dueDate
                          ? format(new Date(payment.dueDate), "MMM dd, yyyy")
                          : "Date pending"}
                      </p> */}
                    </div>
                    <Badge className="bg-green-100 text-green-800 border-green-200">
                      {payment.status === "succeeded" ? "Paid" : "Pending"}
                    </Badge>
                  </div>
                ))}
              </div>

              {/* Visual Progress Dots */}
              <div className="flex items-center gap-2 pt-4 border-t">
                <span className="text-sm text-gray-500 mr-2">Progress:</span>
                {Array(8)
                  .fill(null)
                  .map((_, index) => {
                    // get payment at this index directly from array (instead of by paymentNumber)
                    const payment = subscriptionPayments[index];

                    // fallback if payment doesn't exist
                    const isCompleted = payment?.status === "succeeded";

                    return (
                      <div
                        key={index}
                        className={`w-3 h-3 rounded-full ${
                          isCompleted ? "bg-green-500" : "bg-gray-300"
                        }`}
                        title={`Payment ${index + 1}: ${
                          isCompleted ? "Succeeded" : "Pending"
                        }`}
                      />
                    );
                  })}
              </div>
            </CardContent>
          </Card>

          {/* Player Information */}
          <Card>
            <CardHeader>
              <CardTitle>Player Information</CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="flex items-center gap-3">
                <Users className="h-5 w-5 text-gray-400" />
                <div>
                  <p className="text-sm text-gray-500">Team</p>
                  <p className="font-medium">
                    {player.team?.teamName || "No Team Assigned"}
                  </p>
                </div>
              </div>

              <div className="flex items-center gap-3">
                <MapPin className="h-5 w-5 text-gray-400" />
                <div>
                  <p className="text-sm text-gray-500">Division</p>
                  <p className="font-medium">{player.division?.divisionName}</p>
                </div>
              </div>

              <div className="flex items-center gap-3">
                <Calendar className="h-5 w-5 text-gray-400" />
                <div>
                  <p className="text-sm text-gray-500">Registration Date</p>
                  <p className="font-medium">
                    {player.createdAt
                      ? format(new Date(player.createdAt), "MMM dd, yyyy")
                      : "Unknown"}
                  </p>
                </div>
              </div>
            </CardContent>
          </Card>

          {/* Contact Information */}
          <Card>
            <CardHeader>
              <CardTitle>Contact Information</CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              {player.user?.email && (
                <div className="flex items-center gap-3">
                  <Mail className="h-5 w-5 text-gray-400" />
                  <div>
                    <p className="text-sm text-gray-500">Email</p>
                    <p className="font-medium">{player.user.email}</p>
                  </div>
                </div>
              )}

              {player.user?.phoneNumber && (
                <div className="flex items-center gap-3">
                  <Phone className="h-5 w-5 text-gray-400" />
                  <div>
                    <p className="text-sm text-gray-500">Phone</p>
                    <p className="font-medium">{player.user.phoneNumber}</p>
                  </div>
                </div>
              )}

              {player.instagram && (
                <div className="flex items-center gap-3">
                  <InstagramIcon className="h-5 w-5 text-gray-400" />
                  <div>
                    <p className="text-sm text-gray-500">Instagram</p>
                    <p className="font-medium">{player.instagram}</p>
                  </div>
                </div>
              )}
            </CardContent>
          </Card>
        </div>

        {/* Sidebar */}
        <div className="space-y-4">
          <Card>
            <CardHeader>
              <CardTitle>Status Summary</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="text-center py-4">
                <TrendingUp className="mx-auto h-12 w-12 text-green-500 mb-3" />
                <p className="font-medium text-green-900 mb-1">On Track</p>
                <p className="text-sm text-gray-500">
                  No commissioner action needed
                </p>
              </div>

              <div className="mt-6 pt-4 border-t space-y-3">
                <div className="flex justify-between text-sm">
                  <span className="text-gray-500">Successful:</span>
                  <span className="font-medium text-green-600">
                    {completedPayments}
                  </span>
                </div>
                <div className="flex justify-between text-sm">
                  <span className="text-gray-500">Pending:</span>
                  <span className="font-medium text-gray-600">
                    {totalPayments - completedPayments}
                  </span>
                </div>
                <div className="flex justify-between text-sm">
                  <span className="text-gray-500">Failed:</span>
                  <span className="font-medium text-gray-600">0</span>
                </div>
              </div>
            </CardContent>
          </Card>

          <Card>
            <CardHeader>
              <CardTitle>Payment Details</CardTitle>
            </CardHeader>
            <CardContent className="space-y-3">
              <div className="text-sm">
                <p className="text-gray-500">Payment Type</p>
                <p className="font-medium">Installments (8 payments)</p>
              </div>
              <div className="text-sm">
                <p className="text-gray-500">Pricing Tier</p>
                <p className="font-medium">
                  {paymentMethod.pricingTier === "EARLY_BIRD"
                    ? "Early Bird"
                    : "Regular"}
                </p>
              </div>
            </CardContent>
          </Card>
        </div>
      </div>
    </div>
  );
}


----- components\features\payments\PaidPlayerView.tsx -----

// src/components/features/payments/PaidPlayerView.tsx

/**
 * SOLID - Single Responsibility Principle (SRP)
 * Fully paid player detail view ONLY
 */

"use client";

import Link from "next/link";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import {
  ArrowLeft,
  CheckCircle2,
  Mail,
  Phone,
  Instagram as InstagramIcon,
  Calendar,
  Users,
  MapPin,
  CreditCard,
} from "lucide-react";
import { format } from "date-fns";

interface PaidPlayerViewProps {
  player: any;
  paymentMethod: any;
  cityId: string;
}

export function PaidPlayerView({
  player,
  paymentMethod,
  cityId,
}: PaidPlayerViewProps) {
  return (
    <div className="p-6 space-y-6">
      {/* Header */}
      <div className="flex items-center gap-4">
        <Button variant="ghost" size="sm" asChild>
          <Link href={`/admin/payments`}>
            <ArrowLeft className="h-4 w-4 mr-2" />
            Back to Payments
          </Link>
        </Button>
      </div>

      {/* Player Overview */}
      <div>
        <div className="flex items-center gap-3 mb-2">
          <h1 className="text-3xl font-bold tracking-tight">
            {player.playerName}
          </h1>
          <Badge className="bg-green-100 text-green-800 border-green-200">
            Payment Complete
          </Badge>
        </div>
        <p className="text-gray-600">
          {player.team?.teamName || "No Team"} • {player.division?.divisionName}
        </p>
      </div>

      {/* Success Message */}
      <div className="bg-green-50 border border-green-200 rounded-lg p-4 flex items-start gap-3">
        <CheckCircle2 className="h-5 w-5 text-green-600 flex-shrink-0 mt-0.5" />
        <div>
          <p className="font-medium text-green-900">All Set!</p>
          <p className="text-sm text-green-700 mt-1">
            Payment completed. No further action required.
          </p>
        </div>
      </div>

      <div className="grid gap-6 md:grid-cols-3">
        {/* Main Content */}
        <div className="md:col-span-2 space-y-6">
          {/* Payment Details */}
          <Card>
            <CardHeader>
              <CardTitle>Payment Details</CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="flex items-center gap-3">
                <CreditCard className="h-5 w-5 text-gray-400" />
                <div>
                  <p className="text-sm text-gray-500">Payment Type</p>
                  <p className="font-medium">
                    {paymentMethod.paymentType === "FULL_PAYMENT"
                      ? "Full Payment"
                      : "Installments"}
                  </p>
                </div>
              </div>

              <div className="flex items-center gap-3">
                <CheckCircle2 className="h-5 w-5 text-gray-400" />
                <div>
                  <p className="text-sm text-gray-500">Status</p>
                  <p className="font-medium">Completed</p>
                </div>
              </div>

              <div className="flex items-center gap-3">
                <Calendar className="h-5 w-5 text-gray-400" />
                <div>
                  <p className="text-sm text-gray-500">Payment Date</p>
                  <p className="font-medium">
                    {paymentMethod.createdAt
                      ? format(
                          new Date(paymentMethod.createdAt),
                          "MMM dd, yyyy"
                        )
                      : "Unknown"}
                  </p>
                </div>
              </div>

              <div className="flex items-center gap-3">
                <div className="w-5 h-5 flex items-center justify-center">
                  <span className="text-sm font-bold text-gray-400">
                    {paymentMethod.pricingTier === "EARLY_BIRD" ? "EB" : "R"}
                  </span>
                </div>
                <div>
                  <p className="text-sm text-gray-500">Pricing Tier</p>
                  <p className="font-medium">
                    {paymentMethod.pricingTier === "EARLY_BIRD"
                      ? "Early Bird"
                      : "Regular"}
                  </p>
                </div>
              </div>
            </CardContent>
          </Card>

          {/* Player Information */}
          <Card>
            <CardHeader>
              <CardTitle>Player Information</CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="flex items-center gap-3">
                <Users className="h-5 w-5 text-gray-400" />
                <div>
                  <p className="text-sm text-gray-500">Team</p>
                  <p className="font-medium">
                    {player.team?.teamName || "No Team Assigned"}
                  </p>
                </div>
              </div>

              <div className="flex items-center gap-3">
                <MapPin className="h-5 w-5 text-gray-400" />
                <div>
                  <p className="text-sm text-gray-500">Division</p>
                  <p className="font-medium">{player.division?.divisionName}</p>
                </div>
              </div>

              <div className="flex items-center gap-3">
                <Calendar className="h-5 w-5 text-gray-400" />
                <div>
                  <p className="text-sm text-gray-500">Registration Date</p>
                  <p className="font-medium">
                    {player.createdAt
                      ? format(new Date(player.createdAt), "MMM dd, yyyy")
                      : "Unknown"}
                  </p>
                </div>
              </div>
            </CardContent>
          </Card>

          {/* Contact Information */}
          <Card>
            <CardHeader>
              <CardTitle>Contact Information</CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              {player.user?.email && (
                <div className="flex items-center gap-3">
                  <Mail className="h-5 w-5 text-gray-400" />
                  <div>
                    <p className="text-sm text-gray-500">Email</p>
                    <p className="font-medium">{player.user.email}</p>
                  </div>
                </div>
              )}

              {player.user?.phoneNumber && (
                <div className="flex items-center gap-3">
                  <Phone className="h-5 w-5 text-gray-400" />
                  <div>
                    <p className="text-sm text-gray-500">Phone</p>
                    <p className="font-medium">{player.user.phoneNumber}</p>
                  </div>
                </div>
              )}

              {player.instagram && (
                <div className="flex items-center gap-3">
                  <InstagramIcon className="h-5 w-5 text-gray-400" />
                  <div>
                    <p className="text-sm text-gray-500">Instagram</p>
                    <p className="font-medium">{player.instagram}</p>
                  </div>
                </div>
              )}
            </CardContent>
          </Card>
        </div>

        {/* Sidebar */}
        <div className="space-y-4">
          <Card>
            <CardHeader>
              <CardTitle>Payment Status</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="text-center py-6">
                <CheckCircle2 className="mx-auto h-16 w-16 text-green-500 mb-4" />
                <p className="font-medium text-green-900 mb-1">
                  Payment Complete
                </p>
                <p className="text-sm text-gray-500">
                  {paymentMethod.createdAt
                    ? format(new Date(paymentMethod.createdAt), "MMM dd, yyyy")
                    : "Date unknown"}
                </p>
              </div>
            </CardContent>
          </Card>

          <Card>
            <CardHeader>
              <CardTitle>Registration Timeline</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                <div className="flex gap-3">
                  <div className="flex flex-col items-center">
                    <div className="w-2 h-2 bg-green-500 rounded-full" />
                    <div className="w-0.5 h-full bg-green-500" />
                  </div>
                  <div className="pb-4">
                    <p className="text-sm font-medium">Player Registered</p>
                    <p className="text-xs text-gray-500">
                      {player.createdAt
                        ? format(new Date(player.createdAt), "MMM dd, yyyy")
                        : "Unknown"}
                    </p>
                  </div>
                </div>

                <div className="flex gap-3">
                  <div className="flex flex-col items-center">
                    <div className="w-2 h-2 bg-green-500 rounded-full" />
                    <div className="w-0.5 h-full bg-green-500" />
                  </div>
                  <div className="pb-4">
                    <p className="text-sm font-medium">Payment Completed</p>
                    <p className="text-xs text-gray-500">
                      {paymentMethod.createdAt
                        ? format(
                            new Date(paymentMethod.createdAt),
                            "MMM dd, yyyy"
                          )
                        : "Unknown"}
                    </p>
                  </div>
                </div>

                <div className="flex gap-3">
                  <div className="flex flex-col items-center">
                    <div className="w-2 h-2 bg-green-500 rounded-full" />
                  </div>
                  <div>
                    <p className="text-sm font-medium">Ready to Play</p>
                    <p className="text-xs text-gray-500">All set!</p>
                  </div>
                </div>
              </div>
            </CardContent>
          </Card>
        </div>
      </div>
    </div>
  );
}


----- components\features\payments\PaymentDashboard.tsx -----

// src/components/features/payments/PaymentDashboard.tsx

/**
 * SOLID - Single Responsibility Principle (SRP)
 * Payment dashboard orchestration with filters ONLY
 */

"use client";

import { useState, useMemo } from "react";
import { useRouter, useSearchParams } from "next/navigation";
import { Input } from "@/components/ui/input";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Button } from "@/components/ui/button";
import { Search, Download, Filter, X, Loader2 } from "lucide-react";
import { PaymentsList } from "./PaymentsList";
import { toast } from "sonner";
import { Pagination } from "@/components/common/Pagination";

interface PaymentDashboardProps {
  players: any[];
  allPlayers: any[];
  pagination: {
    total: number;
    page: number;
    limit: number;
    totalPages: number;
  };
  locations: any[];
  divisions: any[];
  currentFilters: {
    location?: string;
    division?: string;
    team?: string;
    payment?: string;
    search?: string;
  };
}

export function PaymentDashboard({
  players,
  allPlayers,
  pagination,
  locations,
  divisions,
  currentFilters,
}: PaymentDashboardProps) {
  const router = useRouter();
  const searchParams = useSearchParams();
  const [searchValue, setSearchValue] = useState(currentFilters.search || "");
  const [isExporting, setIsExporting] = useState(false);

  // Calculate overall stats (unfiltered)
  const stats = useMemo(() => {
    const total = allPlayers.length;
    const unpaid = allPlayers.filter(
      (p) => p.paymentStatus === "unpaid"
    ).length;
    const onTrack = allPlayers.filter(
      (p) => p.paymentStatus === "on-track"
    ).length;
    const hasIssues = allPlayers.filter(
      (p) => p.paymentStatus === "has-issues"
    ).length;
    const critical = allPlayers.filter(
      (p) => p.paymentStatus === "critical"
    ).length;
    const paid = allPlayers.filter((p) => p.paymentStatus === "paid").length;

    return { total, unpaid, onTrack, hasIssues, critical, paid };
  }, [allPlayers]);


  const updateFilters = (updates: Record<string, string | undefined>) => {
    const params = new URLSearchParams(searchParams.toString());

    Object.entries(updates).forEach(([key, value]) => {
      if (value) {
        params.set(key, value);
      } else {
        params.delete(key);
      }
    });

    // Reset to page 1 when filters change
    params.set("page", "1");

    router.push(`/admin/payments?${params.toString()}`);
  };

  const clearAllFilters = () => {
    router.push(`/admin/payments`);
    setSearchValue("");
  };

  const handleSearch = (value: string) => {
    setSearchValue(value);
    updateFilters({ search: value || undefined });
  };

  const handleExport = async () => {
    setIsExporting(true);
    try {
      const response = await fetch(`/api/v1/payments/export`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          filters: currentFilters,
        }),
      });

      if (!response.ok) throw new Error("Export failed");

      const blob = await response.blob();
      const url = window.URL.createObjectURL(blob);
      const a = document.createElement("a");
      a.href = url;
      a.download = `payment-report-${
        new Date().toISOString().split("T")[0]
      }.csv`;
      document.body.appendChild(a);
      a.click();
      window.URL.revokeObjectURL(url);
      document.body.removeChild(a);

      toast.success("Export completed successfully!");
    } catch (error) {
      toast.error("Failed to export. Please try again.");
    } finally {
      setIsExporting(false);
    }
  };

  const getFilteredDivisions = () => {
    if (!currentFilters.location) return divisions;
    return divisions.filter(
      (d: any) => d.location._id === currentFilters.location
    );
  };

  const hasActiveFilters =
    currentFilters.location ||
    currentFilters.division ||
    currentFilters.team ||
    currentFilters.payment !== "all" ||
    currentFilters.search;

  return (
    <div className="space-y-6">
      {/* Filter Section */}
      <div className="bg-white rounded-lg shadow p-6">
        <div className="space-y-4">
          {/* Header with Total Count */}
          <div className="flex items-center justify-between pb-4 border-b">
            <div>
              <h2 className="text-lg font-semibold text-gray-900">
                Payment Overview
              </h2>
              <p className="text-sm text-gray-600 mt-1">
                {stats.total} total players • {stats.unpaid} unpaid •{" "}
                {stats.onTrack} on track • {stats.hasIssues} has issues •{" "}
                {stats.critical} critical • {stats.paid} paid
              </p>
            </div>
          </div>

          {/* Row 1: Filters */}
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
            <div>
              <label className="text-sm font-medium text-gray-700 mb-1.5 block">
                Location
              </label>
              <Select
                value={currentFilters.location || "all"}
                onValueChange={(value) => {
                  updateFilters({
                    location: value === "all" ? undefined : value,
                    division: undefined,
                    team: undefined,
                  });
                }}
              >
                <SelectTrigger>
                  <SelectValue placeholder="All Locations" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="all">All Locations</SelectItem>
                  {locations.map((location: any) => (
                    <SelectItem key={location._id} value={location._id}>
                      {location.name}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>

            <div>
              <label className="text-sm font-medium text-gray-700 mb-1.5 block">
                Division
              </label>
              <Select
                value={currentFilters.division || "all"}
                onValueChange={(value) => {
                  updateFilters({
                    division: value === "all" ? undefined : value,
                    team: undefined,
                  });
                }}
              >
                <SelectTrigger>
                  <SelectValue placeholder="Active Divisions" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="all">All Divisions</SelectItem>
                  {getFilteredDivisions().map((division: any) => (
                    <SelectItem key={division._id} value={division._id}>
                      {division.location?.name} - {division.divisionName}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>

            <div>
              <label className="text-sm font-medium text-gray-700 mb-1.5 block">
                Payment Status
              </label>
              <Select
                value={currentFilters.payment || "all"}
                onValueChange={(value) => updateFilters({ payment: value })}
              >
                <SelectTrigger>
                  <SelectValue placeholder="All Status" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="all">All Status</SelectItem>
                  <SelectItem value="unpaid">Unpaid</SelectItem>
                  <SelectItem value="on-track">
                    On Track (Installments)
                  </SelectItem>
                  <SelectItem value="has-issues">Has Issues</SelectItem>
                  <SelectItem value="critical">Critical</SelectItem>
                  <SelectItem value="paid">Fully Paid</SelectItem>
                </SelectContent>
              </Select>
            </div>

            <div className="flex items-end">
              <Button
                variant="outline"
                onClick={clearAllFilters}
                disabled={!hasActiveFilters}
                className="w-full"
              >
                <X className="h-4 w-4 mr-2" />
                Clear Filters
              </Button>
            </div>
          </div>

          {/* Row 2: Search and Export */}
          <div className="flex gap-4">
            <div className="relative flex-1">
              <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400" />
              <Input
                placeholder="Search players..."
                value={searchValue}
                onChange={(e) => handleSearch(e.target.value)}
                className="pl-10"
              />
            </div>
            <Button
              variant="outline"
              onClick={handleExport}
              disabled={isExporting || players.length === 0}
            >
              {isExporting ? (
                <>
                  <Loader2 className="h-4 w-4 mr-2 animate-spin" />
                  Exporting...
                </>
              ) : (
                <>
                  <Download className="h-4 w-4 mr-2" />
                  Export CSV
                </>
              )}
            </Button>
          </div>

          {/* Active Filters */}
          {hasActiveFilters && (
            <div className="flex items-center gap-2 pt-2 border-t">
              <span className="text-sm text-gray-500">Active Filters:</span>
              <div className="flex flex-wrap gap-2">
                {currentFilters.location && (
                  <span className="inline-flex items-center gap-1 px-2 py-1 bg-blue-100 text-blue-800 rounded text-xs">
                    <Filter className="h-3 w-3" />
                    Location
                  </span>
                )}
                {currentFilters.division && (
                  <span className="inline-flex items-center gap-1 px-2 py-1 bg-blue-100 text-blue-800 rounded text-xs">
                    <Filter className="h-3 w-3" />
                    Division
                  </span>
                )}
                {currentFilters.payment !== "all" && (
                  <span className="inline-flex items-center gap-1 px-2 py-1 bg-blue-100 text-blue-800 rounded text-xs">
                    <Filter className="h-3 w-3" />
                    {currentFilters.payment}
                  </span>
                )}
                {currentFilters.search && (
                  <span className="inline-flex items-center gap-1 px-2 py-1 bg-blue-100 text-blue-800 rounded text-xs">
                    <Search className="h-3 w-3" />
                    {currentFilters.search}
                  </span>
                )}
              </div>
            </div>
          )}
        </div>
      </div>

      {/* Players List */}
      <PaymentsList players={players} />

      {/* Pagination */}
      {pagination.totalPages > 1 && (
        <Pagination
          currentPage={pagination.page}
          totalPages={pagination.totalPages}
          total={pagination.total}
          limit={pagination.limit}
          onPageChange={(page) => {
            const params = new URLSearchParams(searchParams.toString());
            params.set("page", page.toString());
            router.push(`/admin/payments?${params.toString()}`);
          }}
          label="players"
        />
      )}
    </div>
  );
}


----- components\features\payments\PaymentsList.tsx -----

// src/components/features/payments/PaymentsList.tsx

/**
 * SOLID - Single Responsibility Principle (SRP)
 * Display payment list with status cards ONLY
 */

"use client";

import Link from "next/link";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Card, CardContent } from "@/components/ui/card";
import { Users, ExternalLink, Mail, UserCircle, Trophy } from "lucide-react";
import { InstallmentProgress } from "./InstallmentProgress";

interface PaymentsListProps {
  players: any[];
}

export function PaymentsList({ players }: PaymentsListProps) {
  if (players.length === 0) {
    return (
      <Card className="p-12 text-center">
        <Users className="mx-auto h-12 w-12 text-gray-400" />
        <h3 className="mt-4 text-lg font-medium text-gray-900">
          No players found
        </h3>
        <p className="mt-2 text-sm text-gray-500">
          Try adjusting your filters to see more results.
        </p>
      </Card>
    );
  }

  const getStatusBadge = (status: string) => {
    switch (status) {
      case "paid":
        return (
          <Badge className="bg-green-100 text-green-800 border-green-200">
            Fully Paid
          </Badge>
        );
      case "on-track":
        return (
          <Badge className="bg-blue-100 text-blue-800 border-blue-200">
            On Track
          </Badge>
        );
      case "has-issues":
        return (
          <Badge className="bg-yellow-100 text-yellow-800 border-yellow-200">
            Has Issues
          </Badge>
        );
      case "critical":
        return (
          <Badge className="bg-red-100 text-red-800 border-red-200">
            Critical
          </Badge>
        );
      default:
        return (
          <Badge className="bg-gray-100 text-gray-800 border-gray-200">
            Unpaid
          </Badge>
        );
    }
  };

  return (
    <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
      {players.map((player: any) => (
        <Card key={player._id} className="hover:shadow-lg transition-shadow">
          <CardContent className="p-6">
            {/* Header */}
            <div className="flex items-start justify-between mb-4">
              <div className="flex-1 min-w-0">
                <div className="flex items-center gap-2 mb-1">
                  <UserCircle className="h-5 w-5 text-gray-400 flex-shrink-0" />
                  <h3 className="font-semibold text-gray-900 truncate">
                    {player.playerName}
                  </h3>
                </div>
                {player.user?.email && (
                  <div className="flex items-center gap-2 text-sm text-gray-500">
                    <Mail className="h-3 w-3 flex-shrink-0" />
                    <span className="truncate">{player.user.email}</span>
                  </div>
                )}
              </div>
              <Button variant="ghost" size="sm" asChild className="ml-2">
                <Link href={`/admin/payments/${player._id}`}>
                  <ExternalLink className="h-4 w-4" />
                </Link>
              </Button>
            </div>

            {/* Team & Division */}
            <div className="space-y-2 mb-4 pb-4 border-b">
              <div className="flex items-center gap-2 text-sm">
                <Users className="h-4 w-4 text-gray-400 flex-shrink-0" />
                <span className="text-gray-600">Team:</span>
                <span className="font-medium text-gray-900 truncate">
                  {player.team?.teamName || "No Team"}
                </span>
              </div>
              <div className="flex items-center gap-2 text-sm">
                <Trophy className="h-4 w-4 text-gray-400 flex-shrink-0" />
                <span className="text-gray-600">Division:</span>
                <span className="font-medium text-gray-900 truncate">
                  {player.division?.divisionName}
                </span>
              </div>
            </div>

            {/* Payment Status */}
            <div className="space-y-3">
              <div className="flex items-center justify-between">
                <span className="text-sm text-gray-600">Payment Status:</span>
                {getStatusBadge(player.paymentStatus)}
              </div>

              {/* Payment Details */}
              {player.paymentStatus === "on-track" ||
              player.paymentStatus === "has-issues" ||
              player.paymentStatus === "critical" ? (
                <div className="pt-2">
                  <p className="text-xs text-gray-500 mb-2">
                    Payment Progress:
                  </p>
                  <InstallmentProgress
                    payments={
                      player.paymentMethod?.installments
                        ?.subscriptionPayments || []
                    }
                    size="md"
                  />
                </div>
              ) : player.paymentStatus === "paid" ? (
                <div className="bg-green-50 rounded-lg p-3 text-center">
                  <p className="text-sm font-medium text-green-800">
                    ✓ Payment Complete
                  </p>
                </div>
              ) : (
                <div className="bg-gray-50 rounded-lg p-3 text-center">
                  <p className="text-sm text-gray-600">No Payment Method</p>
                </div>
              )}
            </div>
          </CardContent>
        </Card>
      ))}
    </div>
  );
}


----- components\features\payments\SendPaymentLinkModal.tsx -----

// src/components/features/payments/SendPaymentLinkModal.tsx

/**
 * SOLID - Single Responsibility Principle (SRP)
 * Send payment link modal ONLY
 */

"use client";

import { useState } from "react";
import { useRouter } from "next/navigation";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogFooter,
} from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { Loader2, MessageSquare, AlertCircle, Phone } from "lucide-react";
import { toast } from "sonner";

interface SendPaymentLinkModalProps {
  open: boolean;
  onOpenChange: (open: boolean) => void;
  player: any;
  payment: any;
  paymentMethod: any;
  cityId: string;
}

export function SendPaymentLinkModal({
  open,
  onOpenChange,
  player,
  payment,
  paymentMethod,
  cityId,
}: SendPaymentLinkModalProps) {
  const router = useRouter();
  const [isSending, setIsSending] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const amount =
    payment.paymentNumber === 1
      ? 60
      : paymentMethod.pricingTier === "EARLY_BIRD"
      ? 25
      : 30;

  const handleSend = async () => {
    setIsSending(true);
    setError(null);

    try {
      const response = await fetch(
        `/api/v1/${cityId}/payments/send-payment-link`,
        {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({
            playerId: player._id,
            paymentMethodId: paymentMethod._id,
            paymentNumber: payment.paymentNumber,
            amount: amount * 100, // Convert to cents
          }),
        }
      );

      const data = await response.json();

      if (!response.ok) {
        throw new Error(data.error || "Failed to send payment link");
      }

      toast.success("Payment link sent successfully!");
      onOpenChange(false);
      router.refresh();
    } catch (error: any) {
      setError(error.message);
      toast.error(error.message);
    } finally {
      setIsSending(false);
    }
  };

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent>
        <DialogHeader>
          <DialogTitle className="flex items-center gap-2">
            <MessageSquare className="h-5 w-5 text-blue-600" />
            Send Payment Link
          </DialogTitle>
          <DialogDescription>
            Create and send a payment link to the player via SMS.
          </DialogDescription>
        </DialogHeader>

        <div className="space-y-4 py-4">
          {/* Payment Details */}
          <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
            <div className="space-y-2">
              <div className="flex justify-between text-sm">
                <span className="text-gray-600">Player:</span>
                <span className="font-medium">{player.playerName}</span>
              </div>
              <div className="flex justify-between text-sm">
                <span className="text-gray-600">Payment:</span>
                <span className="font-medium">
                  #{payment.paymentNumber}
                  {payment.paymentNumber === 1 && " (Down Payment)"}
                </span>
              </div>
              <div className="flex justify-between text-sm">
                <span className="text-gray-600">Amount:</span>
                <span className="font-bold text-lg">${amount}.00</span>
              </div>
            </div>
          </div>

          {/* Phone Number */}
          {player.user?.phoneNumber ? (
            <div className="flex items-center gap-3 p-3 bg-gray-50 rounded-lg">
              <Phone className="h-5 w-5 text-gray-400" />
              <div>
                <p className="text-sm font-medium text-gray-900">
                  SMS will be sent to:
                </p>
                <p className="text-sm text-gray-600">
                  {player.user.phoneNumber}
                </p>
              </div>
            </div>
          ) : (
            <Alert variant="destructive">
              <AlertCircle className="h-4 w-4" />
              <AlertDescription className="text-sm">
                No phone number on file for this player. Cannot send SMS.
              </AlertDescription>
            </Alert>
          )}

          {/* Info */}
          <Alert>
            <AlertCircle className="h-4 w-4" />
            <AlertDescription className="text-sm">
              This will create a new Stripe payment link and send it to the
              player via SMS. The player will pay when ready. Link does not
              expire.
            </AlertDescription>
          </Alert>

          {/* Error Display */}
          {error && (
            <Alert variant="destructive">
              <AlertCircle className="h-4 w-4" />
              <AlertDescription className="text-sm">{error}</AlertDescription>
            </Alert>
          )}
        </div>

        <DialogFooter>
          <Button
            variant="outline"
            onClick={() => onOpenChange(false)}
            disabled={isSending}
          >
            Cancel
          </Button>
          <Button
            onClick={handleSend}
            disabled={isSending || !player.user?.phoneNumber}
            className="bg-blue-600 hover:bg-blue-700"
          >
            {isSending ? (
              <>
                <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                Sending...
              </>
            ) : (
              <>
                <MessageSquare className="mr-2 h-4 w-4" />
                Send Payment Link
              </>
            )}
          </Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
}


----- components\features\payments\SendReminderModal.tsx -----

// src/components/features/payments/SendReminderModal.tsx

/**
 * SOLID - Single Responsibility Principle (SRP)
 * Send payment reminder modal ONLY
 */

"use client";

import { useState } from "react";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogFooter,
} from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Loader2 } from "lucide-react";
import { toast } from "sonner";

interface SendReminderModalProps {
  open: boolean;
  onOpenChange: (open: boolean) => void;
  player: any;
  cityId: string;
}

export function SendReminderModal({
  open,
  onOpenChange,
  player,
  cityId,
}: SendReminderModalProps) {
  const [isSending, setIsSending] = useState(false);

  const handleSend = async () => {
    setIsSending(true);
    try {
      const response = await fetch(`/api/v1/${cityId}/payments/send-reminder`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          playerId: player._id,
          email: player.user?.email,
          phoneNumber: player.user?.phoneNumber,
        }),
      });

      if (!response.ok) throw new Error("Failed to send reminder");

      toast.success("Payment reminder sent successfully!");
      onOpenChange(false);
    } catch (error) {
      toast.error("Failed to send reminder. Please try again.");
    } finally {
      setIsSending(false);
    }
  };

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent>
        <DialogHeader>
          <DialogTitle>Send Payment Reminder</DialogTitle>
          <DialogDescription>
            Send a payment reminder to {player.playerName} via email and SMS.
          </DialogDescription>
        </DialogHeader>

        <div className="py-4">
          <p className="text-sm text-gray-600">
            This will send a reminder to:
          </p>
          <ul className="mt-2 space-y-1 text-sm">
            {player.user?.email && <li>📧 {player.user.email}</li>}
            {player.user?.phoneNumber && <li>📱 {player.user.phoneNumber}</li>}
          </ul>
        </div>

        <DialogFooter>
          <Button variant="outline" onClick={() => onOpenChange(false)}>
            Cancel
          </Button>
          <Button onClick={handleSend} disabled={isSending}>
            {isSending ? (
              <>
                <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                Sending...
              </>
            ) : (
              "Send Reminder"
            )}
          </Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
}

----- components\features\payments\SendSpecificReminderModal.tsx -----

// src/components/features/payments/SendSpecificReminderModal.tsx

/**
 * SOLID - Single Responsibility Principle (SRP)
 * Send specific payment reminder modal ONLY
 */

"use client";

import { useState } from "react";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogFooter,
} from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Loader2, ExternalLink } from "lucide-react";
import { toast } from "sonner";

interface SendSpecificReminderModalProps {
  open: boolean;
  onOpenChange: (open: boolean) => void;
  player: any;
  payment: any;
  cityId: string;
}

export function SendSpecificReminderModal({
  open,
  onOpenChange,
  player,
  payment,
  cityId,
}: SendSpecificReminderModalProps) {
  const [isSending, setIsSending] = useState(false);

  const handleSend = async () => {
    setIsSending(true);
    try {
      const response = await fetch(`/api/v1/${cityId}/payments/send-specific-reminder`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          playerId: player._id,
          paymentNumber: payment.paymentNumber,
          paymentLink: payment.paymentLink,
          phoneNumber: player.user?.phoneNumber,
        }),
      });

      if (!response.ok) throw new Error("Failed to send reminder");

      toast.success("Payment reminder sent successfully!");
      onOpenChange(false);
    } catch (error) {
      toast.error("Failed to send reminder. Please try again.");
    } finally {
      setIsSending(false);
    }
  };

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent>
        <DialogHeader>
          <DialogTitle>Send Payment Reminder</DialogTitle>
          <DialogDescription>
            Send SMS reminder for Payment #{payment.paymentNumber} to {player.playerName}.
          </DialogDescription>
        </DialogHeader>

        <div className="py-4 space-y-4">
          <div className="bg-gray-50 rounded-lg p-4 space-y-2">
            <p className="text-sm font-medium">Payment Details:</p>
            <ul className="text-sm text-gray-600 space-y-1">
              <li>• Payment #{payment.paymentNumber}</li>
              <li>• Failed {payment.attemptCount || 1} time(s)</li>
              <li>• Will send SMS to: {player.user?.phoneNumber || "No phone"}</li>
            </ul>
          </div>

          {payment.paymentLink && (
  <div className="text-sm">
    <p className="text-gray-600 mb-2">Payment link will be included:</p>
    <a
      href={payment.paymentLink}
      target="_blank"
      rel="noopener noreferrer"
      className="text-blue-600 hover:underline flex items-center gap-1"
    >
      View Stripe Invoice
      <ExternalLink className="h-3 w-3" />
    </a>
  </div>
)}

        </div>

        <DialogFooter>
          <Button variant="outline" onClick={() => onOpenChange(false)}>
            Cancel
          </Button>
          <Button onClick={handleSend} disabled={isSending || !player.user?.phoneNumber}>
            {isSending ? (
              <>
                <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                Sending...
              </>
            ) : (
              "Send SMS Reminder"
            )}
          </Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
}

----- components\features\payments\SuspensionWarningModal.tsx -----

// src/components/features/payments/SuspensionWarningModal.tsx

/**
 * SOLID - Single Responsibility Principle (SRP)
 * Suspension warning modal ONLY
 */

"use client";

import { useState } from "react";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogFooter,
} from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { ShieldAlert } from "lucide-react";

interface SuspensionWarningModalProps {
  open: boolean;
  onOpenChange: (open: boolean) => void;
  player: any;
  failedPaymentsCount: number;
  cityId: string;
}

export function SuspensionWarningModal({
  open,
  onOpenChange,
  player,
  failedPaymentsCount,
  cityId,
}: SuspensionWarningModalProps) {
  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent>
        <DialogHeader>
          <DialogTitle className="flex items-center gap-2 text-red-900">
            <ShieldAlert className="h-5 w-5 text-red-600" />
            Player Suspension Consideration
          </DialogTitle>
          <DialogDescription>
            Review suspension policy for {player.playerName}.
          </DialogDescription>
        </DialogHeader>

        <div className="py-4 space-y-4">
          <div className="bg-red-50 border-2 border-red-300 rounded-lg p-4">
            <p className="text-sm font-bold text-red-900 mb-2">Critical Payment Status</p>
            <ul className="space-y-1 text-sm text-red-800">
              <li>• {failedPaymentsCount} payments failed</li>
              <li>• Multiple collection attempts unsuccessful</li>
              <li>• League policy may require suspension</li>
            </ul>
          </div>

          <div className="text-sm text-gray-600 space-y-2">
            <p className="font-medium">Recommended next steps:</p>
            <ol className="list-decimal list-inside space-y-1 ml-2">
              <li>Final captain escalation attempt</li>
              <li>Document all communication attempts</li>
              <li>Review league suspension policy</li>
              <li>Consult with league executive before suspension</li>
            </ol>
          </div>

          <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-3">
            <p className="text-xs text-yellow-800">
              <strong>Note:</strong> Player suspension is a last resort. Ensure all 
              reasonable collection efforts have been exhausted before proceeding.
            </p>
          </div>
        </div>

        <DialogFooter>
          <Button variant="outline" onClick={() => onOpenChange(false)}>
            Close
          </Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
}

----- components\features\payments\UnpaidPlayerView.tsx -----

// src/components/features/payments/UnpaidPlayerView.tsx

/**
 * SOLID - Single Responsibility Principle (SRP)
 * Unpaid player detail view ONLY
 */

"use client";

import { useState } from "react";
import { useRouter } from "next/navigation";
import Link from "next/link";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import {
  ArrowLeft,
  AlertCircle,
  Mail,
  Phone,
  Instagram as InstagramIcon,
  Calendar,
  Users,
  MapPin,
} from "lucide-react";
import { SendReminderModal } from "./SendReminderModal";
import { NotifyCaptainModal } from "./NotifyCaptainModal";
import { formatDistanceToNow } from "date-fns";

interface UnpaidPlayerViewProps {
  player: any;
  cityId: string;
}

export function UnpaidPlayerView({ player, cityId }: UnpaidPlayerViewProps) {
  const router = useRouter();
  const [showReminderModal, setShowReminderModal] = useState(false);
  const [showCaptainModal, setShowCaptainModal] = useState(false);

  const daysSinceRegistration = player.createdAt
    ? Math.floor(
        (Date.now() - new Date(player.createdAt).getTime()) /
          (1000 * 60 * 60 * 24)
      )
    : 0;

  return (
    <div className="p-6 space-y-6">
      {/* Header */}
      <div className="flex items-center gap-4">
        <Button variant="ghost" size="sm" asChild>
          <Link href={`/admin/payments`}>
            <ArrowLeft className="h-4 w-4 mr-2" />
            Back to Payments
          </Link>
        </Button>
      </div>

      {/* Player Overview */}
      <div>
        <div className="flex items-center gap-3 mb-2">
          <h1 className="text-3xl font-bold tracking-tight">
            {player.playerName}
          </h1>
          <Badge className="bg-red-100 text-red-800 border-red-200">
            Payment Required
          </Badge>
        </div>
        <p className="text-gray-600">
          {player.team?.teamName || "No Team"} • {player.division?.divisionName}
        </p>
      </div>

      {/* Alert */}
      <div className="bg-red-50 border border-red-200 rounded-lg p-4 flex items-start gap-3">
        <AlertCircle className="h-5 w-5 text-red-600 flex-shrink-0 mt-0.5" />
        <div>
          <p className="font-medium text-red-900">No Payment Method on File</p>
          <p className="text-sm text-red-700 mt-1">
            Registered {daysSinceRegistration} days ago. Payment required to
            participate.
          </p>
        </div>
      </div>

      <div className="grid gap-6 md:grid-cols-3">
        {/* Player Information */}
        <div className="md:col-span-2 space-y-6">
          <Card>
            <CardHeader>
              <CardTitle>Player Information</CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="flex items-center gap-3">
                <Users className="h-5 w-5 text-gray-400" />
                <div>
                  <p className="text-sm text-gray-500">Team</p>
                  <p className="font-medium">
                    {player.team?.teamName || "No Team Assigned"}
                  </p>
                </div>
              </div>

              <div className="flex items-center gap-3">
                <MapPin className="h-5 w-5 text-gray-400" />
                <div>
                  <p className="text-sm text-gray-500">Division</p>
                  <p className="font-medium">{player.division?.divisionName}</p>
                </div>
              </div>

              <div className="flex items-center gap-3">
                <Calendar className="h-5 w-5 text-gray-400" />
                <div>
                  <p className="text-sm text-gray-500">Registration Date</p>
                  <p className="font-medium">
                    {player.createdAt
                      ? new Date(player.createdAt).toLocaleDateString()
                      : "Unknown"}
                  </p>
                </div>
              </div>
            </CardContent>
          </Card>

          {/* Contact Information */}
          <Card>
            <CardHeader>
              <CardTitle>Contact Information</CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              {player.user?.email && (
                <div className="flex items-center gap-3">
                  <Mail className="h-5 w-5 text-gray-400" />
                  <div>
                    <p className="text-sm text-gray-500">Email</p>
                    <p className="font-medium">{player.user.email}</p>
                  </div>
                </div>
              )}

              {player.user?.phoneNumber && (
                <div className="flex items-center gap-3">
                  <Phone className="h-5 w-5 text-gray-400" />
                  <div>
                    <p className="text-sm text-gray-500">Phone</p>
                    <p className="font-medium">{player.user.phoneNumber}</p>
                  </div>
                </div>
              )}

              {player.instagram && (
                <div className="flex items-center gap-3">
                  <InstagramIcon className="h-5 w-5 text-gray-400" />
                  <div>
                    <p className="text-sm text-gray-500">Instagram</p>
                    <p className="font-medium">{player.instagram}</p>
                  </div>
                </div>
              )}
            </CardContent>
          </Card>
        </div>

        {/* Actions Sidebar */}
        <div className="space-y-4">
          <Card>
            <CardHeader>
              <CardTitle>Quick Actions</CardTitle>
            </CardHeader>
            <CardContent className="space-y-3">
              <Button
                className="w-full"
                onClick={() => setShowReminderModal(true)}
              >
                Send Payment Reminder
              </Button>

              {player.team && (
                <Button
                  variant="outline"
                  className="w-full"
                  onClick={() => setShowCaptainModal(true)}
                >
                  Notify Team Captain
                </Button>
              )}
            </CardContent>
          </Card>

          <Card>
            <CardHeader>
              <CardTitle>Payment Status</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="text-center py-4">
                <AlertCircle className="mx-auto h-12 w-12 text-red-400 mb-3" />
                <p className="text-sm text-gray-500">
                  No payment method on file
                </p>
                <p className="text-xs text-gray-400 mt-1">
                  Player needs to complete registration
                </p>
              </div>
            </CardContent>
          </Card>
        </div>
      </div>

      {/* Modals */}
      <SendReminderModal
        open={showReminderModal}
        onOpenChange={setShowReminderModal}
        player={player}
        cityId={cityId}
      />

      {player.team && (
        <NotifyCaptainModal
          open={showCaptainModal}
          onOpenChange={setShowCaptainModal}
          player={player}
          teamId={player.team._id}
          cityId={cityId}
        />
      )}
    </div>
  );
}


----- components\jerseys\DivisionInfo.tsx -----

// src/components/jerseys/DivisionInfo.tsx

/**
 * SOLID - Single Responsibility Principle (SRP)
 * Display division information ONLY
 */

"use client";

import { CheckCircle, Clock, AlertTriangle, Shirt, Users } from "lucide-react";
import { Card, CardContent } from "@/components/ui/card";
import { DivisionWithTeams } from "@/types/jersey";
import { TeamWithJerseyInfo } from "@/types/jersey";

interface DivisionInfoProps {
  division: DivisionWithTeams;
  teams: TeamWithJerseyInfo[];
}

export default function DivisionInfo({ division, teams }: DivisionInfoProps) {
  const formatDate = (date: Date) => {
    return new Date(date).toLocaleDateString("en-US", {
      month: "short",
      day: "numeric",
      year: "numeric",
    });
  };

  const getDaysUntilDeadline = (deadline: Date) => {
    const now = new Date();
    const deadlineDate = new Date(deadline);
    const diffTime = deadlineDate.getTime() - now.getTime();
    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
    return diffDays;
  };

  // Calculate division-specific stats
  const divisionStats = {
    totalTeams: teams.length,
    teamsWithDesign: teams.filter((t) => t.isCustomJersey || t.jerseyEdition)
      .length,
    teamsWithoutDesign: teams.filter(
      (t) => !t.isCustomJersey && !t.jerseyEdition
    ).length,
    completeTeams: teams.filter((t) => {
      const hasDesign = t.isCustomJersey || t.jerseyEdition;
      const allPlayersReady =
        t.players.length > 0 &&
        t.players.every(
          (p: any) => p.jerseyNumber != null && p.jerseySize != null
        );
      return hasDesign && allPlayersReady;
    }).length,
  };

  const getDeadlineBadge = () => {
    if (!division.jerseyDeadline) {
      return (
        <span className="inline-flex items-center gap-1 px-3 py-1 bg-gray-100 text-gray-600 text-xs font-medium rounded-full">
          No deadline set
        </span>
      );
    }

    const daysUntil = getDaysUntilDeadline(division.jerseyDeadline);

    if (daysUntil < 0) {
      return (
        <span className="inline-flex items-center gap-1 px-3 py-1 bg-red-100 text-red-700 text-xs font-medium rounded-full">
          <AlertTriangle size={12} />
          Deadline passed {Math.abs(daysUntil)} days ago
        </span>
      );
    } else if (daysUntil <= 7) {
      return (
        <span className="inline-flex items-center gap-1 px-3 py-1 bg-amber-100 text-amber-700 text-xs font-medium rounded-full">
          <Clock size={12} />
          {daysUntil} days left
        </span>
      );
    } else {
      return (
        <span className="inline-flex items-center gap-1 px-3 py-1 bg-green-100 text-green-700 text-xs font-medium rounded-full">
          <CheckCircle size={12} />
          {daysUntil} days left
        </span>
      );
    }
  };

  return (
    <div className="space-y-4">
      <Card>
        <CardContent className="p-5">
          <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4">
            <div>
              <h2 className="text-xl font-semibold text-gray-900">
                {division.divisionName}
              </h2>
              <div className="flex flex-wrap gap-x-4 gap-y-1 mt-1 text-sm text-gray-600">
                <span>{division.location.name}</span>
                <span className="hidden sm:inline">•</span>
                <span>{division.day}</span>
                <span className="hidden sm:inline">•</span>
                <span>{division.level.name}</span>
                {division.jerseyDeadline && (
                  <>
                    <span className="hidden sm:inline">•</span>
                    <span>Deadline: {formatDate(division.jerseyDeadline)}</span>
                  </>
                )}
              </div>
            </div>
            <div className="flex items-center gap-3">
              {getDeadlineBadge()}
            </div>
          </div>

          {/* Division-specific stats */}
          <div className="flex flex-col sm:flex-row sm:items-center gap-4 sm:gap-6 mt-4 pt-4 border-t text-sm">
            <div className="flex items-center gap-2">
              <Users className="text-gray-400" size={16} />
              <span className="text-gray-600">
                <span className="font-semibold text-gray-900">
                  {divisionStats.totalTeams}
                </span>{" "}
                teams in division
              </span>
            </div>
            <span className="hidden sm:inline text-gray-300">•</span>
            <div className="flex items-center gap-2">
              <CheckCircle className="text-green-600" size={16} />
              <span className="text-gray-600">
                <span className="font-semibold text-green-600">
                  {divisionStats.teamsWithDesign}
                </span>{" "}
                selected design
              </span>
            </div>
            <span className="hidden sm:inline text-gray-300">•</span>
            <div className="flex items-center gap-2">
              <AlertTriangle className="text-red-600" size={16} />
              <span className="text-gray-600">
                <span className="font-semibold text-red-600">
                  {divisionStats.teamsWithoutDesign}
                </span>{" "}
                pending design
              </span>
            </div>
            <span className="hidden sm:inline text-gray-300">•</span>
            <div className="flex items-center gap-2">
              <Shirt className="text-purple-600" size={16} />
              <span className="text-gray-600">
                <span className="font-semibold text-purple-600">
                  {divisionStats.completeTeams}
                </span>{" "}
                ready to order
              </span>
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}


----- components\jerseys\GenericJerseySection.tsx -----

// src/components/jerseys/GenericJerseySection.tsx

/**
 * SOLID - Single Responsibility Principle (SRP)
 * Display and manage generic jerseys ONLY
 */

"use client";

import { useState } from "react";
import {
  Plus,
  Edit2,
  Trash2,
  Check,
  X,
  AlertCircle,
  Package,
} from "lucide-react";
import { GenericJersey } from "@/types/jersey";

interface GenericJerseySectionProps {
  genericJerseys: GenericJersey[];
  teamId: string;
  onAddGeneric: (data: {
    jerseyNumber?: number;
    jerseySize?: string;
    jerseyName?: string;
  }) => Promise<void>;
  onUpdateGeneric: (
    index: number,
    data: {
      jerseyNumber?: number;
      jerseySize?: string;
      jerseyName?: string;
    }
  ) => Promise<void>;
  onRemoveGeneric: (index: number) => Promise<void>;
}

export default function GenericJerseySection({
  genericJerseys,
  teamId,
  onAddGeneric,
  onUpdateGeneric,
  onRemoveGeneric,
}: GenericJerseySectionProps) {
  const [showAddForm, setShowAddForm] = useState(false);
  const [editingIndex, setEditingIndex] = useState<number | null>(null);
  const [newGeneric, setNewGeneric] = useState({
    jerseyNumber: "",
    jerseySize: "",
    jerseyName: "",
  });
  const [editValues, setEditValues] = useState({
    jerseyNumber: "",
    jerseySize: "",
    jerseyName: "",
  });

  const handleAdd = async () => {
    await onAddGeneric({
      jerseyNumber: newGeneric.jerseyNumber
        ? parseInt(newGeneric.jerseyNumber)
        : undefined,
      jerseySize: newGeneric.jerseySize || undefined,
      jerseyName: newGeneric.jerseyName || undefined,
    });
    setNewGeneric({ jerseyNumber: "", jerseySize: "", jerseyName: "" });
    setShowAddForm(false);
  };

  const handleStartEdit = (index: number, generic: GenericJersey) => {
    setEditingIndex(index);
    setEditValues({
      jerseyNumber: generic.jerseyNumber?.toString() || "",
      jerseySize: generic.jerseySize || "",
      jerseyName: generic.jerseyName || "",
    });
  };

  const handleSaveEdit = async (index: number) => {
    await onUpdateGeneric(index, {
      jerseyNumber: editValues.jerseyNumber
        ? parseInt(editValues.jerseyNumber)
        : undefined,
      jerseySize: editValues.jerseySize || undefined,
      jerseyName: editValues.jerseyName || undefined,
    });
    setEditingIndex(null);
    setEditValues({ jerseyNumber: "", jerseySize: "", jerseyName: "" });
  };

  const handleCancelEdit = () => {
    setEditingIndex(null);
    setEditValues({ jerseyNumber: "", jerseySize: "", jerseyName: "" });
  };

  const handleRemove = async (index: number) => {
    if (window.confirm("Remove this generic jersey?")) {
      await onRemoveGeneric(index);
    }
  };

  return (
    <div className="bg-white rounded-lg shadow mb-6 p-4 sm:p-6">
      <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-3 mb-4">
        <h2 className="text-base sm:text-lg font-semibold text-gray-900">
          Generic/Extra Jerseys
          <span className="ml-2 text-xs sm:text-sm font-normal text-gray-600">
            ({genericJerseys.length} jerseys)
          </span>
        </h2>
        <button
          onClick={() => setShowAddForm(true)}
          className="px-3 sm:px-4 py-2 bg-blue-600 text-white rounded-lg text-xs sm:text-sm font-medium hover:bg-blue-700 inline-flex items-center gap-2 justify-center"
        >
          <Plus size={16} />
          <span className="hidden sm:inline">Add Generic Jersey</span>
          <span className="sm:hidden">Add Jersey</span>
        </button>
      </div>

      {/* Add Generic Form */}
      {showAddForm && (
        <div className="bg-gray-50 rounded-lg p-4 mb-4">
          <h3 className="text-sm font-semibold text-gray-900 mb-3">
            Add Generic Jersey
          </h3>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-3 mb-3">
            <div>
              <label className="block text-xs font-medium text-gray-700 mb-1">
                Jersey Number
              </label>
              <input
                type="number"
                value={newGeneric.jerseyNumber}
                onChange={(e) =>
                  setNewGeneric({ ...newGeneric, jerseyNumber: e.target.value })
                }
                placeholder="99"
                className="w-full px-3 py-2 border border-gray-300 rounded-lg text-sm focus:outline-none focus:ring-2 focus:ring-blue-500"
              />
            </div>
            <div>
              <label className="block text-xs font-medium text-gray-700 mb-1">
                Size
              </label>
              <select
                value={newGeneric.jerseySize}
                onChange={(e) =>
                  setNewGeneric({ ...newGeneric, jerseySize: e.target.value })
                }
                className="w-full px-3 py-2 border border-gray-300 rounded-lg text-sm focus:outline-none focus:ring-2 focus:ring-blue-500"
              >
                <option value="">Select</option>
                <option value="SM">SM</option>
                <option value="MD">MD</option>
                <option value="LG">LG</option>
                <option value="XL">XL</option>
                <option value="XXL">XXL</option>
              </select>
            </div>
            <div>
              <label className="block text-xs font-medium text-gray-700 mb-1">
                Jersey Name
              </label>
              <input
                type="text"
                value={newGeneric.jerseyName}
                onChange={(e) =>
                  setNewGeneric({ ...newGeneric, jerseyName: e.target.value })
                }
                placeholder="EXTRA"
                maxLength={15}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg text-sm focus:outline-none focus:ring-2 focus:ring-blue-500"
              />
            </div>
          </div>
          <div className="flex gap-2">
            <button
              onClick={handleAdd}
              className="px-4 py-2 bg-blue-600 text-white text-sm font-medium rounded-lg hover:bg-blue-700"
            >
              Add Jersey
            </button>
            <button
              onClick={() => {
                setShowAddForm(false);
                setNewGeneric({
                  jerseyNumber: "",
                  jerseySize: "",
                  jerseyName: "",
                });
              }}
              className="px-4 py-2 border border-gray-300 text-gray-700 text-sm font-medium rounded-lg hover:bg-gray-50"
            >
              Cancel
            </button>
          </div>
        </div>
      )}

      {/* Generic Jerseys Table */}
      {genericJerseys.length > 0 ? (
        <div className="border border-gray-200 rounded-lg overflow-hidden">
          <div className="overflow-x-auto">
            <div className="inline-block min-w-full align-middle">
              <div className="overflow-hidden">
                <table className="min-w-full divide-y divide-gray-200">
                  <thead className="bg-gray-50">
                    <tr>
                      <th className="px-3 sm:px-6 py-3 text-left text-xs font-medium text-gray-600 uppercase whitespace-nowrap">
                        Number
                      </th>
                      <th className="px-3 sm:px-6 py-3 text-left text-xs font-medium text-gray-600 uppercase whitespace-nowrap">
                        Size
                      </th>
                      <th className="px-3 sm:px-6 py-3 text-left text-xs font-medium text-gray-600 uppercase whitespace-nowrap">
                        Jersey Name
                      </th>
                      <th className="px-3 sm:px-6 py-3 text-left text-xs font-medium text-gray-600 uppercase whitespace-nowrap">
                        Actions
                      </th>
                    </tr>
                  </thead>
                  <tbody className="divide-y divide-gray-200">
                    {genericJerseys.map((generic, index) => {
                      const isEditing = editingIndex === index;

                      return (
                        <tr key={index} className="hover:bg-gray-50">
                          {isEditing ? (
                            <>
                              <td className="px-3 sm:px-6 py-3 sm:py-4">
                                <input
                                  type="number"
                                  value={editValues.jerseyNumber}
                                  onChange={(e) =>
                                    setEditValues({
                                      ...editValues,
                                      jerseyNumber: e.target.value,
                                    })
                                  }
                                  className="w-16 sm:w-20 px-2 py-1 border border-gray-300 rounded text-sm focus:outline-none focus:ring-2 focus:ring-blue-500"
                                  placeholder="99"
                                />
                              </td>
                              <td className="px-3 sm:px-6 py-3 sm:py-4">
                                <select
                                  value={editValues.jerseySize}
                                  onChange={(e) =>
                                    setEditValues({
                                      ...editValues,
                                      jerseySize: e.target.value,
                                    })
                                  }
                                  className="w-20 sm:w-24 px-2 py-1 border border-gray-300 rounded text-sm focus:outline-none focus:ring-2 focus:ring-blue-500"
                                >
                                  <option value="">-</option>
                                  <option value="SM">SM</option>
                                  <option value="MD">MD</option>
                                  <option value="LG">LG</option>
                                  <option value="XL">XL</option>
                                  <option value="XXL">XXL</option>
                                </select>
                              </td>
                              <td className="px-3 sm:px-6 py-3 sm:py-4">
                                <input
                                  type="text"
                                  value={editValues.jerseyName}
                                  onChange={(e) =>
                                    setEditValues({
                                      ...editValues,
                                      jerseyName: e.target.value,
                                    })
                                  }
                                  className="w-24 sm:w-32 px-2 py-1 border border-gray-300 rounded text-sm focus:outline-none focus:ring-2 focus:ring-blue-500"
                                  placeholder="EXTRA"
                                  maxLength={15}
                                />
                              </td>
                            </>
                          ) : (
                            <>
                              <td className="px-3 sm:px-6 py-3 sm:py-4 text-sm whitespace-nowrap">
                                {generic.jerseyNumber != null ? (
                                  <span className="text-gray-900">
                                    #{generic.jerseyNumber}
                                  </span>
                                ) : (
                                  <span className="inline-flex items-center gap-1 px-2 py-1 bg-amber-100 text-amber-700 text-xs font-medium rounded whitespace-nowrap">
                                    <AlertCircle size={12} />
                                    <span className="hidden sm:inline">Missing</span>
                                  </span>
                                )}
                              </td>
                              <td className="px-3 sm:px-6 py-3 sm:py-4 text-sm whitespace-nowrap">
                                {generic.jerseySize ? (
                                  <span className="text-gray-900">
                                    {generic.jerseySize}
                                  </span>
                                ) : (
                                  <span className="inline-flex items-center gap-1 px-2 py-1 bg-amber-100 text-amber-700 text-xs font-medium rounded whitespace-nowrap">
                                    <AlertCircle size={12} />
                                    <span className="hidden sm:inline">Missing</span>
                                  </span>
                                )}
                              </td>
                              <td className="px-3 sm:px-6 py-3 sm:py-4 text-sm text-gray-900">
                                {generic.jerseyName || "-"}
                              </td>
                            </>
                          )}

                          <td className="px-3 sm:px-6 py-3 sm:py-4 text-sm">
                            {isEditing ? (
                              <div className="flex gap-2">
                                <button
                                  onClick={() => handleSaveEdit(index)}
                                  className="text-green-600 hover:text-green-700 p-1 hover:bg-green-50 rounded"
                                  title="Save"
                                >
                                  <Check size={16} />
                                </button>
                                <button
                                  onClick={handleCancelEdit}
                                  className="text-gray-600 hover:text-gray-700 p-1 hover:bg-gray-100 rounded"
                                  title="Cancel"
                                >
                                  <X size={16} />
                                </button>
                              </div>
                            ) : (
                              <div className="flex gap-2">
                                <button
                                  onClick={() => handleStartEdit(index, generic)}
                                  className="text-blue-600 hover:text-blue-700 p-1 hover:bg-blue-50 rounded"
                                  title="Edit"
                                >
                                  <Edit2 size={16} />
                                </button>
                                <button
                                  onClick={() => handleRemove(index)}
                                  className="text-red-600 hover:text-red-700 p-1 hover:bg-red-50 rounded"
                                  title="Delete"
                                >
                                  <Trash2 size={16} />
                                </button>
                              </div>
                            )}
                          </td>
                        </tr>
                      );
                    })}
                  </tbody>
                </table>
              </div>
            </div>
          </div>
        </div>
      ) : (
        <div className="bg-gray-50 rounded-lg p-12 text-center">
          <Package size={56} className="text-gray-400 mx-auto mb-3" />
          <p className="text-gray-600">No generic jerseys added yet</p>
          <p className="text-sm text-gray-500 mt-1">
            Add extra jerseys for late joiners or additional players
          </p>
        </div>
      )}
    </div>
  );
}


----- components\jerseys\JerseyDashboard.tsx -----

// src/components/jerseys/JerseyDashboard.tsx

/**
 * SOLID - Single Responsibility Principle (SRP)
 * Jersey dashboard container ONLY - coordinates child components
 */

"use client";

import { useMemo, useEffect } from "react";
import { useRouter, useSearchParams } from "next/navigation";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Label } from "@/components/ui/label";
import { useJerseyData } from "@/hooks/useJerseyData";
import JerseyStats from "./JerseyStats";
import DivisionInfo from "./DivisionInfo";
import TeamCard from "./TeamCard";

export default function JerseyDashboard() {
  const router = useRouter();
  const searchParams = useSearchParams();

  const selectedLocation = searchParams.get("location") || "all";
  const selectedDivision = searchParams.get("division") || null;

  // Fetch all data without location filter
  const { divisions, stats, locations, teams, isLoading, error } =
    useJerseyData();

  // Update URL with new filter values
  const updateFilters = (updates: Record<string, string | undefined>) => {
    const params = new URLSearchParams(searchParams.toString());

    Object.entries(updates).forEach(([key, value]) => {
      if (value) {
        params.set(key, value);
      } else {
        params.delete(key);
      }
    });

    router.push(`/admin/jerseys?${params.toString()}`);
  };

  // Filter divisions by selected location
  const filteredDivisions = useMemo(() => {
    if (selectedLocation === "all") return divisions;
    return divisions.filter(
      (div) => div.location?._id?.toString() === selectedLocation
    );
  }, [divisions, selectedLocation]);

  // Auto-select first division when divisions change and no division selected
  useEffect(() => {
    if (filteredDivisions.length > 0 && !selectedDivision) {
      updateFilters({ division: filteredDivisions[0]._id });
    }
  }, [filteredDivisions.length]);

  const currentDivision = filteredDivisions.find(
    (d) => d._id === selectedDivision
  );

  // Fetch teams for selected division
  const { teams: divisionTeams, isLoading: teamsLoading } = useJerseyData(
    undefined,
    selectedDivision || undefined
  );

  if (error) {
    return (
      <div className="min-h-screen bg-gray-50 p-6">
        <div className="bg-red-50 border border-red-200 rounded-lg p-4">
          <p className="text-red-800">Error loading jersey data: {error}</p>
        </div>
      </div>
    );
  }

  return (
    <div className="p-6 space-y-6">
      {/* Header */}
      <div>
        <h1 className="text-3xl font-bold tracking-tight">
          Jersey Management
        </h1>
        <p className="text-gray-600 mt-1">
          Manage jersey designs and player details across all teams
        </p>
      </div>

      {/* Summary Stats */}
      {isLoading ? (
        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4">
          {[1, 2, 3, 4].map((i) => (
            <div
              key={i}
              className="bg-white rounded-lg shadow p-5 h-24 animate-pulse"
            >
              <div className="h-4 bg-gray-200 rounded w-3/4 mb-2"></div>
              <div className="h-8 bg-gray-200 rounded w-1/2"></div>
            </div>
          ))}
        </div>
      ) : (
        <JerseyStats stats={stats} />
      )}

      {/* Filters */}
      <div className="flex flex-col sm:flex-row gap-4">
        {/* Location Filter */}
        <div className="flex-1">
          <Label htmlFor="location-filter">Location</Label>
          <Select
            value={selectedLocation}
            onValueChange={(value) =>
              updateFilters({
                location: value === "all" ? undefined : value,
                division: undefined,
              })
            }
            disabled={isLoading}
          >
            <SelectTrigger id="location-filter" className="w-full">
              <SelectValue placeholder="All Locations" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="all">All Locations</SelectItem>
              {locations.map((loc) => (
                <SelectItem key={loc._id} value={loc._id}>
                  {loc.name}
                </SelectItem>
              ))}
            </SelectContent>
          </Select>
        </div>

        {/* Division Selector */}
        <div className="flex-1">
          <Label htmlFor="division-filter">Division</Label>
          <Select
            value={selectedDivision || ""}
            onValueChange={(value) => updateFilters({ division: value })}
            disabled={isLoading || filteredDivisions.length === 0}
          >
            <SelectTrigger id="division-filter" className="w-full">
              <SelectValue
                placeholder={
                  filteredDivisions.length === 0
                    ? "No divisions available"
                    : "Select division"
                }
              />
            </SelectTrigger>
            <SelectContent>
              {filteredDivisions.map((div) => (
                <SelectItem key={div._id} value={div._id}>
                  {div.divisionName} - {div.day} ({div.teamCount} teams)
                </SelectItem>
              ))}
            </SelectContent>
          </Select>
        </div>
      </div>

      {/* Current Division Info */}
      {isLoading ? (
        <div className="bg-white rounded-lg shadow p-5 h-24 animate-pulse">
          <div className="h-6 bg-gray-200 rounded w-1/3 mb-2"></div>
          <div className="h-4 bg-gray-200 rounded w-1/2"></div>
        </div>
      ) : currentDivision ? (
        <>
          <DivisionInfo division={currentDivision} teams={divisionTeams} />

          {/* Teams Grid */}
          {teamsLoading ? (
            <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4">
              {[1, 2, 3, 4].map((i) => (
                <div
                  key={i}
                  className="bg-white border border-gray-200 rounded-lg p-4 h-64 animate-pulse"
                >
                  <div className="h-4 bg-gray-200 rounded w-3/4 mb-3"></div>
                  <div className="h-6 bg-gray-200 rounded w-1/2 mb-3"></div>
                  <div className="h-4 bg-gray-200 rounded w-full mb-3"></div>
                  <div className="h-10 bg-gray-200 rounded w-full"></div>
                </div>
              ))}
            </div>
          ) : divisionTeams.length > 0 ? (
            <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4">
              {divisionTeams.map((team) => (
                <TeamCard key={team._id} team={team} />
              ))}
            </div>
          ) : (
            <div className="bg-white rounded-lg shadow p-12 text-center">
              <p className="text-gray-600">No teams in this division yet</p>
            </div>
          )}
        </>
      ) : (
        <div className="bg-white rounded-lg shadow p-12 text-center">
          <p className="text-gray-600">
            {filteredDivisions.length === 0
              ? "No divisions available for the selected location"
              : "Select a division to view teams"}
          </p>
        </div>
      )}
    </div>
  );
}


----- components\jerseys\JerseyDesignSection.tsx -----

// src/components/jerseys/JerseyDesignSection.tsx

/**
 * SOLID - Single Responsibility Principle (SRP)
 * Display and manage jersey design ONLY
 */

"use client";

import { useState } from "react";
import { Image, Shirt, Upload, Trash2, AlertCircle, X } from "lucide-react";
import { TeamJerseyDetails } from "@/types/jersey";

interface JerseyDesignSectionProps {
  team: TeamJerseyDetails;
  onChooseEdition: () => void;
  onUploadCustom: () => void;
  onRemoveDesign: () => void;
}

export default function JerseyDesignSection({
  team,
  onChooseEdition,
  onUploadCustom,
  onRemoveDesign,
}: JerseyDesignSectionProps) {
  const [showImageModal, setShowImageModal] = useState(false);

  return (
    <div className="bg-white rounded-lg shadow mb-6 p-4 sm:p-6">
      <h2 className="text-base sm:text-lg font-semibold text-gray-900 mb-4">
        Jersey Design
      </h2>

      {team.isCustomJersey ? (
        // Custom Jersey State
        <div className="bg-gray-50 rounded-lg p-4 sm:p-6">
          <div className="flex flex-col sm:flex-row items-start sm:items-center gap-4">
            {team.jerseyImages && team.jerseyImages.length > 0 ? (
              <button
                onClick={() => setShowImageModal(true)}
                className="w-24 h-24 rounded-lg flex items-center justify-center flex-shrink-0 overflow-hidden border-2 border-gray-300 hover:border-blue-500 transition-colors cursor-pointer group relative"
              >
                <img
                  src={team.jerseyImages[0].url}
                  alt="Custom Jersey Design"
                  className="w-full h-full object-cover"
                />
                <div className="absolute inset-0 bg-black bg-opacity-0 group-hover:bg-opacity-20 transition-all flex items-center justify-center">
                  <span className="text-white text-xs opacity-0 group-hover:opacity-100">
                    View
                  </span>
                </div>
              </button>
            ) : (
              <div className="w-24 h-24 bg-gray-200 rounded-lg flex items-center justify-center flex-shrink-0">
                <Image size={40} className="text-gray-400" />
              </div>
            )}
            <div className="flex-1 min-w-0">
              <p className="font-medium text-gray-900 text-base sm:text-lg">
                Custom Jersey Design
              </p>
              <p className="text-xs sm:text-sm text-gray-600 mt-1">
                Custom design uploaded
              </p>
            </div>
            <div className="flex gap-2 w-full sm:w-auto">
              <button
                onClick={onUploadCustom}
                className="flex-1 sm:flex-none px-3 sm:px-4 py-2 border border-gray-300 rounded-lg text-xs sm:text-sm font-medium text-gray-700 hover:bg-gray-100 flex items-center justify-center gap-2"
              >
                <Upload size={16} />
                Replace
              </button>
              <button
                onClick={onRemoveDesign}
                className="flex-1 sm:flex-none px-3 sm:px-4 py-2 border border-red-300 rounded-lg text-xs sm:text-sm font-medium text-red-700 hover:bg-red-50 flex items-center justify-center gap-2"
              >
                <Trash2 size={16} />
                Remove
              </button>
            </div>
          </div>
        </div>
      ) : team.jerseyEdition ? (
        // Edition Jersey State
        <div className="bg-gray-50 rounded-lg p-4 sm:p-6">
          <div className="flex flex-col sm:flex-row items-start sm:items-center gap-4 mb-4">
            <div className="w-24 h-24 bg-blue-100 rounded-lg flex items-center justify-center flex-shrink-0">
              <Shirt size={40} className="text-blue-600" />
            </div>
            <div className="flex-1 min-w-0">
              <p className="font-medium text-gray-900 text-base sm:text-lg">
                Edition: {team.jerseyEdition}
              </p>
              <p className="text-xs sm:text-sm text-gray-600 mt-1">
                Standard edition jersey
              </p>
            </div>
            <div className="flex gap-2 w-full sm:w-auto">
              <button
                onClick={onRemoveDesign}
                className="flex-1 sm:flex-none px-3 sm:px-4 py-2 border border-red-300 rounded-lg text-xs sm:text-sm font-medium text-red-700 hover:bg-red-50 flex items-center justify-center gap-2"
              >
                <Trash2 size={16} />
                <span className="hidden sm:inline">Remove Design</span>
                <span className="sm:hidden">Remove</span>
              </button>
            </div>
          </div>
          {/* Colors */}
          <div className="flex flex-wrap gap-3 sm:gap-4 mt-4">
            <div className="flex items-center gap-2">
              <span className="text-xs sm:text-sm text-gray-600">Primary:</span>
              <div
                className="w-8 h-8 sm:w-10 sm:h-10 rounded border-2 border-gray-300 flex-shrink-0"
                style={{ backgroundColor: team.primaryColor || "#999" }}
              />
              <span className="text-xs text-gray-500 truncate">{team.primaryColor}</span>
            </div>
            <div className="flex items-center gap-2">
              <span className="text-xs sm:text-sm text-gray-600">Secondary:</span>
              <div
                className="w-8 h-8 sm:w-10 sm:h-10 rounded border-2 border-gray-300 flex-shrink-0"
                style={{ backgroundColor: team.secondaryColor || "#666" }}
              />
              <span className="text-xs text-gray-500 truncate">
                {team.secondaryColor}
              </span>
            </div>
            <div className="flex items-center gap-2">
              <span className="text-xs sm:text-sm text-gray-600">Tertiary:</span>
              <div
                className="w-8 h-8 sm:w-10 sm:h-10 rounded border-2 border-gray-300 flex-shrink-0"
                style={{ backgroundColor: team.tertiaryColor || "#333" }}
              />
              <span className="text-xs text-gray-500 truncate">
                {team.tertiaryColor}
              </span>
            </div>
          </div>
        </div>
      ) : (
        // No Design State
        <div className="bg-gray-50 rounded-lg p-8 sm:p-12 text-center">
          <AlertCircle size={48} className="sm:w-14 sm:h-14 text-gray-400 mx-auto mb-4" />
          <p className="text-gray-700 font-medium mb-2 text-sm sm:text-base">
            No jersey design selected
          </p>
          <p className="text-gray-600 mb-6 text-xs sm:text-sm">
            Choose an edition or upload a custom design
          </p>
          <div className="flex flex-col sm:flex-row gap-3 justify-center">
            <button
              onClick={onChooseEdition}
              className="px-4 sm:px-6 py-2 sm:py-3 bg-blue-600 text-white rounded-lg text-sm font-medium hover:bg-blue-700 inline-flex items-center justify-center gap-2"
            >
              <Shirt size={18} />
              Choose Edition
            </button>
            <button
              onClick={onUploadCustom}
              className="px-4 sm:px-6 py-2 sm:py-3 border border-gray-300 text-gray-700 rounded-lg text-sm font-medium hover:bg-gray-50 inline-flex items-center justify-center gap-2"
            >
              <Upload size={18} />
              Upload Custom
            </button>
          </div>
        </div>
      )}

      {/* Image Modal */}
      {showImageModal && team.jerseyImages && team.jerseyImages.length > 0 && (
        <div
          className="fixed inset-0 bg-black bg-opacity-75 flex items-center justify-center z-50 p-4"
          onClick={() => setShowImageModal(false)}
        >
          <div className="relative max-w-4xl max-h-[90vh] w-full">
            <button
              onClick={() => setShowImageModal(false)}
              className="absolute -top-12 right-0 text-white hover:text-gray-300 transition-colors"
            >
              <X size={32} />
            </button>
            <img
              src={team.jerseyImages[0].url}
              alt="Custom Jersey Design"
              className="w-full h-full object-contain rounded-lg"
              onClick={(e) => e.stopPropagation()}
            />
          </div>
        </div>
      )}
    </div>
  );
}


----- components\jerseys\JerseyEditionPopup.tsx -----

// src/components/jerseys/JerseyEditionPopup.tsx

/**
 * SOLID - Single Responsibility Principle (SRP)
 * Jersey edition selection popup ONLY
 */

"use client";

import { useState } from "react";
import { X, CheckCircle, Shirt } from "lucide-react";

const jerseyEditions = [
  { id: "retro-1", name: "Retro 1", description: "Classic vintage style" },
  { id: "retro-2", name: "Retro 2", description: "Old school design" },
  { id: "classic-1", name: "Classic 1", description: "Traditional look" },
  { id: "classic-2", name: "Classic 2", description: "Timeless design" },
  { id: "modern-1", name: "Modern 1", description: "Contemporary style" },
  { id: "modern-2", name: "Modern 2", description: "Sleek and bold" },
];

interface JerseyEditionPopupProps {
  isOpen: boolean;
  onClose: () => void;
  onSave: (data: {
    jerseyEdition: string;
    primaryColor: string;
    secondaryColor: string;
    tertiaryColor: string;
  }) => Promise<void>;
}

export default function JerseyEditionPopup({
  isOpen,
  onClose,
  onSave,
}: JerseyEditionPopupProps) {
  const [step, setStep] = useState(1);
  const [selectedEdition, setSelectedEdition] = useState<string | null>(null);
  const [colors, setColors] = useState({
    primary: "#1E40AF",
    secondary: "#FBBF24",
    tertiary: "#FFFFFF",
  });

  if (!isOpen) return null;

  const handleSave = async () => {
    if (selectedEdition) {
      await onSave({
        jerseyEdition: selectedEdition,
        primaryColor: colors.primary,
        secondaryColor: colors.secondary,
        tertiaryColor: colors.tertiary,
      });
      handleClose();
    }
  };

  const handleClose = () => {
    setStep(1);
    setSelectedEdition(null);
    setColors({
      primary: "#1E40AF",
      secondary: "#FBBF24",
      tertiary: "#FFFFFF",
    });
    onClose();
  };

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
      <div className="bg-white rounded-lg w-full max-w-5xl max-h-[90vh] flex flex-col">
        {/* Header */}
        <div className="flex items-center justify-between p-6 border-b border-gray-200 flex-shrink-0">
          <div>
            <h2 className="text-2xl font-bold text-gray-900">
              {step === 1 ? "Choose Jersey Edition" : "Select Team Colors"}
            </h2>
            <p className="text-sm text-gray-600 mt-1">
              {step === 1
                ? "Select a jersey design for your team"
                : "Choose primary, secondary, and tertiary colors"}
            </p>
          </div>
          <button
            onClick={handleClose}
            className="p-2 hover:bg-gray-100 rounded-lg transition-colors"
          >
            <X size={24} className="text-gray-500" />
          </button>
        </div>

        {/* Content */}
        <div className="flex-1 overflow-y-auto p-6">
          {step === 1 ? (
            /* Step 1: Edition Selection */
            <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
              {jerseyEditions.map((edition) => (
                <div
                  key={edition.id}
                  onClick={() => setSelectedEdition(edition.id)}
                  className={`relative border-2 rounded-lg p-4 cursor-pointer transition-all hover:shadow-md ${
                    selectedEdition === edition.id
                      ? "border-blue-600 bg-blue-50"
                      : "border-gray-200 hover:border-gray-300"
                  }`}
                >
                  {/* Selected Indicator */}
                  {selectedEdition === edition.id && (
                    <div className="absolute top-3 right-3 w-6 h-6 bg-blue-600 rounded-full flex items-center justify-center">
                      <CheckCircle size={16} className="text-white" />
                    </div>
                  )}

                  {/* Jersey Image Placeholder */}
                  <div className="w-full aspect-square bg-gray-100 rounded-lg flex items-center justify-center mb-3">
                    <Shirt size={64} className="text-gray-400" />
                  </div>

                  {/* Edition Info */}
                  <h3 className="font-semibold text-gray-900 text-lg">
                    {edition.name}
                  </h3>
                  <p className="text-sm text-gray-600 mt-1">
                    {edition.description}
                  </p>
                </div>
              ))}
            </div>
          ) : (
            /* Step 2: Color Selection */
            <div className="max-w-2xl mx-auto">
              {/* Selected Edition Preview */}
              <div className="bg-gray-50 rounded-lg p-6 mb-6">
                <div className="flex items-center gap-4">
                  <div className="w-24 h-24 bg-gray-100 rounded-lg flex items-center justify-center flex-shrink-0">
                    <Shirt size={48} className="text-gray-400" />
                  </div>
                  <div>
                    <p className="text-sm text-gray-600">Selected Edition</p>
                    <p className="text-xl font-bold text-gray-900">
                      {
                        jerseyEditions.find((e) => e.id === selectedEdition)
                          ?.name
                      }
                    </p>
                  </div>
                </div>
              </div>

              {/* Color Pickers */}
              <div className="space-y-6">
                {/* Primary Color */}
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-3">
                    Primary Color
                  </label>
                  <div className="flex items-center gap-4">
                    <input
                      type="color"
                      value={colors.primary}
                      onChange={(e) =>
                        setColors({ ...colors, primary: e.target.value })
                      }
                      className="w-20 h-20 rounded-lg border-2 border-gray-300 cursor-pointer"
                    />
                    <div className="flex-1">
                      <input
                        type="text"
                        value={colors.primary}
                        onChange={(e) =>
                          setColors({ ...colors, primary: e.target.value })
                        }
                        className="w-full px-4 py-2 border border-gray-300 rounded-lg text-sm font-mono focus:outline-none focus:ring-2 focus:ring-blue-500"
                        placeholder="#1E40AF"
                      />
                      <p className="text-xs text-gray-500 mt-1">
                        Main team color
                      </p>
                    </div>
                  </div>
                </div>

                {/* Secondary Color */}
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-3">
                    Secondary Color
                  </label>
                  <div className="flex items-center gap-4">
                    <input
                      type="color"
                      value={colors.secondary}
                      onChange={(e) =>
                        setColors({ ...colors, secondary: e.target.value })
                      }
                      className="w-20 h-20 rounded-lg border-2 border-gray-300 cursor-pointer"
                    />
                    <div className="flex-1">
                      <input
                        type="text"
                        value={colors.secondary}
                        onChange={(e) =>
                          setColors({ ...colors, secondary: e.target.value })
                        }
                        className="w-full px-4 py-2 border border-gray-300 rounded-lg text-sm font-mono focus:outline-none focus:ring-2 focus:ring-blue-500"
                        placeholder="#FBBF24"
                      />
                      <p className="text-xs text-gray-500 mt-1">Accent color</p>
                    </div>
                  </div>
                </div>

                {/* Tertiary Color */}
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-3">
                    Tertiary Color
                  </label>
                  <div className="flex items-center gap-4">
                    <input
                      type="color"
                      value={colors.tertiary}
                      onChange={(e) =>
                        setColors({ ...colors, tertiary: e.target.value })
                      }
                      className="w-20 h-20 rounded-lg border-2 border-gray-300 cursor-pointer"
                    />
                    <div className="flex-1">
                      <input
                        type="text"
                        value={colors.tertiary}
                        onChange={(e) =>
                          setColors({ ...colors, tertiary: e.target.value })
                        }
                        className="w-full px-4 py-2 border border-gray-300 rounded-lg text-sm font-mono focus:outline-none focus:ring-2 focus:ring-blue-500"
                        placeholder="#FFFFFF"
                      />
                      <p className="text-xs text-gray-500 mt-1">
                        Additional detail color
                      </p>
                    </div>
                  </div>
                </div>

                {/* Color Preview */}
                <div className="bg-gray-50 rounded-lg p-6">
                  <p className="text-sm font-medium text-gray-700 mb-3">
                    Color Preview
                  </p>
                  <div className="flex items-center gap-3">
                    <div
                      className="w-16 h-16 rounded-full border-2 border-white shadow-lg"
                      style={{ backgroundColor: colors.primary }}
                    />
                    <div
                      className="w-16 h-16 rounded-full border-2 border-white shadow-lg -ml-4"
                      style={{ backgroundColor: colors.secondary }}
                    />
                    <div
                      className="w-16 h-16 rounded-full border-2 border-white shadow-lg -ml-4"
                      style={{ backgroundColor: colors.tertiary }}
                    />
                    <div className="ml-4">
                      <p className="text-sm text-gray-600">Team colors</p>
                      <p className="text-xs text-gray-500 mt-1">
                        How your colors will appear
                      </p>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          )}
        </div>

        {/* Footer */}
        <div className="border-t border-gray-200 p-6 bg-gray-50 flex-shrink-0">
          <div className="flex items-center justify-between">
            {step === 1 ? (
              <>
                <button
                  onClick={handleClose}
                  className="px-6 py-2 border border-gray-300 text-gray-700 rounded-lg font-medium hover:bg-gray-100 transition-colors"
                >
                  Cancel
                </button>
                <button
                  onClick={() => setStep(2)}
                  disabled={!selectedEdition}
                  className="px-6 py-2 bg-blue-600 text-white rounded-lg font-medium hover:bg-blue-700 disabled:bg-gray-300 disabled:cursor-not-allowed transition-colors"
                >
                  Continue to Colors
                </button>
              </>
            ) : (
              <>
                <button
                  onClick={() => setStep(1)}
                  className="px-6 py-2 border border-gray-300 text-gray-700 rounded-lg font-medium hover:bg-gray-100 transition-colors"
                >
                  Back to Editions
                </button>
                <button
                  onClick={handleSave}
                  className="px-6 py-2 bg-blue-600 text-white rounded-lg font-medium hover:bg-blue-700 transition-colors"
                >
                  Save Jersey Design
                </button>
              </>
            )}
          </div>
        </div>
      </div>
    </div>
  );
}


----- components\jerseys\JerseyStats.tsx -----

// src/components/jerseys/JerseyStats.tsx

/**
 * SOLID - Single Responsibility Principle (SRP)
 * Display jersey statistics ONLY
 */

"use client";

import { Users, CheckCircle, AlertCircle, Shirt } from "lucide-react";
import { Card, CardContent } from "@/components/ui/card";
import { JerseyStats as JerseyStatsType } from "@/types/jersey";

interface JerseyStatsProps {
  stats: JerseyStatsType;
}

export default function JerseyStats({ stats }: JerseyStatsProps) {
  return (
    <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4">
      {/* Total Teams */}
      <Card>
        <CardContent className="p-5">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm font-medium text-gray-600">
                All Teams (Active Divisions)
              </p>
              <p className="text-2xl font-bold text-gray-900 mt-1">
                {stats.totalTeams}
              </p>
            </div>
            <div className="w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center">
              <Users className="text-blue-600" size={24} />
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Teams with Design */}
      <Card>
        <CardContent className="p-5">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm font-medium text-gray-600">
                Design Selected
              </p>
              <p className="text-2xl font-bold text-green-600 mt-1">
                {stats.teamsWithDesign}
              </p>
              <p className="text-xs text-gray-500 mt-1">
                Custom or edition chosen
              </p>
            </div>
            <div className="w-12 h-12 bg-green-100 rounded-lg flex items-center justify-center">
              <CheckCircle className="text-green-600" size={24} />
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Teams without Design */}
      <Card>
        <CardContent className="p-5">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm font-medium text-gray-600">
                Pending Design
              </p>
              <p className="text-2xl font-bold text-red-600 mt-1">
                {stats.teamsWithoutDesign}
              </p>
              <p className="text-xs text-gray-500 mt-1">No design selected</p>
            </div>
            <div className="w-12 h-12 bg-red-100 rounded-lg flex items-center justify-center">
              <AlertCircle className="text-red-600" size={24} />
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Complete Teams */}
      <Card>
        <CardContent className="p-5">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm font-medium text-gray-600">Ready to Order</p>
              <p className="text-2xl font-bold text-purple-600 mt-1">
                {stats.completeTeams}
              </p>
              <p className="text-xs text-gray-500 mt-1">
                Design + player details complete
              </p>
            </div>
            <div className="w-12 h-12 bg-purple-100 rounded-lg flex items-center justify-center">
              <Shirt className="text-purple-600" size={24} />
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}


----- components\jerseys\PlayerJerseyTable.tsx -----

// src/components/jerseys/PlayerJerseyTable.tsx

/**
 * SOLID - Single Responsibility Principle (SRP)
 * Display and edit player jersey details ONLY
 */

"use client";

import { useState } from "react";
import {
  Edit2,
  Check,
  X,
  AlertCircle,
  DollarSign,
  UserX,
  Users,
  Copy,
  Table2,
  Edit,
} from "lucide-react";

interface Player {
  _id: string;
  playerName: string;
  jerseyNumber?: number;
  jerseySize?: string;
  jerseyName?: string;
  user?: string;
  paymentStatus?: {
    hasPaid?: boolean;
  };
}

interface GenericJersey {
  jerseyNumber?: number;
  jerseySize?: string;
  jerseyName?: string;
}

interface PlayerJerseyTableProps {
  players: Player[];
  genericJerseys?: GenericJersey[];
  onUpdatePlayer: (
    playerId: string,
    data: {
      jerseyNumber?: number | null;
      jerseySize?: string | null;
      jerseyName?: string | null;
    }
  ) => Promise<void>;
}

export default function PlayerJerseyTable({
  players,
  genericJerseys = [],
  onUpdatePlayer,
}: PlayerJerseyTableProps) {
  const [viewMode, setViewMode] = useState<"edit" | "summary">("edit");
  const [copied, setCopied] = useState(false);
  const [editingPlayer, setEditingPlayer] = useState<string | null>(null);
  const [editValues, setEditValues] = useState<{
    jerseyNumber: string;
    jerseySize: string;
    jerseyName: string;
  }>({ jerseyNumber: "", jerseySize: "", jerseyName: "" });

  const playersWithDetails = players.filter(
    (p) => p.jerseyNumber != null && p.jerseySize != null
  );

  const handleCopyToClipboard = () => {
    // Create tab-separated values for easy paste into Google Sheets
    const headers = ["Jersey Name", "Jersey Number", "Size"];
    const rows: string[][] = [];

    // Add players
    players.forEach((player) => {
      rows.push([
        player.jerseyName || "",
        player.jerseyNumber?.toString() || "",
        player.jerseySize || "",
      ]);
    });

    // Add generic jerseys
    genericJerseys.forEach((generic) => {
      rows.push([
        generic.jerseyName || "",
        generic.jerseyNumber?.toString() || "",
        generic.jerseySize || "",
      ]);
    });

    // Create tab-separated string
    const tsvContent = [
      headers.join("\t"),
      ...rows.map((row) => row.join("\t")),
    ].join("\n");

    // Copy to clipboard
    navigator.clipboard.writeText(tsvContent).then(() => {
      setCopied(true);
      setTimeout(() => setCopied(false), 2000);
    });
  };

  const handleStartEdit = (player: Player) => {
    setEditingPlayer(player._id);
    setEditValues({
      jerseyNumber: player.jerseyNumber?.toString() || "",
      jerseySize: player.jerseySize || "",
      jerseyName: player.jerseyName || "",
    });
  };

  const handleSaveEdit = async (playerId: string) => {
    await onUpdatePlayer(playerId, {
      jerseyNumber: editValues.jerseyNumber
        ? parseInt(editValues.jerseyNumber)
        : null,
      jerseySize: editValues.jerseySize || null,
      jerseyName: editValues.jerseyName || null,
    });
    setEditingPlayer(null);
    setEditValues({ jerseyNumber: "", jerseySize: "", jerseyName: "" });
  };

  const handleCancelEdit = () => {
    setEditingPlayer(null);
    setEditValues({ jerseyNumber: "", jerseySize: "", jerseyName: "" });
  };

  const totalJerseys = players.length + genericJerseys.length;

  return (
    <div className="bg-white rounded-lg shadow mb-6 p-4 sm:p-6">
      <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-3 mb-4">
        <h2 className="text-base sm:text-lg font-semibold text-gray-900">
          {viewMode === "edit" ? (
            <>
              Team Players & Jerseys
              <span className="ml-2 text-xs sm:text-sm font-normal text-gray-600">
                ({playersWithDetails.length}/{players.length} players complete)
              </span>
            </>
          ) : (
            <>
              Jersey Summary
              <span className="ml-2 text-xs sm:text-sm font-normal text-gray-600">
                ({totalJerseys} total jerseys)
              </span>
            </>
          )}
        </h2>
        <div className="flex gap-2">
          <button
            onClick={() => setViewMode(viewMode === "edit" ? "summary" : "edit")}
            className="px-3 sm:px-4 py-2 border border-gray-300 text-gray-700 rounded-lg text-xs sm:text-sm font-medium hover:bg-gray-50 inline-flex items-center gap-2 justify-center"
          >
            {viewMode === "edit" ? (
              <>
                <Table2 size={16} />
                <span className="hidden sm:inline">Summary View</span>
                <span className="sm:hidden">Summary</span>
              </>
            ) : (
              <>
                <Edit size={16} />
                <span className="hidden sm:inline">Edit View</span>
                <span className="sm:hidden">Edit</span>
              </>
            )}
          </button>
          {viewMode === "summary" && (
            <button
              onClick={handleCopyToClipboard}
              className="px-3 sm:px-4 py-2 bg-blue-600 text-white rounded-lg text-xs sm:text-sm font-medium hover:bg-blue-700 inline-flex items-center gap-2 justify-center"
            >
              {copied ? (
                <>
                  <Check size={16} />
                  <span className="hidden sm:inline">Copied!</span>
                </>
              ) : (
                <>
                  <Copy size={16} />
                  <span className="hidden sm:inline">Copy for Sheets</span>
                  <span className="sm:hidden">Copy</span>
                </>
              )}
            </button>
          )}
        </div>
      </div>

      {viewMode === "summary" ? (
        // Summary View - Combined Players and Generic Jerseys
        <div className="border border-gray-200 rounded-lg overflow-hidden">
          <div className="overflow-x-auto">
            <div className="inline-block min-w-full align-middle">
              <div className="overflow-hidden">
                <table className="min-w-full divide-y divide-gray-200">
                  <thead className="bg-gray-50">
                    <tr>
                      <th className="px-3 sm:px-6 py-3 text-left text-xs font-medium text-gray-600 uppercase whitespace-nowrap">
                        Jersey Name
                      </th>
                      <th className="px-3 sm:px-6 py-3 text-left text-xs font-medium text-gray-600 uppercase whitespace-nowrap">
                        Number
                      </th>
                      <th className="px-3 sm:px-6 py-3 text-left text-xs font-medium text-gray-600 uppercase whitespace-nowrap">
                        Size
                      </th>
                    </tr>
                  </thead>
                  <tbody className="divide-y divide-gray-200 bg-white">
                    {players.map((player) => (
                      <tr key={player._id} className="hover:bg-gray-50">
                        <td className="px-3 sm:px-6 py-3 sm:py-4 text-sm text-gray-900 font-medium">
                          {player.jerseyName || "-"}
                        </td>
                        <td className="px-3 sm:px-6 py-3 sm:py-4 text-sm text-gray-900 whitespace-nowrap">
                          {player.jerseyNumber != null
                            ? `${player.jerseyNumber}`
                            : "-"}
                        </td>
                        <td className="px-3 sm:px-6 py-3 sm:py-4 text-sm text-gray-900 whitespace-nowrap">
                          {player.jerseySize || "-"}
                        </td>
                      </tr>
                    ))}
                    {genericJerseys.map((generic, idx) => (
                      <tr key={`generic-${idx}`} className="hover:bg-gray-50 bg-purple-50">
                        <td className="px-3 sm:px-6 py-3 sm:py-4 text-sm text-gray-900 font-medium">
                          {generic.jerseyName || "-"}
                        </td>
                        <td className="px-3 sm:px-6 py-3 sm:py-4 text-sm text-gray-900 whitespace-nowrap">
                          {generic.jerseyNumber != null
                            ? `${generic.jerseyNumber}`
                            : "-"}
                        </td>
                        <td className="px-3 sm:px-6 py-3 sm:py-4 text-sm text-gray-900 whitespace-nowrap">
                          {generic.jerseySize || "-"}
                        </td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
            </div>
          </div>
        </div>
      ) : players.length > 0 ? (
        <div className="border border-gray-200 rounded-lg overflow-hidden">
          <div className="overflow-x-auto">
            <div className="inline-block min-w-full align-middle">
              <div className="overflow-hidden">
            <table className="min-w-full divide-y divide-gray-200">
              <thead className="bg-gray-50">
                <tr>
                  <th className="px-3 sm:px-6 py-3 text-left text-xs font-medium text-gray-600 uppercase whitespace-nowrap">
                    Player Name
                  </th>
                  <th className="px-3 sm:px-6 py-3 text-left text-xs font-medium text-gray-600 uppercase whitespace-nowrap">
                    Number
                  </th>
                  <th className="px-3 sm:px-6 py-3 text-left text-xs font-medium text-gray-600 uppercase whitespace-nowrap">
                    Size
                  </th>
                  <th className="px-3 sm:px-6 py-3 text-left text-xs font-medium text-gray-600 uppercase whitespace-nowrap">
                    Jersey Name
                  </th>
                  <th className="px-3 sm:px-6 py-3 text-left text-xs font-medium text-gray-600 uppercase whitespace-nowrap">
                    Payment
                  </th>
                  <th className="px-3 sm:px-6 py-3 text-left text-xs font-medium text-gray-600 uppercase whitespace-nowrap">
                    Actions
                  </th>
                </tr>
              </thead>
              <tbody className="divide-y divide-gray-200">
                {players.map((player) => {
                  const isEditing = editingPlayer === player._id;

                  return (
                    <tr key={player._id} className="hover:bg-gray-50">
                      <td className="px-3 sm:px-6 py-3 sm:py-4 text-sm text-gray-900 font-medium">
                        <div className="flex items-center gap-2">
                          <span className="truncate max-w-[120px] sm:max-w-none">
                            {player.playerName}
                          </span>
                          {!player.user && (
                            <span
                              className="inline-flex items-center gap-1 px-2 py-0.5 bg-gray-100 text-gray-600 text-xs rounded flex-shrink-0"
                              title="No user account"
                            >
                              <UserX size={12} />
                            </span>
                          )}
                        </div>
                      </td>

                      {isEditing ? (
                        <>
                          <td className="px-3 sm:px-6 py-3 sm:py-4">
                            <input
                              type="number"
                              value={editValues.jerseyNumber}
                              onChange={(e) =>
                                setEditValues({
                                  ...editValues,
                                  jerseyNumber: e.target.value,
                                })
                              }
                              className="w-16 sm:w-20 px-2 py-1 border border-gray-300 rounded text-sm focus:outline-none focus:ring-2 focus:ring-blue-500"
                              placeholder="23"
                            />
                          </td>
                          <td className="px-3 sm:px-6 py-3 sm:py-4">
                            <select
                              value={editValues.jerseySize}
                              onChange={(e) =>
                                setEditValues({
                                  ...editValues,
                                  jerseySize: e.target.value,
                                })
                              }
                              className="w-20 sm:w-24 px-2 py-1 border border-gray-300 rounded text-sm focus:outline-none focus:ring-2 focus:ring-blue-500"
                            >
                              <option value="">-</option>
                              <option value="SM">SM</option>
                              <option value="MD">MD</option>
                              <option value="LG">LG</option>
                              <option value="XL">XL</option>
                              <option value="XXL">XXL</option>
                            </select>
                          </td>
                          <td className="px-3 sm:px-6 py-3 sm:py-4">
                            <input
                              type="text"
                              value={editValues.jerseyName}
                              onChange={(e) =>
                                setEditValues({
                                  ...editValues,
                                  jerseyName: e.target.value,
                                })
                              }
                              className="w-24 sm:w-32 px-2 py-1 border border-gray-300 rounded text-sm focus:outline-none focus:ring-2 focus:ring-blue-500"
                              placeholder="DOE"
                              maxLength={15}
                            />
                          </td>
                        </>
                      ) : (
                        <>
                          <td className="px-3 sm:px-6 py-3 sm:py-4 text-sm whitespace-nowrap">
                            {player.jerseyNumber != null ? (
                              <span className="text-gray-900">
                                #{player.jerseyNumber}
                              </span>
                            ) : (
                              <span className="inline-flex items-center gap-1 px-2 py-1 bg-amber-100 text-amber-700 text-xs font-medium rounded whitespace-nowrap">
                                <AlertCircle size={12} />
                                <span className="hidden sm:inline">Missing</span>
                              </span>
                            )}
                          </td>
                          <td className="px-3 sm:px-6 py-3 sm:py-4 text-sm whitespace-nowrap">
                            {player.jerseySize ? (
                              <span className="text-gray-900">
                                {player.jerseySize}
                              </span>
                            ) : (
                              <span className="inline-flex items-center gap-1 px-2 py-1 bg-amber-100 text-amber-700 text-xs font-medium rounded whitespace-nowrap">
                                <AlertCircle size={12} />
                                <span className="hidden sm:inline">Missing</span>
                              </span>
                            )}
                          </td>
                          <td className="px-3 sm:px-6 py-3 sm:py-4 text-sm text-gray-900">
                            {player.jerseyName || "-"}
                          </td>
                        </>
                      )}

                      <td className="px-3 sm:px-6 py-3 sm:py-4 text-sm">
                        {player.paymentStatus?.hasPaid ? (
                          <span className="inline-flex items-center gap-1 px-2 sm:px-3 py-1 bg-green-100 text-green-700 text-xs font-medium rounded-full whitespace-nowrap">
                            <DollarSign size={14} />
                            <span className="hidden sm:inline">Paid</span>
                          </span>
                        ) : (
                          <span className="inline-flex items-center gap-1 px-2 sm:px-3 py-1 bg-red-100 text-red-700 text-xs font-medium rounded-full whitespace-nowrap">
                            <AlertCircle size={14} />
                            <span className="hidden sm:inline">Not Paid</span>
                          </span>
                        )}
                      </td>

                      <td className="px-3 sm:px-6 py-3 sm:py-4 text-sm">
                        {isEditing ? (
                          <div className="flex gap-2">
                            <button
                              onClick={() => handleSaveEdit(player._id)}
                              className="text-green-600 hover:text-green-700 p-1 hover:bg-green-50 rounded"
                              title="Save"
                            >
                              <Check size={16} />
                            </button>
                            <button
                              onClick={handleCancelEdit}
                              className="text-gray-600 hover:text-gray-700 p-1 hover:bg-gray-100 rounded"
                              title="Cancel"
                            >
                              <X size={16} />
                            </button>
                          </div>
                        ) : (
                          <button
                            onClick={() => handleStartEdit(player)}
                            className="text-blue-600 hover:text-blue-700 p-1 hover:bg-blue-50 rounded"
                            title="Edit"
                          >
                            <Edit2 size={16} />
                          </button>
                        )}
                      </td>
                    </tr>
                  );
                })}
              </tbody>
            </table>
          </div>
            </div>
          </div>
        </div>
      ) : (
        <div className="bg-gray-50 rounded-lg p-12 text-center">
          <Users size={56} className="text-gray-400 mx-auto mb-3" />
          <p className="text-gray-600">No players on this team yet</p>
        </div>
      )}
    </div>
  );
}


----- components\jerseys\TeamCard.tsx -----

// src/components/jerseys/TeamCard.tsx

/**
 * SOLID - Single Responsibility Principle (SRP)
 * Display single team card ONLY
 */

"use client";

import { useRouter } from "next/navigation";
import {
  Image,
  Shirt,
  Users,
  CheckCircle,
  AlertCircle,
  Clock,
} from "lucide-react";
import { Card, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { TeamWithJerseyInfo } from "@/types/jersey";

interface TeamCardProps {
  team: TeamWithJerseyInfo;
}

export default function TeamCard({ team }: TeamCardProps) {
  const router = useRouter();

  const playersWithDetails = team.players.filter(
    (p) => p.jerseyNumber != null && p.jerseySize != null
  );
  const totalPlayers = team.players.length;
  const readyCount = playersWithDetails.length;

  const hasJerseyDesign = team.isCustomJersey || team.jerseyEdition;

  const getJerseyTypeBadge = () => {
    if (team.isCustomJersey) {
      return (
        <span className="inline-flex items-center gap-1 px-2 py-1 bg-green-100 text-green-700 text-xs font-medium rounded">
          <Image size={12} />
          Custom
        </span>
      );
    }

    if (team.jerseyEdition) {
      return (
        <span className="inline-flex items-center gap-1 px-2 py-1 bg-blue-100 text-blue-700 text-xs font-medium rounded">
          <Shirt size={12} />
          {team.jerseyEdition}
        </span>
      );
    }

    return (
      <span className="inline-flex items-center gap-1 px-2 py-1 bg-red-100 text-red-700 text-xs font-medium rounded">
        <AlertCircle size={12} />
        No Design
      </span>
    );
  };

  const handleViewTeam = () => {
    router.push(`/admin/jerseys/${team._id}`);
  };

  return (
    <Card className="hover:border-gray-300 hover:shadow-md transition-all">
      <CardContent className="p-4">
        {/* Team Header */}
        <div className="mb-3">
          {team.jerseyEdition ? (
            <div className="flex items-center gap-2">
              <div
                className="w-6 h-6 rounded-full border-2 border-white shadow"
                style={{ backgroundColor: team.primaryColor || "#999" }}
              />
              <div
                className="w-6 h-6 rounded-full border-2 border-white shadow -ml-3"
                style={{ backgroundColor: team.secondaryColor || "#666" }}
              />
              <h3 className="font-semibold text-gray-900 ml-1 truncate">
                {team.teamName}
              </h3>
            </div>
          ) : (
            <div className="flex items-center gap-2">
              {team.isCustomJersey ? (
                <div className="w-8 h-8 bg-gray-200 rounded flex items-center justify-center flex-shrink-0">
                  <Image size={16} className="text-gray-500" />
                </div>
              ) : (
                <div className="w-8 h-8 bg-red-100 rounded flex items-center justify-center flex-shrink-0">
                  <AlertCircle size={16} className="text-red-500" />
                </div>
              )}
              <h3 className="font-semibold text-gray-900 truncate">
                {team.teamName}
              </h3>
            </div>
          )}
        </div>

        {/* Jersey Type Badge */}
        <div className="mb-3">{getJerseyTypeBadge()}</div>

        {/* Player Count */}
        <div className="flex items-center gap-2 text-sm text-gray-600 mb-3">
          <Users size={16} />
          <span>
            {readyCount}/{totalPlayers} players ready
          </span>
        </div>

        {/* Status */}
        {hasJerseyDesign && readyCount === totalPlayers && totalPlayers > 0 ? (
          <div className="text-sm text-green-700 bg-green-50 px-3 py-2 rounded mb-3 flex items-center gap-2">
            <CheckCircle size={16} />
            Team Ready
          </div>
        ) : (
          <div className="text-sm text-amber-700 bg-amber-50 px-3 py-2 rounded mb-3 flex items-center gap-2">
            <Clock size={16} />
            Incomplete
          </div>
        )}

        {/* Actions */}
        <Button onClick={handleViewTeam} className="w-full">
          View Details
        </Button>
      </CardContent>
    </Card>
  );
}


----- components\jerseys\TeamJerseyDetail.tsx -----

// src/components/jerseys/TeamJerseyDetail.tsx

/**
 * SOLID - Single Responsibility Principle (SRP)
 * Team jersey detail container ONLY - coordinates child components
 */

"use client";

import { useState } from "react";
import { useRouter } from "next/navigation";
import { ArrowLeft, Download } from "lucide-react";
import { useTeamJersey } from "@/hooks/useTeamJersey";
import { useJerseyMutations } from "@/hooks/useJerseyMutations";
import JerseyDesignSection from "./JerseyDesignSection";
import PlayerJerseyTable from "./PlayerJerseyTable";
import GenericJerseySection from "./GenericJerseySection";
import JerseyEditionPopup from "./JerseyEditionPopup";
import UploadJerseyPopup from "./UploadJerseyPopup";

interface TeamJerseyDetailProps {
  teamId: string;
}

export default function TeamJerseyDetail({ teamId }: TeamJerseyDetailProps) {
  const router = useRouter();
  const { team, isLoading, error, refetch } = useTeamJersey(teamId);
  const {
    isUpdating,
    updateJerseyEdition,
    updateJerseyCustom,
    removeJerseyDesign,
    updatePlayerJersey,
    addGenericJersey,
    updateGenericJersey,
    removeGenericJersey,
  } = useJerseyMutations();

  const [showEditionPopup, setShowEditionPopup] = useState(false);
  const [showUploadPopup, setShowUploadPopup] = useState(false);

  const handleBack = () => {
    router.push("/admin/jerseys");
  };

  const handleDownloadCSV = () => {
    if (!team) return;

    const headers = [
      "Type",
      "Player Name",
      "Jersey Number",
      "Jersey Size",
      "Jersey Name",
      "Payment Status",
    ];
    const rows: string[][] = [];

    // Add players
    team.players.forEach((player) => {
      rows.push([
        "Player",
        player.playerName,
        player.jerseyNumber?.toString() || "",
        player.jerseySize || "",
        player.jerseyName || "",
        player.paymentStatus?.hasPaid ? "Paid" : "Not Paid",
      ]);
    });

    // Add generic jerseys
    team.genericJerseys?.forEach((generic, idx) => {
      rows.push([
        "Generic",
        `Generic Jersey ${idx + 1}`,
        generic.jerseyNumber?.toString() || "",
        generic.jerseySize || "",
        generic.jerseyName || "",
        "N/A",
      ]);
    });

    const csvContent = [
      headers.join(","),
      ...rows.map((row) => row.map((cell) => `"${cell}"`).join(",")),
    ].join("\n");

    const blob = new Blob([csvContent], { type: "text/csv;charset=utf-8;" });
    const link = document.createElement("a");
    const url = URL.createObjectURL(blob);
    link.setAttribute("href", url);
    link.setAttribute(
      "download",
      `${team.teamName.replace(/\s+/g, "_")}_jerseys.csv`
    );
    link.style.visibility = "hidden";
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  };

  const handleSaveEdition = async (data: {
    jerseyEdition: string;
    primaryColor: string;
    secondaryColor: string;
    tertiaryColor: string;
  }) => {
    await updateJerseyEdition({ teamId, ...data });
    refetch();
  };

  const handleSaveCustom = async (imageData: {
    id: string;
    url: string;
    publicId: string;
  }) => {
    await updateJerseyCustom({ teamId, imageData });
    refetch();
  };

  const handleRemoveDesign = async () => {
    if (window.confirm("Remove current jersey design?")) {
      await removeJerseyDesign(teamId);
      refetch();
    }
  };

  const handleUpdatePlayer = async (
    playerId: string,
    data: {
      jerseyNumber?: number | null;
      jerseySize?: string | null;
      jerseyName?: string | null;
    }
  ) => {
    await updatePlayerJersey({ playerId, ...data });
    refetch();
  };

  const handleAddGeneric = async (data: {
    jerseyNumber?: number;
    jerseySize?: string;
    jerseyName?: string;
  }) => {
    await addGenericJersey({ teamId, ...data });
    refetch();
  };

  const handleUpdateGeneric = async (
    index: number,
    data: {
      jerseyNumber?: number;
      jerseySize?: string;
      jerseyName?: string;
    }
  ) => {
    await updateGenericJersey({ teamId, genericIndex: index, ...data });
    refetch();
  };

  const handleRemoveGeneric = async (index: number) => {
    await removeGenericJersey({ teamId, genericIndex: index });
    refetch();
  };

  if (error) {
    return (
      <div className="min-h-screen bg-gray-50 p-6">
        <div className="bg-red-50 border border-red-200 rounded-lg p-4">
          <p className="text-red-800">Error loading team details: {error}</p>
          <button
            onClick={() => router.push("/jerseys")}
            className="mt-4 px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700"
          >
            Back to Dashboard
          </button>
        </div>
      </div>
    );
  }

  if (isLoading || !team) {
    return (
      <div className="min-h-screen bg-gray-50">
        {/* Header Skeleton */}
        <div className="bg-white border-b border-gray-200">
          <div className="max-w-7xl mx-auto px-6 py-4">
            <div className="h-8 bg-gray-200 rounded w-1/3 animate-pulse"></div>
          </div>
        </div>

        {/* Content Skeleton */}
        <div className="max-w-7xl mx-auto px-6 py-6">
          <div className="bg-white rounded-lg shadow p-6 mb-6 h-64 animate-pulse"></div>
          <div className="bg-white rounded-lg shadow p-6 h-96 animate-pulse"></div>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <div className="bg-white border-b border-gray-200 sticky top-0 z-10">
        <div className="w-full px-4 sm:px-6 py-4">
          <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4">
            <div className="flex items-center gap-3">
              <button
                onClick={handleBack}
                className="p-2 hover:bg-gray-100 rounded-lg transition-colors flex-shrink-0"
              >
                <ArrowLeft size={20} className="text-gray-600" />
              </button>
              <div className="min-w-0">
                <div className="flex items-center gap-2 mb-1 flex-wrap">
                  {team.jerseyEdition && (
                    <>
                      <div
                        className="w-6 h-6 sm:w-8 sm:h-8 rounded-full border-2 border-white shadow flex-shrink-0"
                        style={{ backgroundColor: team.primaryColor || "#999" }}
                      />
                      <div
                        className="w-6 h-6 sm:w-8 sm:h-8 rounded-full border-2 border-white shadow -ml-3 sm:-ml-4 flex-shrink-0"
                        style={{
                          backgroundColor: team.secondaryColor || "#666",
                        }}
                      />
                    </>
                  )}
                  <h1 className="text-lg sm:text-2xl font-bold text-gray-900 truncate">
                    {team.teamName}
                  </h1>
                </div>
                <p className="text-xs sm:text-sm text-gray-600 truncate">
                  {team.division.divisionName} • {team.division.day} •{" "}
                  {team.division.level.name}
                </p>
              </div>
            </div>
            <div className="flex items-center gap-3">
              <button
                onClick={handleDownloadCSV}
                className="px-3 py-2 sm:px-4 border border-gray-300 rounded-lg text-xs sm:text-sm font-medium text-gray-700 hover:bg-gray-50 flex items-center gap-2 whitespace-nowrap"
              >
                <Download size={16} />
                <span className="hidden sm:inline">Download CSV</span>
                <span className="sm:hidden">CSV</span>
              </button>
            </div>
          </div>
        </div>
      </div>

      {/* Content */}
      <div className="w-full px-4 sm:px-6 py-4 sm:py-6">
        {/* Jersey Design Section */}
        <JerseyDesignSection
          team={team}
          onChooseEdition={() => setShowEditionPopup(true)}
          onUploadCustom={() => setShowUploadPopup(true)}
          onRemoveDesign={handleRemoveDesign}
        />

        {/* Team Players Section with Summary View Toggle */}
        <PlayerJerseyTable
          players={team.players}
          genericJerseys={team.genericJerseys || []}
          onUpdatePlayer={handleUpdatePlayer}
        />

        {/* Generic Jerseys Section */}
        <GenericJerseySection
          genericJerseys={team.genericJerseys || []}
          teamId={teamId}
          onAddGeneric={handleAddGeneric}
          onUpdateGeneric={handleUpdateGeneric}
          onRemoveGeneric={handleRemoveGeneric}
        />
      </div>

      {/* Popups */}
      <JerseyEditionPopup
        isOpen={showEditionPopup}
        onClose={() => setShowEditionPopup(false)}
        onSave={handleSaveEdition}
      />

      <UploadJerseyPopup
        isOpen={showUploadPopup}
        onClose={() => setShowUploadPopup(false)}
        onSave={handleSaveCustom}
      />

      {/* Loading Overlay */}
      {isUpdating && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-lg p-6">
            <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto"></div>
            <p className="mt-4 text-gray-900 font-medium">Updating...</p>
          </div>
        </div>
      )}
    </div>
  );
}


----- components\jerseys\UploadJerseyPopup.tsx -----

// src/components/jerseys/UploadJerseyPopup.tsx

/**
 * SOLID - Single Responsibility Principle (SRP)
 * Upload custom jersey popup ONLY
 */

"use client";

import { X, UploadCloud } from "lucide-react";

interface UploadJerseyPopupProps {
  isOpen: boolean;
  onClose: () => void;
  onSave: (imageData: {
    id: string;
    url: string;
    publicId: string;
  }) => Promise<void>;
}

export default function UploadJerseyPopup({
  isOpen,
  onClose,
  onSave,
}: UploadJerseyPopupProps) {
  if (!isOpen) return null;

  const handleSave = async () => {
    // TODO: Implement file upload functionality
    // For now, just show alert
    alert(
      "File upload functionality to be implemented. This will integrate with Cloudinary or your file storage service."
    );
    onClose();
  };

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
      <div className="bg-white rounded-lg w-full max-w-2xl">
        {/* Header */}
        <div className="flex items-center justify-between p-6 border-b border-gray-200">
          <div>
            <h2 className="text-2xl font-bold text-gray-900">
              Upload Custom Jersey
            </h2>
            <p className="text-sm text-gray-600 mt-1">
              Upload your team's custom jersey design
            </p>
          </div>
          <button
            onClick={onClose}
            className="p-2 hover:bg-gray-100 rounded-lg transition-colors"
          >
            <X size={24} className="text-gray-500" />
          </button>
        </div>

        {/* Content */}
        <div className="p-6">
          {/* Drag and Drop Area */}
          <div className="border-2 border-dashed border-gray-300 rounded-lg p-12 text-center hover:border-blue-400 hover:bg-blue-50 transition-all cursor-pointer">
            <UploadCloud size={64} className="text-gray-400 mx-auto mb-4" />
            <p className="text-lg font-medium text-gray-900 mb-2">
              Drag and drop your jersey image here
            </p>
            <p className="text-sm text-gray-600 mb-4">
              or click to browse files
            </p>
            <button className="px-6 py-2 bg-blue-600 text-white rounded-lg font-medium hover:bg-blue-700 transition-colors">
              Select File
            </button>
          </div>

          {/* File Requirements */}
          <div className="mt-6 bg-gray-50 rounded-lg p-4">
            <h3 className="text-sm font-semibold text-gray-900 mb-2">
              File Requirements:
            </h3>
            <ul className="text-sm text-gray-600 space-y-1">
              <li>• Supported formats: PNG, JPG, JPEG</li>
              <li>• Maximum file size: 5MB</li>
              <li>• Recommended dimensions: 1000x1000px or higher</li>
              <li>• Transparent background recommended for PNG files</li>
            </ul>
          </div>
        </div>

        {/* Footer */}
        <div className="border-t border-gray-200 p-6 bg-gray-50">
          <div className="flex items-center justify-between">
            <button
              onClick={onClose}
              className="px-6 py-2 border border-gray-300 text-gray-700 rounded-lg font-medium hover:bg-gray-100 transition-colors"
            >
              Cancel
            </button>
            <button
              onClick={handleSave}
              disabled
              className="px-6 py-2 bg-blue-600 text-white rounded-lg font-medium hover:bg-blue-700 disabled:bg-gray-300 disabled:cursor-not-allowed transition-colors"
            >
              Upload & Save
            </button>
          </div>
        </div>
      </div>
    </div>
  );
}


----- components\layout\AdminLayout.tsx -----

// src/components/layout/AdminLayout.tsx

/**
 * SOLID - Single Responsibility Principle (SRP)
 * Admin layout orchestration ONLY
 */

/**
 * Separation of Concerns
 * - Layout structure here
 * - Auth handling in parent
 * - Sidebar state managed locally
 */

"use client";

import { useState } from "react";
import { Sidebar } from "./Sidebar";
import { Header } from "./Header";

interface AdminLayoutProps {
  children: React.ReactNode;
  cityId: string;
}

export function AdminLayout({ children, cityId }: AdminLayoutProps) {
  const [isSidebarOpen, setIsSidebarOpen] = useState(false);

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Sidebar */}
      <Sidebar isOpen={isSidebarOpen} onClose={() => setIsSidebarOpen(false)} />

      {/* Main content */}
      <div className="lg:pl-64">
        {/* Header */}
        <Header onMenuClick={() => setIsSidebarOpen(true)} cityId={cityId} />

        {/* Page content */}
        <main className="min-h-[calc(100vh-4rem)]">{children}</main>
      </div>
    </div>
  );
}


----- components\layout\CitySelector.tsx -----

// src/components/layout/CitySelector.tsx

/**
 * SOLID - Single Responsibility Principle (SRP)
 * City selection dropdown ONLY
 */

"use client";

import { useState, useEffect } from "react";
import { useRouter, usePathname } from "next/navigation";
import { MapPin, ChevronDown } from "lucide-react";
import { getActiveCities } from "@/lib/db/queries/cities";

interface CitySelectorProps {
  currentCityId: string;
}

export function CitySelector({ currentCityId }: CitySelectorProps) {
  const router = useRouter();
  const pathname = usePathname();
  const [cities, setCities] = useState<any[]>([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    fetch("/api/v1/cities")
      .then((res) => res.json())
      .then((data) => {
        if (data.success) setCities(data.data);
        setLoading(false);
      });
  }, []);

  const handleCityChange = (newCityId: string) => {
    const pathSegments = pathname.split("/");
    const routeAfterCity = pathSegments.slice(3).join("/") || "dashboard";
    router.push(`/admin/${newCityId}/${routeAfterCity}`);
  };

  return (
    <div className="relative">
      <select
        value={currentCityId}
        onChange={(e) => handleCityChange(e.target.value)}
        disabled={loading}
        className="appearance-none bg-white border border-gray-300 rounded-lg
          pl-10 pr-10 py-2 text-sm font-medium hover:border-gray-400
          focus:outline-none focus:ring-2 focus:ring-blue-500"
      >
        {loading ? (
          <option>Loading...</option>
        ) : (
          cities.map((city) => (
            <option key={city._id} value={city._id}>
              {city.cityName}, {city.region}
            </option>
          ))
        )}
      </select>
      <MapPin className="absolute left-3 top-1/2 -translate-y-1/2 w-5 h-5 text-gray-400 pointer-events-none" />
      <ChevronDown className="absolute right-3 top-1/2 -translate-y-1/2 w-5 h-5 text-gray-400 pointer-events-none" />
    </div>
  );
}


----- components\layout\Header.tsx -----

// src/components/layout/Header.tsx

/**
 * SOLID - Single Responsibility Principle (SRP)
 * Header layout orchestration ONLY
 */

"use client";

import { Menu } from "lucide-react";
import { Button } from "@/components/ui/button";
import { CitySelector } from "./CitySelector";
import { UserMenu } from "./UserMenu";

interface HeaderProps {
  onMenuClick: () => void;
  cityId: string;
}

export function Header({ onMenuClick, cityId }: HeaderProps) {
  return (
    <header className="sticky top-0 z-30 bg-white border-b border-gray-200 shadow-sm">
      <div className="flex items-center justify-between h-16 px-4 sm:px-6 lg:px-8">
        {/* Mobile menu button */}
        <Button
          variant="ghost"
          size="icon"
          onClick={onMenuClick}
          className="lg:hidden"
        >
          <Menu className="w-6 h-6" />
        </Button>

        {/* City selector */}
        <div className="flex-1 flex justify-center lg:justify-start lg:ml-4">
          <CitySelector currentCityId={cityId} />
        </div>

        {/* User menu */}
        <UserMenu />
      </div>
    </header>
  );
}


----- components\layout\NavItem.tsx -----

// src/components/layout/NavItem.tsx

/**
 * SOLID - Single Responsibility Principle (SRP)
 * Renders a single navigation item ONLY
 */

// src/components/layout/NavItem.tsx

"use client";

import Link from "next/link";
import { cn } from "@/lib/utils";
import * as LucideIcons from "lucide-react";

interface NavItemProps {
  label: string;
  href: string;
  icon: string; // Lucide icon name
  isActive: boolean;
  onClick?: () => void;
}

export function NavItem({
  label,
  href,
  icon,
  isActive,
  onClick,
}: NavItemProps) {
  const Icon = (LucideIcons as any)[icon];

  return (
    <Link
      href={href}
      onClick={onClick}
      className={cn(
        "flex items-center gap-3 px-3 py-2 rounded-lg transition-colors",
        isActive
          ? "bg-gray-800 text-white"
          : "text-gray-400 hover:bg-gray-800 hover:text-white"
      )}
    >
      {Icon && <Icon className="h-5 w-5" />}
      <span className="text-sm font-medium">{label}</span>
    </Link>
  );
}


----- components\layout\NavItemWithChildren.tsx -----

// src/components/layout/NavItemWithChildren.tsx

/**
 * SOLID - Single Responsibility Principle (SRP)
 * Renders navigation item with expandable children ONLY
 */
// src/components/layout/NavItemWithChildren.tsx

"use client";

import { useState } from "react";
import Link from "next/link";
import { ChevronDown } from "lucide-react";
import { cn } from "@/lib/utils";
import * as LucideIcons from "lucide-react";
import { NavItem as NavItemType } from "@/constants/navigation";

interface NavItemWithChildrenProps {
  item: NavItemType;
  pathname: string;
  cityId: string;
  onNavigate: () => void;
}

export function NavItemWithChildren({
  item,
  pathname,
  cityId,
  onNavigate,
}: NavItemWithChildrenProps) {
  const [isOpen, setIsOpen] = useState(false);
  const Icon = (LucideIcons as any)[item.icon];

  const isActiveParent = item.children?.some(
    (child) => pathname === `/admin/${child.href}`
  );

  return (
    <li>
      <button
        onClick={() => setIsOpen(!isOpen)}
        className={cn(
          "flex items-center justify-between w-full px-3 py-2 rounded-lg transition-colors",
          isActiveParent
            ? "bg-gray-800 text-white"
            : "text-gray-400 hover:bg-gray-800 hover:text-white"
        )}
      >
        <div className="flex items-center gap-3">
          {Icon && <Icon className="h-5 w-5" />}
          <span className="text-sm font-medium">{item.label}</span>
        </div>
        <ChevronDown
          className={cn(
            "h-4 w-4 transition-transform",
            isOpen && "transform rotate-180"
          )}
        />
      </button>

      {isOpen && item.children && (
        <ul className="mt-1 ml-4 space-y-1 border-l border-gray-700 pl-4">
          {item.children.map((child) => {
            const ChildIcon = (LucideIcons as any)[child.icon];
            const isActive = pathname === `/admin/${child.href}`;

            return (
              <li key={child.href}>
                <Link
                  href={`/admin/${child.href}`}
                  onClick={onNavigate}
                  className={cn(
                    "flex items-center gap-3 px-3 py-2 rounded-lg transition-colors text-sm",
                    isActive
                      ? "bg-gray-800 text-white"
                      : "text-gray-400 hover:bg-gray-800 hover:text-white"
                  )}
                >
                  {ChildIcon && <ChildIcon className="h-4 w-4" />}
                  <span>{child.label}</span>
                </Link>
              </li>
            );
          })}
        </ul>
      )}
    </li>
  );
}


----- components\layout\Sidebar.tsx -----

// src/components/layout/Sidebar.tsx

/**
 * SOLID - Single Responsibility Principle (SRP)
 * Sidebar layout and orchestration ONLY
 */

"use client";

import { useMemo } from "react";
import { usePathname, useParams } from "next/navigation";
import { X } from "lucide-react";
import { usePermissions } from "@/hooks/usePermissions";
import {
  navigationItems,
  filterNavigationByPermissions,
} from "@/constants/navigation";
import { Button } from "@/components/ui/button";
import { NavItem } from "./NavItem";
import { NavItemWithChildren } from "./NavItemWithChildren";

interface SidebarProps {
  isOpen: boolean;
  onClose: () => void;
}

export function Sidebar({ isOpen, onClose }: SidebarProps) {
  const pathname = usePathname();
  const params = useParams();
  const cityId = params.cityId as string;
  const { permissions } = usePermissions();

  const filteredNavigation = useMemo(
    () => filterNavigationByPermissions(navigationItems, permissions),
    [permissions]
  );

  return (
    <>
      {/* Mobile overlay */}
      {isOpen && (
        <div
          className="fixed inset-0 bg-black/50 z-40 lg:hidden"
          onClick={onClose}
        />
      )}

      {/* Sidebar */}
      <aside
        className={`fixed top-0 left-0 z-50 h-screen w-64 bg-gray-900 text-white
          transform transition-transform duration-300 ease-in-out
          lg:translate-x-0 
          ${isOpen ? "translate-x-0" : "-translate-x-full"}`}
      >
        {/* Header */}
        <div className="flex items-center justify-between h-16 px-6 border-b border-gray-800">
          <h1 className="text-xl font-bold">Admin Portal</h1>
          <Button
            variant="ghost"
            size="icon"
            onClick={onClose}
            className="lg:hidden"
          >
            <X className="h-5 w-5" />
          </Button>
        </div>

        {/* Navigation */}
        <nav className="overflow-y-auto py-4 px-3 h-[calc(100vh-4rem)]">
          <ul className="space-y-1">
            {filteredNavigation.map((item) =>
              item.children ? (
                <NavItemWithChildren
                  key={item.href}
                  item={item}
                  pathname={pathname}
                  cityId={cityId}
                  onNavigate={onClose}
                />
              ) : (
                <li key={item.href}>
                  <NavItem
                    label={item.label}
                    href={`/admin/${item.href}`}
                    icon={item.icon}
                    isActive={pathname === `/admin/${item.href}`}
                    onClick={onClose}
                  />
                </li>
              )
            )}
          </ul>
        </nav>
      </aside>
    </>
  );
}


----- components\layout\UserMenu.tsx -----

// src/components/layout/UserMenu.tsx

/**
 * SOLID - Single Responsibility Principle (SRP)
 * User profile dropdown ONLY
 */

"use client";

import { useState } from "react";
import { useRouter } from "next/navigation";
import { signOut } from "next-auth/react";
import { ChevronDown, User, LogOut } from "lucide-react";
import { useAuth } from "@/hooks/useAuth";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import { Button } from "@/components/ui/button";

export function UserMenu() {
  const router = useRouter();
  const { user } = useAuth();

  if (!user) return null;

  const handleSignOut = async () => {
    await signOut({ callbackUrl: "/login" });
  };

  return (
    <DropdownMenu>
      <DropdownMenuTrigger asChild>
        <Button variant="ghost" className="flex items-center gap-2">
          <div className="w-8 h-8 rounded-full bg-blue-600 flex items-center justify-center text-white font-medium">
            {user.name.charAt(0).toUpperCase()}
          </div>
          <div className="hidden sm:block text-left">
            <p className="text-sm font-medium">{user.name}</p>
            <p className="text-xs text-gray-500">{user.role}</p>
          </div>
          <ChevronDown className="w-4 h-4 text-gray-400" />
        </Button>
      </DropdownMenuTrigger>

      <DropdownMenuContent align="end" className="w-56">
        <DropdownMenuLabel>
          <div>
            <p className="font-medium">{user.name}</p>
            <p className="text-xs text-gray-500 font-normal">{user.email}</p>
          </div>
        </DropdownMenuLabel>

        <DropdownMenuSeparator />

        <DropdownMenuItem
          onClick={() => router.push("/admin/settings/profile")}
        >
          <User className="w-4 h-4 mr-2" />
          Profile Settings
        </DropdownMenuItem>

        <DropdownMenuSeparator />

        <DropdownMenuItem onClick={handleSignOut} className="text-red-600">
          <LogOut className="w-4 h-4 mr-2" />
          Sign Out
        </DropdownMenuItem>
      </DropdownMenuContent>
    </DropdownMenu>
  );
}


----- components\providers\SessionProvider.tsx -----

// src/components/providers/SessionProvider.tsx

/**
 * SOLID - Single Responsibility Principle (SRP)
 * Wraps NextAuth SessionProvider ONLY
 */

/**
 * Design Pattern - Provider Pattern
 * Makes auth session available to all client components
 */

"use client";

import { SessionProvider as NextAuthSessionProvider } from "next-auth/react";

interface SessionProviderProps {
  children: React.ReactNode;
}

export function SessionProvider({ children }: SessionProviderProps) {
  return <NextAuthSessionProvider>{children}</NextAuthSessionProvider>;
}


----- components\ui\alert-dialog.tsx -----

"use client"

import * as React from "react"
import * as AlertDialogPrimitive from "@radix-ui/react-alert-dialog"

import { cn } from "@/lib/utils"
import { buttonVariants } from "@/components/ui/button"

const AlertDialog = AlertDialogPrimitive.Root

const AlertDialogTrigger = AlertDialogPrimitive.Trigger

const AlertDialogPortal = AlertDialogPrimitive.Portal

const AlertDialogOverlay = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
))
AlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName

const AlertDialogContent = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>
>(({ className, ...props }, ref) => (
  <AlertDialogPortal>
    <AlertDialogOverlay />
    <AlertDialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    />
  </AlertDialogPortal>
))
AlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName

const AlertDialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
AlertDialogHeader.displayName = "AlertDialogHeader"

const AlertDialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
AlertDialogFooter.displayName = "AlertDialogFooter"

const AlertDialogTitle = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold", className)}
    {...props}
  />
))
AlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName

const AlertDialogDescription = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
AlertDialogDescription.displayName =
  AlertDialogPrimitive.Description.displayName

const AlertDialogAction = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Action>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Action
    ref={ref}
    className={cn(buttonVariants(), className)}
    {...props}
  />
))
AlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName

const AlertDialogCancel = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Cancel
    ref={ref}
    className={cn(
      buttonVariants({ variant: "outline" }),
      "mt-2 sm:mt-0",
      className
    )}
    {...props}
  />
))
AlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName

export {
  AlertDialog,
  AlertDialogPortal,
  AlertDialogOverlay,
  AlertDialogTrigger,
  AlertDialogContent,
  AlertDialogHeader,
  AlertDialogFooter,
  AlertDialogTitle,
  AlertDialogDescription,
  AlertDialogAction,
  AlertDialogCancel,
}


----- components\ui\alert.tsx -----

import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const alertVariants = cva(
  "relative w-full rounded-lg border px-4 py-3 text-sm [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground [&>svg~*]:pl-7",
  {
    variants: {
      variant: {
        default: "bg-background text-foreground",
        destructive:
          "border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Alert = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>
>(({ className, variant, ...props }, ref) => (
  <div
    ref={ref}
    role="alert"
    className={cn(alertVariants({ variant }), className)}
    {...props}
  />
))
Alert.displayName = "Alert"

const AlertTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h5
    ref={ref}
    className={cn("mb-1 font-medium leading-none tracking-tight", className)}
    {...props}
  />
))
AlertTitle.displayName = "AlertTitle"

const AlertDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm [&_p]:leading-relaxed", className)}
    {...props}
  />
))
AlertDescription.displayName = "AlertDescription"

export { Alert, AlertTitle, AlertDescription }


----- components\ui\badge.tsx -----

import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const badgeVariants = cva(
  "inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2",
  {
    variants: {
      variant: {
        default:
          "border-transparent bg-primary text-primary-foreground shadow hover:bg-primary/80",
        secondary:
          "border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80",
        destructive:
          "border-transparent bg-destructive text-destructive-foreground shadow hover:bg-destructive/80",
        outline: "text-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

export interface BadgeProps
  extends React.HTMLAttributes<HTMLDivElement>,
    VariantProps<typeof badgeVariants> {}

function Badge({ className, variant, ...props }: BadgeProps) {
  return (
    <div className={cn(badgeVariants({ variant }), className)} {...props} />
  )
}

export { Badge, badgeVariants }


----- components\ui\button.tsx -----

import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
  {
    variants: {
      variant: {
        default:
          "bg-primary text-primary-foreground shadow hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground shadow-sm hover:bg-destructive/90",
        outline:
          "border border-input bg-background shadow-sm hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground shadow-sm hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-9 px-4 py-2",
        sm: "h-8 rounded-md px-3 text-xs",
        lg: "h-10 rounded-md px-8",
        icon: "h-9 w-9",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button"
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    )
  }
)
Button.displayName = "Button"

export { Button, buttonVariants }


----- components\ui\card.tsx -----

import * as React from "react"

import { cn } from "@/lib/utils"

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "rounded-xl border bg-card text-card-foreground shadow",
      className
    )}
    {...props}
  />
))
Card.displayName = "Card"

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
))
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("font-semibold leading-none tracking-tight", className)}
    {...props}
  />
))
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
))
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
))
CardFooter.displayName = "CardFooter"

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }


----- components\ui\checkbox.tsx -----

"use client"

import * as React from "react"
import * as CheckboxPrimitive from "@radix-ui/react-checkbox"
import { Check } from "lucide-react"

import { cn } from "@/lib/utils"

const Checkbox = React.forwardRef<
  React.ElementRef<typeof CheckboxPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>
>(({ className, ...props }, ref) => (
  <CheckboxPrimitive.Root
    ref={ref}
    className={cn(
      "peer h-4 w-4 shrink-0 rounded-sm border border-primary shadow focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground",
      className
    )}
    {...props}
  >
    <CheckboxPrimitive.Indicator
      className={cn("flex items-center justify-center text-current")}
    >
      <Check className="h-4 w-4" />
    </CheckboxPrimitive.Indicator>
  </CheckboxPrimitive.Root>
))
Checkbox.displayName = CheckboxPrimitive.Root.displayName

export { Checkbox }


----- components\ui\command.tsx -----

"use client"

import * as React from "react"
import { type DialogProps } from "@radix-ui/react-dialog"
import { Command as CommandPrimitive } from "cmdk"
import { Search } from "lucide-react"

import { cn } from "@/lib/utils"
import { Dialog, DialogContent } from "@/components/ui/dialog"

const Command = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive>
>(({ className, ...props }, ref) => (
  <CommandPrimitive
    ref={ref}
    className={cn(
      "flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground",
      className
    )}
    {...props}
  />
))
Command.displayName = CommandPrimitive.displayName

const CommandDialog = ({ children, ...props }: DialogProps) => {
  return (
    <Dialog {...props}>
      <DialogContent className="overflow-hidden p-0">
        <Command className="[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5">
          {children}
        </Command>
      </DialogContent>
    </Dialog>
  )
}

const CommandInput = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Input>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>
>(({ className, ...props }, ref) => (
  <div className="flex items-center border-b px-3" cmdk-input-wrapper="">
    <Search className="mr-2 h-4 w-4 shrink-0 opacity-50" />
    <CommandPrimitive.Input
      ref={ref}
      className={cn(
        "flex h-10 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    />
  </div>
))

CommandInput.displayName = CommandPrimitive.Input.displayName

const CommandList = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.List
    ref={ref}
    className={cn("max-h-[300px] overflow-y-auto overflow-x-hidden", className)}
    {...props}
  />
))

CommandList.displayName = CommandPrimitive.List.displayName

const CommandEmpty = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Empty>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>
>((props, ref) => (
  <CommandPrimitive.Empty
    ref={ref}
    className="py-6 text-center text-sm"
    {...props}
  />
))

CommandEmpty.displayName = CommandPrimitive.Empty.displayName

const CommandGroup = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Group>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Group
    ref={ref}
    className={cn(
      "overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground",
      className
    )}
    {...props}
  />
))

CommandGroup.displayName = CommandPrimitive.Group.displayName

const CommandSeparator = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 h-px bg-border", className)}
    {...props}
  />
))
CommandSeparator.displayName = CommandPrimitive.Separator.displayName

const CommandItem = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected=true]:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
      className
    )}
    {...props}
  />
))

CommandItem.displayName = CommandPrimitive.Item.displayName

const CommandShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      )}
      {...props}
    />
  )
}
CommandShortcut.displayName = "CommandShortcut"

export {
  Command,
  CommandDialog,
  CommandInput,
  CommandList,
  CommandEmpty,
  CommandGroup,
  CommandItem,
  CommandShortcut,
  CommandSeparator,
}


----- components\ui\dialog.tsx -----

"use client"

import * as React from "react"
import * as DialogPrimitive from "@radix-ui/react-dialog"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const Dialog = DialogPrimitive.Root

const DialogTrigger = DialogPrimitive.Trigger

const DialogPortal = DialogPrimitive.Portal

const DialogClose = DialogPrimitive.Close

const DialogOverlay = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Overlay
    ref={ref}
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
  />
))
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName

const DialogContent = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DialogPortal>
    <DialogOverlay />
    <DialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    >
      {children}
      <DialogPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </DialogPrimitive.Close>
    </DialogPrimitive.Content>
  </DialogPortal>
))
DialogContent.displayName = DialogPrimitive.Content.displayName

const DialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-1.5 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
DialogHeader.displayName = "DialogHeader"

const DialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
DialogFooter.displayName = "DialogFooter"

const DialogTitle = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
DialogTitle.displayName = DialogPrimitive.Title.displayName

const DialogDescription = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
DialogDescription.displayName = DialogPrimitive.Description.displayName

export {
  Dialog,
  DialogPortal,
  DialogOverlay,
  DialogTrigger,
  DialogClose,
  DialogContent,
  DialogHeader,
  DialogFooter,
  DialogTitle,
  DialogDescription,
}


----- components\ui\dropdown-menu.tsx -----

"use client"

import * as React from "react"
import * as DropdownMenuPrimitive from "@radix-ui/react-dropdown-menu"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const DropdownMenu = DropdownMenuPrimitive.Root

const DropdownMenuTrigger = DropdownMenuPrimitive.Trigger

const DropdownMenuGroup = DropdownMenuPrimitive.Group

const DropdownMenuPortal = DropdownMenuPrimitive.Portal

const DropdownMenuSub = DropdownMenuPrimitive.Sub

const DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup

const DropdownMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <DropdownMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto" />
  </DropdownMenuPrimitive.SubTrigger>
))
DropdownMenuSubTrigger.displayName =
  DropdownMenuPrimitive.SubTrigger.displayName

const DropdownMenuSubContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]",
      className
    )}
    {...props}
  />
))
DropdownMenuSubContent.displayName =
  DropdownMenuPrimitive.SubContent.displayName

const DropdownMenuContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <DropdownMenuPrimitive.Portal>
    <DropdownMenuPrimitive.Content
      ref={ref}
      sideOffset={sideOffset}
      className={cn(
        "z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md",
        "data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]",
        className
      )}
      {...props}
    />
  </DropdownMenuPrimitive.Portal>
))
DropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName

const DropdownMenuItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&>svg]:size-4 [&>svg]:shrink-0",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName

const DropdownMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <DropdownMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.CheckboxItem>
))
DropdownMenuCheckboxItem.displayName =
  DropdownMenuPrimitive.CheckboxItem.displayName

const DropdownMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <DropdownMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.RadioItem>
))
DropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName

const DropdownMenuLabel = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName

const DropdownMenuSeparator = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
DropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName

const DropdownMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn("ml-auto text-xs tracking-widest opacity-60", className)}
      {...props}
    />
  )
}
DropdownMenuShortcut.displayName = "DropdownMenuShortcut"

export {
  DropdownMenu,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuCheckboxItem,
  DropdownMenuRadioItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuGroup,
  DropdownMenuPortal,
  DropdownMenuSub,
  DropdownMenuSubContent,
  DropdownMenuSubTrigger,
  DropdownMenuRadioGroup,
}


----- components\ui\form.tsx -----

"use client"

import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { Slot } from "@radix-ui/react-slot"
import {
  Controller,
  FormProvider,
  useFormContext,
  type ControllerProps,
  type FieldPath,
  type FieldValues,
} from "react-hook-form"

import { cn } from "@/lib/utils"
import { Label } from "@/components/ui/label"

const Form = FormProvider

type FormFieldContextValue<
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
> = {
  name: TName
}

const FormFieldContext = React.createContext<FormFieldContextValue>(
  {} as FormFieldContextValue
)

const FormField = <
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
>({
  ...props
}: ControllerProps<TFieldValues, TName>) => {
  return (
    <FormFieldContext.Provider value={{ name: props.name }}>
      <Controller {...props} />
    </FormFieldContext.Provider>
  )
}

const useFormField = () => {
  const fieldContext = React.useContext(FormFieldContext)
  const itemContext = React.useContext(FormItemContext)
  const { getFieldState, formState } = useFormContext()

  const fieldState = getFieldState(fieldContext.name, formState)

  if (!fieldContext) {
    throw new Error("useFormField should be used within <FormField>")
  }

  const { id } = itemContext

  return {
    id,
    name: fieldContext.name,
    formItemId: `${id}-form-item`,
    formDescriptionId: `${id}-form-item-description`,
    formMessageId: `${id}-form-item-message`,
    ...fieldState,
  }
}

type FormItemContextValue = {
  id: string
}

const FormItemContext = React.createContext<FormItemContextValue>(
  {} as FormItemContextValue
)

const FormItem = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const id = React.useId()

  return (
    <FormItemContext.Provider value={{ id }}>
      <div ref={ref} className={cn("space-y-2", className)} {...props} />
    </FormItemContext.Provider>
  )
})
FormItem.displayName = "FormItem"

const FormLabel = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>
>(({ className, ...props }, ref) => {
  const { error, formItemId } = useFormField()

  return (
    <Label
      ref={ref}
      className={cn(error && "text-destructive", className)}
      htmlFor={formItemId}
      {...props}
    />
  )
})
FormLabel.displayName = "FormLabel"

const FormControl = React.forwardRef<
  React.ElementRef<typeof Slot>,
  React.ComponentPropsWithoutRef<typeof Slot>
>(({ ...props }, ref) => {
  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()

  return (
    <Slot
      ref={ref}
      id={formItemId}
      aria-describedby={
        !error
          ? `${formDescriptionId}`
          : `${formDescriptionId} ${formMessageId}`
      }
      aria-invalid={!!error}
      {...props}
    />
  )
})
FormControl.displayName = "FormControl"

const FormDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => {
  const { formDescriptionId } = useFormField()

  return (
    <p
      ref={ref}
      id={formDescriptionId}
      className={cn("text-[0.8rem] text-muted-foreground", className)}
      {...props}
    />
  )
})
FormDescription.displayName = "FormDescription"

const FormMessage = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, children, ...props }, ref) => {
  const { error, formMessageId } = useFormField()
  const body = error ? String(error?.message ?? "") : children

  if (!body) {
    return null
  }

  return (
    <p
      ref={ref}
      id={formMessageId}
      className={cn("text-[0.8rem] font-medium text-destructive", className)}
      {...props}
    >
      {body}
    </p>
  )
})
FormMessage.displayName = "FormMessage"

export {
  useFormField,
  Form,
  FormItem,
  FormLabel,
  FormControl,
  FormDescription,
  FormMessage,
  FormField,
}


----- components\ui\input.tsx -----

import * as React from "react"

import { cn } from "@/lib/utils"

const Input = React.forwardRef<HTMLInputElement, React.ComponentProps<"input">>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          "flex h-9 w-full rounded-md border border-input bg-transparent px-3 py-1 text-base shadow-sm transition-colors file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Input.displayName = "Input"

export { Input }


----- components\ui\label.tsx -----

"use client"

import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const labelVariants = cva(
  "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
)

const Label = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &
    VariantProps<typeof labelVariants>
>(({ className, ...props }, ref) => (
  <LabelPrimitive.Root
    ref={ref}
    className={cn(labelVariants(), className)}
    {...props}
  />
))
Label.displayName = LabelPrimitive.Root.displayName

export { Label }


----- components\ui\pagination.tsx -----

import * as React from "react";
import { ChevronLeft, ChevronRight, MoreHorizontal } from "lucide-react";

import { cn } from "@/lib/utils";
import { ButtonProps, buttonVariants } from "@/components/ui/button";

const Pagination = ({ className, ...props }: React.ComponentProps<"nav">) => (
  <nav
    role="navigation"
    aria-label="pagination"
    className={cn("mx-auto flex w-full justify-center", className)}
    {...props}
  />
);
Pagination.displayName = "Pagination";

const PaginationContent = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    className={cn("flex flex-row items-center gap-1", className)}
    {...props}
  />
));
PaginationContent.displayName = "PaginationContent";

const PaginationItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ className, ...props }, ref) => (
  <li ref={ref} className={cn("", className)} {...props} />
));
PaginationItem.displayName = "PaginationItem";

type PaginationLinkProps = {
  isActive?: boolean;
} & Pick<ButtonProps, "size"> &
  React.ComponentProps<"a">;

const PaginationLink = ({
  className,
  isActive,
  size = "icon",
  ...props
}: PaginationLinkProps) => (
  <a
    aria-current={isActive ? "page" : undefined}
    className={cn(
      buttonVariants({
        variant: isActive ? "outline" : "ghost",
        size,
      }),
      "cursor-pointer",
      className
    )}
    {...props}
  />
);
PaginationLink.displayName = "PaginationLink";

const PaginationPrevious = ({
  className,
  ...props
}: React.ComponentProps<typeof PaginationLink>) => (
  <PaginationLink
    aria-label="Go to previous page"
    size="default"
    className={cn("gap-1 pl-2.5", className)}
    {...props}
  >
    <ChevronLeft className="h-4 w-4" />
    <span>Previous</span>
  </PaginationLink>
);
PaginationPrevious.displayName = "PaginationPrevious";

const PaginationNext = ({
  className,
  ...props
}: React.ComponentProps<typeof PaginationLink>) => (
  <PaginationLink
    aria-label="Go to next page"
    size="default"
    className={cn("gap-1 pr-2.5", className)}
    {...props}
  >
    <span>Next</span>
    <ChevronRight className="h-4 w-4" />
  </PaginationLink>
);
PaginationNext.displayName = "PaginationNext";

const PaginationEllipsis = ({
  className,
  ...props
}: React.ComponentProps<"span">) => (
  <span
    aria-hidden
    className={cn("flex h-9 w-9 items-center justify-center", className)}
    {...props}
  >
    <MoreHorizontal className="h-4 w-4" />
    <span className="sr-only">More pages</span>
  </span>
);
PaginationEllipsis.displayName = "PaginationEllipsis";

export {
  Pagination,
  PaginationContent,
  PaginationLink,
  PaginationItem,
  PaginationPrevious,
  PaginationNext,
  PaginationEllipsis,
};


----- components\ui\popover.tsx -----

"use client"

import * as React from "react"
import * as PopoverPrimitive from "@radix-ui/react-popover"

import { cn } from "@/lib/utils"

const Popover = PopoverPrimitive.Root

const PopoverTrigger = PopoverPrimitive.Trigger

const PopoverAnchor = PopoverPrimitive.Anchor

const PopoverContent = React.forwardRef<
  React.ElementRef<typeof PopoverPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>
>(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
  <PopoverPrimitive.Portal>
    <PopoverPrimitive.Content
      ref={ref}
      align={align}
      sideOffset={sideOffset}
      className={cn(
        "z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]",
        className
      )}
      {...props}
    />
  </PopoverPrimitive.Portal>
))
PopoverContent.displayName = PopoverPrimitive.Content.displayName

export { Popover, PopoverTrigger, PopoverContent, PopoverAnchor }


----- components\ui\scroll-area.tsx -----

"use client"

import * as React from "react"
import * as ScrollAreaPrimitive from "@radix-ui/react-scroll-area"

import { cn } from "@/lib/utils"

const ScrollArea = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <ScrollAreaPrimitive.Root
    ref={ref}
    className={cn("relative overflow-hidden", className)}
    {...props}
  >
    <ScrollAreaPrimitive.Viewport className="h-full w-full rounded-[inherit]">
      {children}
    </ScrollAreaPrimitive.Viewport>
    <ScrollBar />
    <ScrollAreaPrimitive.Corner />
  </ScrollAreaPrimitive.Root>
))
ScrollArea.displayName = ScrollAreaPrimitive.Root.displayName

const ScrollBar = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>
>(({ className, orientation = "vertical", ...props }, ref) => (
  <ScrollAreaPrimitive.ScrollAreaScrollbar
    ref={ref}
    orientation={orientation}
    className={cn(
      "flex touch-none select-none transition-colors",
      orientation === "vertical" &&
        "h-full w-2.5 border-l border-l-transparent p-[1px]",
      orientation === "horizontal" &&
        "h-2.5 flex-col border-t border-t-transparent p-[1px]",
      className
    )}
    {...props}
  >
    <ScrollAreaPrimitive.ScrollAreaThumb className="relative flex-1 rounded-full bg-border" />
  </ScrollAreaPrimitive.ScrollAreaScrollbar>
))
ScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName

export { ScrollArea, ScrollBar }


----- components\ui\select.tsx -----

"use client"

import * as React from "react"
import * as SelectPrimitive from "@radix-ui/react-select"
import { Check, ChevronDown, ChevronUp } from "lucide-react"

import { cn } from "@/lib/utils"

const Select = SelectPrimitive.Root

const SelectGroup = SelectPrimitive.Group

const SelectValue = SelectPrimitive.Value

const SelectTrigger = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex h-9 w-full items-center justify-between whitespace-nowrap rounded-md border border-input bg-transparent px-3 py-2 text-sm shadow-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-1 focus:ring-ring disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1",
      className
    )}
    {...props}
  >
    {children}
    <SelectPrimitive.Icon asChild>
      <ChevronDown className="h-4 w-4 opacity-50" />
    </SelectPrimitive.Icon>
  </SelectPrimitive.Trigger>
))
SelectTrigger.displayName = SelectPrimitive.Trigger.displayName

const SelectScrollUpButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollUpButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronUp className="h-4 w-4" />
  </SelectPrimitive.ScrollUpButton>
))
SelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName

const SelectScrollDownButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollDownButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronDown className="h-4 w-4" />
  </SelectPrimitive.ScrollDownButton>
))
SelectScrollDownButton.displayName =
  SelectPrimitive.ScrollDownButton.displayName

const SelectContent = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>
>(({ className, children, position = "popper", ...props }, ref) => (
  <SelectPrimitive.Portal>
    <SelectPrimitive.Content
      ref={ref}
      className={cn(
        "relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]",
        position === "popper" &&
          "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
        className
      )}
      position={position}
      {...props}
    >
      <SelectScrollUpButton />
      <SelectPrimitive.Viewport
        className={cn(
          "p-1",
          position === "popper" &&
            "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]"
        )}
      >
        {children}
      </SelectPrimitive.Viewport>
      <SelectScrollDownButton />
    </SelectPrimitive.Content>
  </SelectPrimitive.Portal>
))
SelectContent.displayName = SelectPrimitive.Content.displayName

const SelectLabel = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Label
    ref={ref}
    className={cn("px-2 py-1.5 text-sm font-semibold", className)}
    {...props}
  />
))
SelectLabel.displayName = SelectPrimitive.Label.displayName

const SelectItem = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-2 pr-8 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute right-2 flex h-3.5 w-3.5 items-center justify-center">
      <SelectPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </SelectPrimitive.ItemIndicator>
    </span>
    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
  </SelectPrimitive.Item>
))
SelectItem.displayName = SelectPrimitive.Item.displayName

const SelectSeparator = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
SelectSeparator.displayName = SelectPrimitive.Separator.displayName

export {
  Select,
  SelectGroup,
  SelectValue,
  SelectTrigger,
  SelectContent,
  SelectLabel,
  SelectItem,
  SelectSeparator,
  SelectScrollUpButton,
  SelectScrollDownButton,
}


----- components\ui\skeleton.tsx -----

import { cn } from "@/lib/utils"

function Skeleton({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) {
  return (
    <div
      className={cn("animate-pulse rounded-md bg-primary/10", className)}
      {...props}
    />
  )
}

export { Skeleton }


----- components\ui\sonner.tsx -----

"use client"

import { useTheme } from "next-themes"
import { Toaster as Sonner } from "sonner"

type ToasterProps = React.ComponentProps<typeof Sonner>

const Toaster = ({ ...props }: ToasterProps) => {
  const { theme = "system" } = useTheme()

  return (
    <Sonner
      theme={theme as ToasterProps["theme"]}
      className="toaster group"
      toastOptions={{
        classNames: {
          toast:
            "group toast group-[.toaster]:bg-background group-[.toaster]:text-foreground group-[.toaster]:border-border group-[.toaster]:shadow-lg",
          description: "group-[.toast]:text-muted-foreground",
          actionButton:
            "group-[.toast]:bg-primary group-[.toast]:text-primary-foreground",
          cancelButton:
            "group-[.toast]:bg-muted group-[.toast]:text-muted-foreground",
        },
      }}
      {...props}
    />
  )
}

export { Toaster }


----- components\ui\switch.tsx -----

"use client"

import * as React from "react"
import * as SwitchPrimitives from "@radix-ui/react-switch"

import { cn } from "@/lib/utils"

const Switch = React.forwardRef<
  React.ElementRef<typeof SwitchPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>
>(({ className, ...props }, ref) => (
  <SwitchPrimitives.Root
    className={cn(
      "peer inline-flex h-5 w-9 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent shadow-sm transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input",
      className
    )}
    {...props}
    ref={ref}
  >
    <SwitchPrimitives.Thumb
      className={cn(
        "pointer-events-none block h-4 w-4 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-4 data-[state=unchecked]:translate-x-0"
      )}
    />
  </SwitchPrimitives.Root>
))
Switch.displayName = SwitchPrimitives.Root.displayName

export { Switch }


----- components\ui\table.tsx -----

import * as React from "react"

import { cn } from "@/lib/utils"

const Table = React.forwardRef<
  HTMLTableElement,
  React.HTMLAttributes<HTMLTableElement>
>(({ className, ...props }, ref) => (
  <div className="relative w-full overflow-auto">
    <table
      ref={ref}
      className={cn("w-full caption-bottom text-sm", className)}
      {...props}
    />
  </div>
))
Table.displayName = "Table"

const TableHeader = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <thead ref={ref} className={cn("[&_tr]:border-b", className)} {...props} />
))
TableHeader.displayName = "TableHeader"

const TableBody = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tbody
    ref={ref}
    className={cn("[&_tr:last-child]:border-0", className)}
    {...props}
  />
))
TableBody.displayName = "TableBody"

const TableFooter = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tfoot
    ref={ref}
    className={cn(
      "border-t bg-muted/50 font-medium [&>tr]:last:border-b-0",
      className
    )}
    {...props}
  />
))
TableFooter.displayName = "TableFooter"

const TableRow = React.forwardRef<
  HTMLTableRowElement,
  React.HTMLAttributes<HTMLTableRowElement>
>(({ className, ...props }, ref) => (
  <tr
    ref={ref}
    className={cn(
      "border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted",
      className
    )}
    {...props}
  />
))
TableRow.displayName = "TableRow"

const TableHead = React.forwardRef<
  HTMLTableCellElement,
  React.ThHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <th
    ref={ref}
    className={cn(
      "h-10 px-2 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]",
      className
    )}
    {...props}
  />
))
TableHead.displayName = "TableHead"

const TableCell = React.forwardRef<
  HTMLTableCellElement,
  React.TdHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <td
    ref={ref}
    className={cn(
      "p-2 align-middle [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]",
      className
    )}
    {...props}
  />
))
TableCell.displayName = "TableCell"

const TableCaption = React.forwardRef<
  HTMLTableCaptionElement,
  React.HTMLAttributes<HTMLTableCaptionElement>
>(({ className, ...props }, ref) => (
  <caption
    ref={ref}
    className={cn("mt-4 text-sm text-muted-foreground", className)}
    {...props}
  />
))
TableCaption.displayName = "TableCaption"

export {
  Table,
  TableHeader,
  TableBody,
  TableFooter,
  TableHead,
  TableRow,
  TableCell,
  TableCaption,
}


----- components\ui\tabs.tsx -----

"use client"

import * as React from "react"
import * as TabsPrimitive from "@radix-ui/react-tabs"

import { cn } from "@/lib/utils"

const Tabs = TabsPrimitive.Root

const TabsList = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.List
    ref={ref}
    className={cn(
      "inline-flex h-9 items-center justify-center rounded-lg bg-muted p-1 text-muted-foreground",
      className
    )}
    {...props}
  />
))
TabsList.displayName = TabsPrimitive.List.displayName

const TabsTrigger = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Trigger
    ref={ref}
    className={cn(
      "inline-flex items-center justify-center whitespace-nowrap rounded-md px-3 py-1 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow",
      className
    )}
    {...props}
  />
))
TabsTrigger.displayName = TabsPrimitive.Trigger.displayName

const TabsContent = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Content
    ref={ref}
    className={cn(
      "mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2",
      className
    )}
    {...props}
  />
))
TabsContent.displayName = TabsPrimitive.Content.displayName

export { Tabs, TabsList, TabsTrigger, TabsContent }


----- components\ui\textarea.tsx -----

import * as React from "react"

import { cn } from "@/lib/utils"

const Textarea = React.forwardRef<
  HTMLTextAreaElement,
  React.ComponentProps<"textarea">
>(({ className, ...props }, ref) => {
  return (
    <textarea
      className={cn(
        "flex min-h-[60px] w-full rounded-md border border-input bg-transparent px-3 py-2 text-base shadow-sm placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
        className
      )}
      ref={ref}
      {...props}
    />
  )
})
Textarea.displayName = "Textarea"

export { Textarea }


----- components\ui\toast.tsx -----

"use client"

import * as React from "react"
import * as ToastPrimitives from "@radix-ui/react-toast"
import { cva, type VariantProps } from "class-variance-authority"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const ToastProvider = ToastPrimitives.Provider

const ToastViewport = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Viewport>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Viewport
    ref={ref}
    className={cn(
      "fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]",
      className
    )}
    {...props}
  />
))
ToastViewport.displayName = ToastPrimitives.Viewport.displayName

const toastVariants = cva(
  "group pointer-events-auto relative flex w-full items-center justify-between space-x-2 overflow-hidden rounded-md border p-4 pr-6 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full",
  {
    variants: {
      variant: {
        default: "border bg-background text-foreground",
        destructive:
          "destructive group border-destructive bg-destructive text-destructive-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Toast = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &
    VariantProps<typeof toastVariants>
>(({ className, variant, ...props }, ref) => {
  return (
    <ToastPrimitives.Root
      ref={ref}
      className={cn(toastVariants({ variant }), className)}
      {...props}
    />
  )
})
Toast.displayName = ToastPrimitives.Root.displayName

const ToastAction = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Action>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Action
    ref={ref}
    className={cn(
      "inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium transition-colors hover:bg-secondary focus:outline-none focus:ring-1 focus:ring-ring disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive",
      className
    )}
    {...props}
  />
))
ToastAction.displayName = ToastPrimitives.Action.displayName

const ToastClose = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Close>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Close
    ref={ref}
    className={cn(
      "absolute right-1 top-1 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-1 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600",
      className
    )}
    toast-close=""
    {...props}
  >
    <X className="h-4 w-4" />
  </ToastPrimitives.Close>
))
ToastClose.displayName = ToastPrimitives.Close.displayName

const ToastTitle = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Title>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Title
    ref={ref}
    className={cn("text-sm font-semibold [&+div]:text-xs", className)}
    {...props}
  />
))
ToastTitle.displayName = ToastPrimitives.Title.displayName

const ToastDescription = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Description>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Description
    ref={ref}
    className={cn("text-sm opacity-90", className)}
    {...props}
  />
))
ToastDescription.displayName = ToastPrimitives.Description.displayName

type ToastProps = React.ComponentPropsWithoutRef<typeof Toast>

type ToastActionElement = React.ReactElement<typeof ToastAction>

export {
  type ToastProps,
  type ToastActionElement,
  ToastProvider,
  ToastViewport,
  Toast,
  ToastTitle,
  ToastDescription,
  ToastClose,
  ToastAction,
}


----- components\ui\toaster.tsx -----

"use client"

import { useToast } from "@/hooks/use-toast"
import {
  Toast,
  ToastClose,
  ToastDescription,
  ToastProvider,
  ToastTitle,
  ToastViewport,
} from "@/components/ui/toast"

export function Toaster() {
  const { toasts } = useToast()

  return (
    <ToastProvider>
      {toasts.map(function ({ id, title, description, action, ...props }) {
        return (
          <Toast key={id} {...props}>
            <div className="grid gap-1">
              {title && <ToastTitle>{title}</ToastTitle>}
              {description && (
                <ToastDescription>{description}</ToastDescription>
              )}
            </div>
            {action}
            <ToastClose />
          </Toast>
        )
      })}
      <ToastViewport />
    </ToastProvider>
  )
}


----- components\ui\tooltip.tsx -----

"use client"

import * as React from "react"
import * as TooltipPrimitive from "@radix-ui/react-tooltip"

import { cn } from "@/lib/utils"

const TooltipProvider = TooltipPrimitive.Provider

const Tooltip = TooltipPrimitive.Root

const TooltipTrigger = TooltipPrimitive.Trigger

const TooltipContent = React.forwardRef<
  React.ElementRef<typeof TooltipPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <TooltipPrimitive.Portal>
    <TooltipPrimitive.Content
      ref={ref}
      sideOffset={sideOffset}
      className={cn(
        "z-50 overflow-hidden rounded-md bg-primary px-3 py-1.5 text-xs text-primary-foreground animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]",
        className
      )}
      {...props}
    />
  </TooltipPrimitive.Portal>
))
TooltipContent.displayName = TooltipPrimitive.Content.displayName

export { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }


----- constants\navigation.ts -----

// src/constants/navigation.ts

/**
 * SOLID - Single Responsibility Principle (SRP)
 * Navigation structure definition ONLY
 */

/**
 * DRY Principle
 * Single source of truth for navigation
 */
// src/constants/navigation.ts

import { Permission } from "./permissions";

export interface NavItem {
  label: string;
  href?: string;
  icon: string;
  permission: Permission;
  children?: NavItem[];
}

export const navigationItems: NavItem[] = [
  {
    label: "Dashboard",
    href: "/dashboard",
    icon: "LayoutDashboard",
    permission: "view_dashboard",
  },
  {
    label: "League Management",
    icon: "Trophy",
    permission: "view_divisions",
    children: [
      {
        label: "Cities",
        href: "/league/cities",
        icon: "Building2",
        permission: "manage_cities",
      },
      {
        label: "Locations",
        href: "/league/locations",
        icon: "MapPin",
        permission: "manage_locations",
      },
      {
        label: "Levels",
        href: "/league/levels",
        icon: "TrendingUp",
        permission: "manage_levels",
      },
      {
        label: "Prices",
        href: "/league/prices",
        icon: "DollarSign",
        permission: "manage_prices",
      },
      {
        label: "Divisions",
        href: "/league/divisions",
        icon: "List",
        permission: "view_divisions",
      },
      {
        label: "Teams",
        href: "/league/teams",
        icon: "Users",
        permission: "view_teams",
      },
      {
        label: "Players",
        href: "/league/players",
        icon: "User",
        permission: "view_players",
      },
    ],
  },
  {
    label: "Game Management",
    href: "/games",
    icon: "Calendar",
    permission: "view_games",
  },
  {
    label: "Payment Management",
    href: "/payments",
    icon: "CreditCard",
    permission: "view_payments",
  },
  {
    label: "Jersey Management",
    href: "/jerseys",
    icon: "Shirt",
    permission: "view_jerseys",
  },
  {
    label: "Photos Management",
    href: "/photos",
    icon: "Camera",
    permission: "view_photos",
  },
  {
    label: "Scorekeeper",
    href: "/scorekeeper",
    icon: "ClipboardList",
    permission: "manage_scores",
  },
  {
    label: "Communications",
    href: "/communications",
    icon: "MessageSquare",
    permission: "view_communications",
  },
  {
    label: "Settings",
    icon: "Settings",
    permission: "view_dashboard",
    children: [
      {
        label: "Staff Management",
        href: "/settings/admins",
        icon: "Shield",
        permission: "manage_admins",
      },
      {
        label: "Profile",
        href: "/settings/profile",
        icon: "User",
        permission: "view_dashboard",
      },
    ],
  },
];

export function filterNavigationByPermissions(
  items: NavItem[],
  userPermissions: Permission[]
): NavItem[] {
  return items
    .filter((item) => userPermissions.includes(item.permission))
    .map((item) => {
      if (item.children) {
        return {
          ...item,
          children: item.children.filter((child) =>
            userPermissions.includes(child.permission)
          ),
        };
      }
      return item;
    })
    .filter((item) => !item.children || item.children.length > 0);
}


----- constants\permissions.ts -----

// src/constants/permissions.ts

/**
 * SOLID - Single Responsibility Principle (SRP)
 * Define permissions and role mappings ONLY
 */

/**
 * DRY Principle
 * Single source of truth for all permissions
 */
// src/constants/permissions.ts

import { AdminRole } from "@/models/Admin";

export type Permission =
  // Dashboard
  | "view_dashboard"

  // League Management - EXECUTIVE only
  | "manage_cities"
  | "manage_locations"
  | "manage_levels"

  // League Management - EXECUTIVE + COMMISSIONER
  | "manage_divisions"
  | "view_divisions"
  | "manage_teams"
  | "view_teams"
  | "manage_players"
  | "view_players"

  // Admin Management
  | "manage_admins"

  // Game Management
  | "manage_games"
  | "view_games"

  // Payment Management
  | "manage_prices"
  | "manage_payments"
  | "view_payments"

  // Jersey Management
  | "manage_jerseys"
  | "view_jerseys"

  // Photos Management
  | "manage_photos"
  | "view_photos"

  // Scorekeeper Tools
  | "manage_scores"

  // Communications
  | "manage_communications"
  | "view_communications"

  // Jersey Management
  | "manage_jerseys"
  | "view_jerseys";

export const ROLE_PERMISSIONS: Record<AdminRole, Permission[]> = {
  EXECUTIVE: [
    "view_dashboard",
    "manage_cities",
    "manage_locations",
    "manage_levels",
    "manage_divisions",
    "view_divisions",
    "manage_teams",
    "view_teams",
    "manage_players",
    "view_players",
    "manage_admins",
    "manage_games",
    "view_games",
    "manage_prices",
    "manage_payments",
    "view_payments",
    "manage_jerseys",
    "view_jerseys",
    "manage_photos",
    "view_photos",
    "manage_scores",
    "manage_communications",
    "view_communications",
  ],

  COMMISSIONER: [
    "view_dashboard",
    // NO manage_cities, manage_locations, manage_levels
    "manage_divisions",
    "view_divisions",
    "manage_teams",
    "view_teams",
    "manage_players",
    "view_players",
    "manage_games",
    "view_games",
    "manage_payments",
    "view_payments",
    "manage_jerseys",
    "view_jerseys",
    "manage_photos",
    "view_photos",
    "manage_scores",
    "manage_communications",
    "view_communications",
  ],

  SCOREKEEPER: ["view_dashboard", "manage_scores", "view_games"],

  PHOTOGRAPHER: [
    "view_dashboard",
    "manage_photos",
    "view_photos",
    "view_games",
  ],
};

export function hasPermission(
  role: AdminRole,
  permission: Permission
): boolean {
  return ROLE_PERMISSIONS[role].includes(permission);
}

export function hasAnyPermission(
  role: AdminRole,
  permissions: Permission[]
): boolean {
  return permissions.some((permission) => hasPermission(role, permission));
}


----- hooks\use-toast.ts -----

"use client"

// Inspired by react-hot-toast library
import * as React from "react"

import type {
  ToastActionElement,
  ToastProps,
} from "@/components/ui/toast"

const TOAST_LIMIT = 1
const TOAST_REMOVE_DELAY = 1000000

type ToasterToast = ToastProps & {
  id: string
  title?: React.ReactNode
  description?: React.ReactNode
  action?: ToastActionElement
}

const actionTypes = {
  ADD_TOAST: "ADD_TOAST",
  UPDATE_TOAST: "UPDATE_TOAST",
  DISMISS_TOAST: "DISMISS_TOAST",
  REMOVE_TOAST: "REMOVE_TOAST",
} as const

let count = 0

function genId() {
  count = (count + 1) % Number.MAX_SAFE_INTEGER
  return count.toString()
}

type ActionType = typeof actionTypes

type Action =
  | {
      type: ActionType["ADD_TOAST"]
      toast: ToasterToast
    }
  | {
      type: ActionType["UPDATE_TOAST"]
      toast: Partial<ToasterToast>
    }
  | {
      type: ActionType["DISMISS_TOAST"]
      toastId?: ToasterToast["id"]
    }
  | {
      type: ActionType["REMOVE_TOAST"]
      toastId?: ToasterToast["id"]
    }

interface State {
  toasts: ToasterToast[]
}

const toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()

const addToRemoveQueue = (toastId: string) => {
  if (toastTimeouts.has(toastId)) {
    return
  }

  const timeout = setTimeout(() => {
    toastTimeouts.delete(toastId)
    dispatch({
      type: "REMOVE_TOAST",
      toastId: toastId,
    })
  }, TOAST_REMOVE_DELAY)

  toastTimeouts.set(toastId, timeout)
}

export const reducer = (state: State, action: Action): State => {
  switch (action.type) {
    case "ADD_TOAST":
      return {
        ...state,
        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),
      }

    case "UPDATE_TOAST":
      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === action.toast.id ? { ...t, ...action.toast } : t
        ),
      }

    case "DISMISS_TOAST": {
      const { toastId } = action

      // ! Side effects ! - This could be extracted into a dismissToast() action,
      // but I'll keep it here for simplicity
      if (toastId) {
        addToRemoveQueue(toastId)
      } else {
        state.toasts.forEach((toast) => {
          addToRemoveQueue(toast.id)
        })
      }

      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === toastId || toastId === undefined
            ? {
                ...t,
                open: false,
              }
            : t
        ),
      }
    }
    case "REMOVE_TOAST":
      if (action.toastId === undefined) {
        return {
          ...state,
          toasts: [],
        }
      }
      return {
        ...state,
        toasts: state.toasts.filter((t) => t.id !== action.toastId),
      }
  }
}

const listeners: Array<(state: State) => void> = []

let memoryState: State = { toasts: [] }

function dispatch(action: Action) {
  memoryState = reducer(memoryState, action)
  listeners.forEach((listener) => {
    listener(memoryState)
  })
}

type Toast = Omit<ToasterToast, "id">

function toast({ ...props }: Toast) {
  const id = genId()

  const update = (props: ToasterToast) =>
    dispatch({
      type: "UPDATE_TOAST",
      toast: { ...props, id },
    })
  const dismiss = () => dispatch({ type: "DISMISS_TOAST", toastId: id })

  dispatch({
    type: "ADD_TOAST",
    toast: {
      ...props,
      id,
      open: true,
      onOpenChange: (open) => {
        if (!open) dismiss()
      },
    },
  })

  return {
    id: id,
    dismiss,
    update,
  }
}

function useToast() {
  const [state, setState] = React.useState<State>(memoryState)

  React.useEffect(() => {
    listeners.push(setState)
    return () => {
      const index = listeners.indexOf(setState)
      if (index > -1) {
        listeners.splice(index, 1)
      }
    }
  }, [state])

  return {
    ...state,
    toast,
    dismiss: (toastId?: string) => dispatch({ type: "DISMISS_TOAST", toastId }),
  }
}

export { useToast, toast }


----- hooks\useAuth.ts -----

// src/hooks/useAuth.ts

/**
 * SOLID - Single Responsibility Principle (SRP)
 * Auth hook provides session access ONLY
 */

/**
 * Design Pattern - Adapter Pattern
 * Wraps NextAuth's useSession for type safety
 */

"use client";

import { useSession } from "next-auth/react";
import { AdminRole } from "@/models/Admin";

export function useAuth() {
  const { data: session, status } = useSession();

  return {
    user: session?.user || null,
    isLoading: status === "loading",
    isAuthenticated: status === "authenticated",
    isExecutive: session?.user?.role === "EXECUTIVE",
    isCommissioner: session?.user?.role === "COMMISSIONER",
    hasFullAccess: session?.user?.allLocations === true,
  };
}


----- hooks\useJerseyData.ts -----

// src/hooks/useJerseyData.ts

/**
 * SOLID - Single Responsibility Principle (SRP)
 * Jersey data fetching hook ONLY
 */

"use client";

import { useState, useEffect } from "react";
import {
  JerseyStats,
  DivisionWithTeams,
  TeamWithJerseyInfo,
} from "@/types/jersey";

interface Location {
  _id: string;
  name: string;
}

interface UseJerseyDataReturn {
  divisions: DivisionWithTeams[];
  stats: JerseyStats;
  locations: Location[];
  teams: TeamWithJerseyInfo[];
  isLoading: boolean;
  error: string | null;
  refetch: () => void;
}

export function useJerseyData(
  locationId?: string,
  divisionId?: string
): UseJerseyDataReturn {
  const [divisions, setDivisions] = useState<DivisionWithTeams[]>([]);
  const [stats, setStats] = useState<JerseyStats>({
    totalTeams: 0,
    teamsWithDesign: 0,
    teamsWithoutDesign: 0,
    completeTeams: 0,
  });
  const [locations, setLocations] = useState<Location[]>([]);
  const [teams, setTeams] = useState<TeamWithJerseyInfo[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  const fetchData = async () => {
    try {
      setIsLoading(true);
      setError(null);

      const params = new URLSearchParams();
      if (locationId) params.append("locationId", locationId);
      if (divisionId) params.append("divisionId", divisionId);

      const response = await fetch(`/api/v1/jerseys?${params.toString()}`);

      if (!response.ok) {
        throw new Error("Failed to fetch jersey data");
      }

      const data = await response.json();

      if (divisionId && data.teams) {
        // When fetching teams for a specific division
        setTeams(data.teams);
      } else {
        // When fetching overview data
        setDivisions(data.divisions || []);
        setStats(data.stats || stats);
        setLocations(data.locations || []);
      }
    } catch (err: any) {
      setError(err.message || "An error occurred");
    } finally {
      setIsLoading(false);
    }
  };

  useEffect(() => {
    fetchData();
  }, [locationId, divisionId]);

  return {
    divisions,
    stats,
    locations,
    teams,
    isLoading,
    error,
    refetch: fetchData,
  };
}


----- hooks\useJerseyMutations.ts -----

// src/hooks/useJerseyMutations.ts

/**
 * SOLID - Single Responsibility Principle (SRP)
 * Jersey mutation operations ONLY
 */

"use client";

import { useState } from "react";
import { toast } from "sonner";

export function useJerseyMutations() {
  const [isUpdating, setIsUpdating] = useState(false);

  /**
   * Update jersey edition with colors
   */
  const updateJerseyEdition = async (data: {
    teamId: string;
    jerseyEdition: string;
    primaryColor: string;
    secondaryColor: string;
    tertiaryColor: string;
  }) => {
    try {
      setIsUpdating(true);

      const response = await fetch("/api/v1/jerseys/design", {
        method: "PUT",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ type: "edition", ...data }),
      });

      if (!response.ok) {
        const error = await response.json();
        throw new Error(error.error || "Failed to update jersey edition");
      }

      toast.success("Jersey edition updated successfully");
      return await response.json();
    } catch (error: any) {
      toast.error(error.message);
      throw error;
    } finally {
      setIsUpdating(false);
    }
  };

  /**
   * Update custom jersey image
   */
  const updateJerseyCustom = async (data: {
    teamId: string;
    imageData: {
      id: string;
      url: string;
      publicId: string;
    };
  }) => {
    try {
      setIsUpdating(true);

      const response = await fetch("/api/v1/jerseys/design", {
        method: "PUT",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ type: "custom", ...data }),
      });

      if (!response.ok) {
        const error = await response.json();
        throw new Error(error.error || "Failed to update custom jersey");
      }

      toast.success("Custom jersey updated successfully");
      return await response.json();
    } catch (error: any) {
      toast.error(error.message);
      throw error;
    } finally {
      setIsUpdating(false);
    }
  };

  /**
   * Remove jersey design
   */
  const removeJerseyDesign = async (teamId: string) => {
    try {
      setIsUpdating(true);

      const response = await fetch("/api/v1/jerseys/design", {
        method: "DELETE",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ teamId }),
      });

      if (!response.ok) {
        const error = await response.json();
        throw new Error(error.error || "Failed to remove jersey design");
      }

      toast.success("Jersey design removed successfully");
      return await response.json();
    } catch (error: any) {
      toast.error(error.message);
      throw error;
    } finally {
      setIsUpdating(false);
    }
  };

  /**
   * Update player jersey details
   */
  const updatePlayerJersey = async (data: {
    playerId: string;
    jerseyNumber?: number | null;
    jerseySize?: string | null;
    jerseyName?: string | null;
  }) => {
    try {
      setIsUpdating(true);

      const response = await fetch("/api/v1/jerseys/player", {
        method: "PUT",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(data),
      });

      if (!response.ok) {
        const error = await response.json();
        throw new Error(error.error || "Failed to update player details");
      }

      toast.success("Player details updated successfully");
      return await response.json();
    } catch (error: any) {
      toast.error(error.message);
      throw error;
    } finally {
      setIsUpdating(false);
    }
  };

  /**
   * Add generic jersey
   */
  const addGenericJersey = async (data: {
    teamId: string;
    jerseyNumber?: number;
    jerseySize?: string;
    jerseyName?: string;
  }) => {
    try {
      setIsUpdating(true);

      const response = await fetch("/api/v1/jerseys/generic", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(data),
      });

      if (!response.ok) {
        const error = await response.json();
        throw new Error(error.error || "Failed to add generic jersey");
      }

      toast.success("Generic jersey added successfully");
      return await response.json();
    } catch (error: any) {
      toast.error(error.message);
      throw error;
    } finally {
      setIsUpdating(false);
    }
  };

  /**
   * Update generic jersey
   */
  const updateGenericJersey = async (data: {
    teamId: string;
    genericIndex: number;
    jerseyNumber?: number;
    jerseySize?: string;
    jerseyName?: string;
  }) => {
    try {
      setIsUpdating(true);

      const response = await fetch("/api/v1/jerseys/generic", {
        method: "PUT",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(data),
      });

      if (!response.ok) {
        const error = await response.json();
        throw new Error(error.error || "Failed to update generic jersey");
      }

      toast.success("Generic jersey updated successfully");
      return await response.json();
    } catch (error: any) {
      toast.error(error.message);
      throw error;
    } finally {
      setIsUpdating(false);
    }
  };

  /**
   * Remove generic jersey
   */
  const removeGenericJersey = async (data: {
    teamId: string;
    genericIndex: number;
  }) => {
    try {
      setIsUpdating(true);

      const response = await fetch("/api/v1/jerseys/generic", {
        method: "DELETE",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(data),
      });

      if (!response.ok) {
        const error = await response.json();
        throw new Error(error.error || "Failed to remove generic jersey");
      }

      toast.success("Generic jersey removed successfully");
      return await response.json();
    } catch (error: any) {
      toast.error(error.message);
      throw error;
    } finally {
      setIsUpdating(false);
    }
  };

  return {
    isUpdating,
    updateJerseyEdition,
    updateJerseyCustom,
    removeJerseyDesign,
    updatePlayerJersey,
    addGenericJersey,
    updateGenericJersey,
    removeGenericJersey,
  };
}


----- hooks\usePermissions.ts -----

// src/hooks/usePermissions.ts

/**
 * SOLID - Single Responsibility Principle (SRP)
 * Permission checking hook ONLY
 */

/**
 * Performance Optimization
 * Memoized permission checks
 */

"use client";

import { useMemo } from "react";
import { useSession } from "next-auth/react";
import { Permission, ROLE_PERMISSIONS } from "@/constants/permissions";

export function usePermissions() {
  const { data: session } = useSession();

  const permissions = useMemo(() => {
    if (!session?.user?.role) return [];
    return ROLE_PERMISSIONS[session.user.role];
  }, [session?.user?.role]);

  const hasPermission = useMemo(
    () => (permission: Permission) => permissions.includes(permission),
    [permissions]
  );

  const hasAnyPermission = useMemo(
    () => (perms: Permission[]) =>
      perms.some((permission) => permissions.includes(permission)),
    [permissions]
  );

  const hasLocationAccess = useMemo(
    () => (locationId: string) => {
      if (!session?.user) return false;
      if (session.user.allLocations) return true;
      return session.user.assignedLocations.includes(locationId);
    },
    [session?.user]
  );

  return {
    permissions,
    hasPermission,
    hasAnyPermission,
    hasLocationAccess,
  };
}


----- hooks\useTeamJersey.ts -----

// src/hooks/useTeamJersey.ts

/**
 * SOLID - Single Responsibility Principle (SRP)
 * Team jersey data fetching and management ONLY
 */

"use client";

import { useState, useEffect } from "react";
import { TeamJerseyDetails } from "@/types/jersey";

interface UseTeamJerseyReturn {
  team: TeamJerseyDetails | null;
  isLoading: boolean;
  error: string | null;
  refetch: () => void;
}

export function useTeamJersey(teamId: string): UseTeamJerseyReturn {
  const [team, setTeam] = useState<TeamJerseyDetails | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  const fetchTeam = async () => {
    try {
      setIsLoading(true);
      setError(null);

      const response = await fetch(`/api/v1/jerseys/team/${teamId}`);

      if (!response.ok) {
        throw new Error("Failed to fetch team details");
      }

      const data = await response.json();
      setTeam(data.team);
    } catch (err: any) {
      setError(err.message || "An error occurred");
    } finally {
      setIsLoading(false);
    }
  };

  useEffect(() => {
    if (teamId) {
      fetchTeam();
    }
  }, [teamId]);

  return {
    team,
    isLoading,
    error,
    refetch: fetchTeam,
  };
}


----- lib\auth\auth.config.ts -----

// src/lib/auth/auth.config.ts

/**
 * SOLID - Single Responsibility Principle (SRP)
 * This file handles ONLY NextAuth configuration
 * No business logic, just auth setup
 */

/**
 * Security
 * - JWT strategy (no database sessions)
 * - Credentials provider for admin login
 * - Password verification with bcrypt
 */

import { NextAuthOptions } from "next-auth";
import CredentialsProvider from "next-auth/providers/credentials";
import { getAdminByEmail, updateLastLogin } from "@/lib/db/queries/admins";
import { AdminRole } from "@/models/Admin";

// Extend NextAuth types
declare module "next-auth" {
  interface Session {
    user: {
      id: string;
      email: string;
      name: string;
      role: AdminRole;
      allLocations: boolean;
      assignedLocations: string[];
      isActive: boolean;
    };
  }

  interface User {
    id: string;
    email: string;
    name: string;
    role: AdminRole;
    allLocations: boolean;
    assignedLocations: string[];
    isActive: boolean;
  }
}

declare module "next-auth/jwt" {
  interface JWT {
    id: string;
    email: string;
    name: string;
    role: AdminRole;
    allLocations: boolean;
    assignedLocations: string[];
    isActive: boolean;
  }
}

export const authOptions: NextAuthOptions = {
  providers: [
    CredentialsProvider({
      id: "admin-credentials",
      name: "Admin Credentials",
      credentials: {
        email: {
          label: "Email",
          type: "email",
          placeholder: "admin@example.com",
        },
        password: {
          label: "Password",
          type: "password",
        },
      },
      async authorize(credentials) {
        if (!credentials?.email || !credentials?.password) {
          throw new Error("Email and password required");
        }

        try {
          // Find admin with password
          const admin = await getAdminByEmail(credentials.email);

          if (!admin) {
            throw new Error("Invalid credentials");
          }

          // Check if active
          if (!admin.isActive) {
            throw new Error("Account is inactive");
          }

          // Verify password
          const isValidPassword = await admin.comparePassword(
            credentials.password
          );

          if (!isValidPassword) {
            throw new Error("Invalid credentials");
          }

          // Update last login
          await updateLastLogin(admin._id.toString());

          // Return user object (without password)
          return {
            id: admin._id.toString(),
            email: admin.email,
            name: admin.name,
            role: admin.role,
            allLocations: admin.allLocations,
            assignedLocations: admin.assignedLocations.map((loc: any) =>
              loc.toString()
            ),
            isActive: admin.isActive,
          };
        } catch (error: any) {
          throw new Error(error.message || "Authentication failed");
        }
      },
    }),
  ],

  callbacks: {
    async jwt({ token, user }) {
      // Initial sign in
      if (user) {
        token.id = user.id;
        token.email = user.email;
        token.name = user.name;
        token.role = user.role;
        token.allLocations = user.allLocations;
        token.assignedLocations = user.assignedLocations;
        token.isActive = user.isActive;
      }

      return token;
    },

    async session({ session, token }) {
      if (token) {
        session.user = {
          id: token.id,
          email: token.email,
          name: token.name,
          role: token.role,
          allLocations: token.allLocations,
          assignedLocations: token.assignedLocations,
          isActive: token.isActive,
        };
      }

      return session;
    },
  },

  pages: {
    signIn: "/login",
    error: "/login",
  },

  session: {
    strategy: "jwt",
    maxAge: 30 * 24 * 60 * 60, // 30 days
  },

  secret: process.env.NEXTAUTH_SECRET,

  debug: process.env.NODE_ENV === "development",
};


----- lib\auth\permissions.ts -----

// src/lib/auth/permissions.ts

/**
 * SOLID - Single Responsibility Principle (SRP)
 * Permission checking utilities ONLY
 */

/**
 * DRY Principle
 * Centralized permission logic used across the app
 */

import { Session } from "next-auth";
import { AdminRole } from "@/models/Admin";
import { Permission, ROLE_PERMISSIONS } from "@/constants/permissions";

/**
 * Check if session has specific permission
 */
export function hasPermission(
  session: Session | null,
  permission: Permission
): boolean {
  if (!session?.user?.role) return false;

  const permissions = ROLE_PERMISSIONS[session.user.role];

  return permissions.includes(permission);
}

/**
 * Check if session has any of the specified permissions
 */
export function hasAnyPermission(
  session: Session | null,
  permissions: Permission[]
): boolean {
  if (!session?.user?.role) return false;

  const userPermissions = ROLE_PERMISSIONS[session.user.role];
  return permissions.some((p) => userPermissions.includes(p));
}

/**
 * Check if session has all specified permissions
 */
export function hasAllPermissions(
  session: Session | null,
  permissions: Permission[]
): boolean {
  if (!session?.user?.role) return false;

  const userPermissions = ROLE_PERMISSIONS[session.user.role];
  return permissions.every((p) => userPermissions.includes(p));
}

/**
 * Check if admin has access to specific location
 */
export function hasLocationAccess(
  session: Session | null,
  locationId: string
): boolean {
  if (!session?.user) return false;

  // EXECUTIVE and COMMISSIONER have access to all locations
  if (session.user.allLocations) return true;

  // Check if location is in assigned locations
  return session.user.assignedLocations.includes(locationId);
}

/**
 * Get accessible location IDs for filtering queries
 */
export function getAccessibleLocationIds(
  session: Session | null,
  allLocationsInCity: string[]
): string[] {
  if (!session?.user) return [];

  // EXECUTIVE and COMMISSIONER see all locations
  if (session.user.allLocations) return allLocationsInCity;

  // Return intersection of assigned locations and locations in the city
  return session.user.assignedLocations.filter((loc) =>
    allLocationsInCity.includes(loc)
  );
}


----- lib\db\mongodb.ts -----

// src/lib/db/mongodb.ts

/**
 * SOLID - Single Responsibility Principle (SRP)
 * This file has ONE job: manage MongoDB connection
 * No queries, no business logic, just connection management
 */

/**
 * Performance Optimization
 * - Global connection caching prevents multiple connections
 * - Connection pooling for better performance
 */

/**
 * Error Handling & Resilience
 * - Graceful error messages
 * - Connection retry logic built into Mongoose
 */

// src/lib/db/mongodb.ts
import mongoose from "mongoose";

if (!process.env.MONGODB_URI) {
  throw new Error("Please add your MONGODB_URI to .env.local");
}

const MONGODB_URI: string = process.env.MONGODB_URI;

interface MongooseCache {
  conn: typeof mongoose | null;
  promise: Promise<typeof mongoose> | null;
}

declare global {
  var mongoose: MongooseCache | undefined;
}

let cached: MongooseCache = global.mongoose || {
  conn: null,
  promise: null,
};

if (!global.mongoose) {
  global.mongoose = cached;
}

export async function connectDB(): Promise<typeof mongoose> {
  if (cached.conn) {
    return cached.conn;
  }

  if (!cached.promise) {
    const opts = {
      bufferCommands: false,
      maxPoolSize: 10,
      minPoolSize: 2,
      socketTimeoutMS: 45000,
      serverSelectionTimeoutMS: 10000,
    };

    cached.promise = mongoose.connect(MONGODB_URI, opts).then((mongoose) => {
      console.log("✅ MongoDB connected successfully");

      // Register all models after connection
      require("@/models/Admin");
      require("@/models/City");
      require("@/models/Location");
      require("@/models/Level");
      require("@/models/Division");
      require("@/models/Team");
      require("@/models/Player");
      require("@/models/User");
      require("@/models/Game");
      require("@/models/Price");
      require("@/models/PaymentMethod");
      require("@/models/JerseyOrder");
      require("@/models/GamePhoto");
      require("@/models/ChatChannel");
      require("@/models/ChatMessage");
      require("@/models/MessageForward");

      return mongoose;
    });
  }

  try {
    cached.conn = await cached.promise;
  } catch (error) {
    cached.promise = null;
    console.error("❌ MongoDB connection error:", error);
    throw error;
  }

  return cached.conn;
}

export async function disconnectDB(): Promise<void> {
  if (cached.conn) {
    await cached.conn.disconnect();
    cached.conn = null;
    cached.promise = null;
    console.log("MongoDB disconnected");
  }
}

export function isConnected(): boolean {
  return cached.conn !== null && mongoose.connection.readyState === 1;
}


----- lib\db\queries\admins.ts -----

// src/lib/db/queries/admins.ts

/**
 * SOLID - Single Responsibility Principle (SRP)
 * This file handles ONLY admin database queries
 * No validation, no business logic, just data access
 */

/**
 * DRY Principle
 * Centralized admin queries - used by API routes and pages
 */

import { connectDB } from "../mongodb";
import Admin, { IAdmin } from "@/models/Admin";
import Location from "@/models/Location";
import bcrypt from "bcryptjs";

// Type for lean query results (plain objects without Mongoose methods)
type LeanAdmin = Omit<IAdmin, keyof Document>;

/**
 * Get all admins (without passwords)
 */
export async function getAdmins(): Promise<IAdmin[]> {
  await connectDB();
  return Admin.find()
    .select("-password")
    .populate("assignedLocations", "name address")
    .sort({ createdAt: -1 })
    .lean();
}

/**
 * Get admin by ID
 */
export async function getAdminById(id: string): Promise<IAdmin | null> {
  await connectDB();
  return Admin.findById(id)
    .select("-password")
    .populate("assignedLocations", "name address")
    .lean();
}

/**
 * Get admin by email (with password for auth)
 */
export async function getAdminByEmail(email: string) {
  await connectDB();
  return Admin.findOne({ email: email.toLowerCase() }).select("+password");
}

/**
 * Create new admin
 * Hashes password before storing
 */
export async function createAdmin(data: {
  name: string;
  email: string;
  password: string;
  role: IAdmin["role"];
  phoneNumber?: string;
  assignedLocations?: string[];
}): Promise<IAdmin> {
  await connectDB();

  // Hash password before storing
  const hashedPassword = await bcrypt.hash(data.password, 12);

  const admin = await Admin.create({
    ...data,
    password: hashedPassword,
    email: data.email.toLowerCase(),
    isActive: true,
  });

  // Return without password
  return Admin.findById(admin._id)
    .select("-password")
    .lean() as Promise<IAdmin>;
}

/**
 * Update admin's last login
 */
export async function updateLastLogin(adminId: string): Promise<void> {
  await connectDB();
  await Admin.findByIdAndUpdate(adminId, { lastLogin: new Date() });
}

/**
 * Check if email exists
 */
export async function emailExists(email: string): Promise<boolean> {
  await connectDB();
  const count = await Admin.countDocuments({ email: email.toLowerCase() });
  return count > 0;
}


----- lib\db\queries\cities.ts -----

// src/lib/db/queries/cities.ts

/**
 * SOLID - Single Responsibility Principle (SRP)
 * City data access functions ONLY
 */

import { connectDB } from "../mongodb";
import City from "@/models/City";
import Location from "@/models/Location";

/**
 * Get all cities (active and inactive)
 */
export async function getAllCities() {
  await connectDB();
  return City.find().populate("locations", "name").sort({ cityName: 1 }).lean();
}

/**
 * Get only active cities
 */
export async function getActiveCities() {
  await connectDB();
  return City.find({ active: true })
    .populate("locations", "name")
    .sort({ cityName: 1 })
    .lean();
}

/**
 * Get city by ID
 */
export async function getCityById(id: string) {
  await connectDB();
  return City.findById(id).populate("locations", "name address").lean();
}

/**
 * Create new city
 */
export async function createCity(data: {
  cityName: string;
  region: string;
  country: string;
  timezone: string;
}) {
  await connectDB();

  const city = await City.create({
    ...data,
    active: true,
  });

  return city.toObject();
}

/**
 * Update city
 */
export async function updateCity(
  id: string,
  data: {
    cityName?: string;
    region?: string;
    country?: string;
    timezone?: string;
    active?: boolean;
  }
) {
  await connectDB();

  return City.findByIdAndUpdate(id, data, { new: true }).lean();
}

/**
 * Delete city (hard delete)
 */
export async function deleteCity(id: string) {
  await connectDB();
  return City.findByIdAndDelete(id);
}

/**
 * Check if city name exists
 */
export async function cityNameExists(
  cityName: string,
  region: string,
  country: string,
  excludeId?: string
) {
  await connectDB();

  const query: any = { cityName, region, country };
  if (excludeId) {
    query._id = { $ne: excludeId };
  }

  const count = await City.countDocuments(query);
  return count > 0;
}


----- lib\db\queries\dashboard.ts -----

// src/lib/db/queries/dashboard.ts

/**
 * SOLID - Single Responsibility Principle (SRP)
 * Dashboard statistics queries ONLY
 */

import { connectDB } from "../mongodb";
import Division from "@/models/Division";
import Team from "@/models/Team";
import Player from "@/models/Player";
import Game from "@/models/Game";

export async function getDashboardStats(locationIds: string[]) {
  await connectDB();

  const filter =
    locationIds.length > 0
      ? { location: { $in: locationIds } }
      : {};

  const [divisions, teams, players, games] = await Promise.all([
    Division.countDocuments({ ...filter, active: true }),
    Team.countDocuments(filter),
    Player.countDocuments({ division: { $exists: true } }),
    Game.countDocuments(filter),
  ]);

  return {
    divisions,
    teams,
    players,
    games,
  };
}

export async function getUpcomingGames(locationIds: string[]) {
  await connectDB();

  const filter =
    locationIds.length > 0
      ? { location: { $in: locationIds } }
      : {};

  return Game.find({
    ...filter,
    date: { $gte: new Date() },
    status: false,
  })
    .populate("homeTeam", "teamName")
    .populate("awayTeam", "teamName")
    .sort({ date: 1 })
    .limit(5)
    .lean();
}


----- lib\db\queries\divisions.ts -----

// src/lib/db/queries/divisions.ts

/**
 * SOLID - Single Responsibility Principle (SRP)
 * Division data access functions ONLY
 */

import { PopulatedDivision } from "@/types/division";
import { connectDB } from "../mongodb";
import Division from "@/models/Division";
import Team from "@/models/Team";
import Player from "@/models/Player";

/**
 * Get divisions with pagination and filters
 */
export async function getDivisions({
  page = 1,
  limit = 12,
  activeFilter = "all",
  locationId,
  levelId,
  day,
  search,
}: {
  page?: number;
  limit?: number;
  activeFilter?: "all" | "active" | "inactive" | "registration";
  locationId?: string;
  levelId?: string;
  day?: string;
  search?: string;
}) {
  await connectDB();

  const skip = (page - 1) * limit;

  // Build filter
  const filter: any = {};

  if (activeFilter === "active") filter.active = true;
  if (activeFilter === "inactive") filter.active = false;
  if (activeFilter === "registration") filter.register = true;
  if (locationId) filter.location = locationId;

  if (levelId) filter.level = levelId;
  if (day) filter.day = day;
  if (search) filter.divisionName = { $regex: search, $options: "i" };

  // Get divisions and total count in parallel
  const [divisions, total] = await Promise.all([
    Division.find(filter)
      .populate("location")
      .populate("level")
      .sort({ startDate: -1 }) // Latest first
      .skip(skip)
      .limit(limit)
      .lean<PopulatedDivision[]>(), // force the result shape
    Division.countDocuments(filter),
  ]);

  // Get all division IDs for batch querying
  const divisionIds = divisions.map((d) => d._id);

  // Batch query for team counts - single query instead of N queries
  const teamCounts = await Team.aggregate([
    { $match: { division: { $in: divisionIds } } },
    { $group: { _id: "$division", count: { $sum: 1 } } },
  ]);

  // Batch query for free agent counts - single query instead of 2N queries
  const freeAgentCounts = await Player.aggregate([
    {
      $match: {
        division: { $in: divisionIds },
        freeAgent: true,
      },
    },
    {
      $group: {
        _id: "$division",
        total: { $sum: 1 },
        withTeam: {
          $sum: {
            $cond: [{ $ne: ["$team", null] }, 1, 0],
          },
        },
        withoutTeam: {
          $sum: {
            $cond: [{ $eq: ["$team", null] }, 1, 0],
          },
        },
      },
    },
  ]);

  // Create lookup maps for O(1) access
  const teamCountMap = new Map(
    teamCounts.map((tc) => [tc._id.toString(), tc.count])
  );
  const freeAgentCountMap = new Map(
    freeAgentCounts.map((fc) => [
      fc._id.toString(),
      { total: fc.total, withTeam: fc.withTeam, withoutTeam: fc.withoutTeam },
    ])
  );

  // Add counts to divisions (no more queries, just map lookups)
  const divisionsWithCounts = divisions.map((division) => {
    const divisionId = division._id.toString();
    return {
      ...division,
      teamCount: teamCountMap.get(divisionId) || 0,
      freeAgentCounts: freeAgentCountMap.get(divisionId) || {
        total: 0,
        withTeam: 0,
        withoutTeam: 0,
      },
    };
  });

  return {
    divisions: divisionsWithCounts,
    pagination: {
      total,
      page,
      limit,
      totalPages: Math.ceil(total / limit),
    },
  };
}

/**
 * Get division by ID
 */
export async function getDivisionById(
  id: string
): Promise<PopulatedDivision | null> {
  await connectDB();
  return Division.findById(id)
    .populate("city", "cityName region")
    .populate("location", "name")
    .populate("level", "name grade")
    .populate("prices.earlyBird")
    .populate("prices.regular")
    .populate("prices.installment")
    .populate("prices.regularInstallment")
    .populate("prices.firstInstallment")
    .populate("prices.free")
    .lean() as Promise<PopulatedDivision | null>;
}

/**
 * Create new division
 */
export async function createDivision(data: {
  divisionName: string;
  description: string;
  city: string;
  location: string;
  level: string;
  day: string;
  startDate?: string;
  startTime?: string;
  endTime?: string;
  prices: {
    earlyBird: string;
    regular: string;
    installment: string;
    regularInstallment: string;
    firstInstallment: string;
    free: string;
  };
  active: boolean;
  register: boolean;
}) {
  await connectDB();

  const division = await Division.create({
    ...data,
    startDate: data.startDate ? new Date(data.startDate) : undefined,
  });

  return division.toObject();
}

/**
 * Update division
 */
export async function updateDivision(
  id: string,
  data: {
    divisionName?: string;
    description?: string;
    location?: string;
    level?: string;
    day?: string;
    startDate?: string;
    startTime?: string;
    endTime?: string;
    active?: boolean;
    register?: boolean;
  }
) {
  await connectDB();

  const updateData: any = { ...data };
  if (data.startDate) {
    updateData.startDate = new Date(data.startDate);
  }

  return Division.findByIdAndUpdate(id, updateData, { new: true }).lean();
}

/**
 * Check for location conflicts
 */
export async function checkLocationConflict(
  locationId: string,
  day: string,
  startTime: string,
  endTime: string,
  excludeDivisionId?: string
): Promise<{ hasConflict: boolean; conflictingDivision?: any }> {
  await connectDB();

  const query: any = {
    location: locationId,
    day,
    startTime: { $exists: true },
    endTime: { $exists: true },
  };

  if (excludeDivisionId) {
    query._id = { $ne: excludeDivisionId };
  }

  const divisions = await Division.find(query)
    .select("divisionName startTime endTime")
    .lean();

  // Check for time overlap
  for (const div of divisions) {
    if (timeOverlaps(startTime, endTime, div.startTime, div.endTime)) {
      return {
        hasConflict: true,
        conflictingDivision: div,
      };
    }
  }

  return { hasConflict: false };
}

/**
 * Helper: Check if two time ranges overlap
 */
function timeOverlaps(
  start1: string,
  end1: string,
  start2: string,
  end2: string
): boolean {
  const s1 = parseTime(start1);
  const e1 = parseTime(end1);
  const s2 = parseTime(start2);
  const e2 = parseTime(end2);

  return s1 < e2 && e1 > s2;
}

/**
 * Helper: Convert time string to minutes
 */
function parseTime(time: string): number {
  const [timePart, period] = time.split(" ");
  let [hours, minutes] = timePart.split(":").map(Number);

  if (period === "PM" && hours !== 12) hours += 12;
  if (period === "AM" && hours === 12) hours = 0;

  return hours * 60 + minutes;
}

/**
 * Get team count for division
 */
export async function getDivisionTeamCount(
  divisionId: string
): Promise<number> {
  await connectDB();

  const Team = (await import("@/models/Team")).default;
  return Team.countDocuments({ division: divisionId });
}

/**
 * Get free agent counts for a division
 */
export async function getDivisionFreeAgentCounts(divisionId: string): Promise<{
  withTeam: number;
  withoutTeam: number;
  total: number;
}> {
  await connectDB();

  const Player = (await import("@/models/Player")).default;

  const [withTeam, withoutTeam] = await Promise.all([
    Player.countDocuments({
      division: divisionId,
      freeAgent: true,
      team: { $exists: true, $ne: null },
    }),
    Player.countDocuments({
      division: divisionId,
      freeAgent: true,
      $or: [{ team: { $exists: false } }, { team: null }],
    }),
  ]);

  return {
    withTeam,
    withoutTeam,
    total: withTeam + withoutTeam,
  };
}


----- lib\db\queries\jerseys.ts -----

// src/lib/db/queries/jerseys.ts

/**
 * SOLID - Single Responsibility Principle (SRP)
 * Jersey management data access functions ONLY
 */

import { connectDB } from "../mongodb";
import Team from "@/models/Team";
import Division from "@/models/Division";
import Player from "@/models/Player";
import Location from "@/models/Location";

/**
 * Get jersey overview data for dashboard
 * Filtered by location(s) accessible to the user
 */
export async function getJerseyOverview(locationIds: string[]) {
  await connectDB();

  const filter =
    locationIds.length > 0 ? { location: { $in: locationIds } } : {};

  // Get all divisions with their teams
  const divisions = await Division.find(filter)
    .populate("location", "name")
    .populate("level", "name")
    .populate({
      path: "teams",
      populate: {
        path: "players",
        select: "jerseyNumber jerseySize paymentStatus user",
      },
    })
    .sort({ day: 1, divisionName: 1 })
    .lean();

  return divisions;
}

/**
 * Get divisions grouped by location for jersey management
 * Only returns active or register divisions
 */
export async function getDivisionsByLocation(locationIds: string[]) {
  await connectDB();

  const filter: any = {
    $or: [{ active: true }, { register: true }],
  };

  if (locationIds.length > 0) {
    filter.location = { $in: locationIds };
  }

  const divisions = await Division.find(filter)
    .populate("location", "name city")
    .populate("level", "name grade")
    .select("divisionName location day level jerseyDeadline startDate teams")
    .sort({ location: 1, day: 1 })
    .lean();

  // Get team counts - optimized at database level
  const divisionIds = divisions.map((d) => d._id);
  const teamCounts = await Team.aggregate([
    { $match: { division: { $in: divisionIds } } },
    { $group: { _id: "$division", count: { $sum: 1 } } },
  ]);

  const teamCountMap = new Map(
    teamCounts.map((tc) => [tc._id.toString(), tc.count])
  );

  return divisions.map((div) => {
    // Calculate jersey deadline: 28 days before startDate
    let jerseyDeadline = div.jerseyDeadline;
    if (!jerseyDeadline && div.startDate) {
      const startDate = new Date(div.startDate);
      jerseyDeadline = new Date(startDate);
      jerseyDeadline.setDate(jerseyDeadline.getDate() - 28);
    }

    return {
      ...div,
      jerseyDeadline,
      teamCount: teamCountMap.get(div._id.toString()) || 0,
    };
  });
}

/**
 * Get teams with jersey details for a division
 */
export async function getTeamsWithJerseyDetails(divisionId: string) {
  await connectDB();

  const teams = await Team.find({ division: divisionId })
    .populate({
      path: "players",
      select:
        "playerName jerseyNumber jerseySize jerseyName user paymentStatus",
    })
    .select(
      "teamName primaryColor secondaryColor tertiaryColor isCustomJersey jerseyEdition jerseyImages players genericJerseys"
    )
    .lean();

  return teams;
}

/**
 * Get single team with full jersey details
 */
export async function getTeamJerseyDetails(teamId: string) {
  await connectDB();

  const PaymentMethod = (await import("@/models/PaymentMethod")).default;

  const team = await Team.findById(teamId)
    .populate({
      path: "division",
      select: "divisionName day jerseyDeadline startDate",
      populate: [
        { path: "location", select: "name" },
        { path: "level", select: "name" },
      ],
    })
    .populate({
      path: "players",
      select:
        "playerName jerseyNumber jerseySize jerseyName user paymentStatus paymentMethods",
    })
    .lean();

  if (team && team.division) {
    // Calculate jersey deadline: 28 days before startDate
    let jerseyDeadline = (team.division as any).jerseyDeadline;
    const startDate = (team.division as any).startDate;

    if (!jerseyDeadline && startDate) {
      const start = new Date(startDate);
      jerseyDeadline = new Date(start);
      jerseyDeadline.setDate(jerseyDeadline.getDate() - 28);
      (team.division as any).jerseyDeadline = jerseyDeadline;
    }
  }

  // Calculate actual payment status for each player
  if (team && team.players) {
    const playerIds = (team.players as any[]).map((p) => p._id);

    // Get all payment methods for these players (any status)
    const paymentMethods = await PaymentMethod.find({
      player: { $in: playerIds },
    })
      .select("player")
      .lean();

    // Create a map of players who have payment methods
    const paidPlayerIds = new Set(
      paymentMethods.map((pm) => pm.player.toString())
    );

    // Update payment status for each player
    (team.players as any[]).forEach((player) => {
      const hasPaid = paidPlayerIds.has(player._id.toString());
      player.paymentStatus = {
        ...player.paymentStatus,
        hasPaid,
      };
    });
  }

  return team;
}

/**
 * Update team jersey design (edition)
 */
export async function updateTeamJerseyEdition(
  teamId: string,
  data: {
    jerseyEdition: string;
    primaryColor: string;
    secondaryColor: string;
    tertiaryColor: string;
  }
) {
  await connectDB();

  return Team.findByIdAndUpdate(
    teamId,
    {
      isCustomJersey: false,
      jerseyImages: [],
      jerseyEdition: data.jerseyEdition,
      primaryColor: data.primaryColor,
      secondaryColor: data.secondaryColor,
      tertiaryColor: data.tertiaryColor,
    },
    { new: true }
  ).lean();
}

/**
 * Update team jersey design (custom image)
 */
export async function updateTeamJerseyCustom(
  teamId: string,
  imageData: {
    id: string;
    url: string;
    publicId: string;
  }
) {
  await connectDB();

  return Team.findByIdAndUpdate(
    teamId,
    {
      isCustomJersey: true,
      jerseyEdition: null,
      primaryColor: null,
      secondaryColor: null,
      tertiaryColor: null,
      jerseyImages: [imageData],
    },
    { new: true }
  ).lean();
}

/**
 * Remove team jersey design
 */
export async function removeTeamJerseyDesign(teamId: string) {
  await connectDB();

  return Team.findByIdAndUpdate(
    teamId,
    {
      isCustomJersey: false,
      jerseyEdition: null,
      primaryColor: null,
      secondaryColor: null,
      tertiaryColor: null,
      jerseyImages: [],
    },
    { new: true }
  ).lean();
}

/**
 * Update player jersey details
 */
export async function updatePlayerJerseyDetails(
  playerId: string,
  data: {
    jerseyNumber?: number | null;
    jerseySize?: string | null;
    jerseyName?: string | null;
  }
) {
  await connectDB();

  // Get the player's team
  const player = await Player.findById(playerId).select("team").lean();

  if (!player) {
    throw new Error("Player not found");
  }

  if (!player.team) {
    throw new Error("Player is not assigned to a team");
  }

  // Check for duplicate jersey number in the same team
  if (data.jerseyNumber !== null && data.jerseyNumber !== undefined) {
    const existingPlayer = await Player.findOne({
      team: player.team,
      jerseyNumber: data.jerseyNumber,
      _id: { $ne: playerId }, // Exclude current player
    }).lean();

    if (existingPlayer) {
      throw new Error(
        `Jersey number ${data.jerseyNumber} is already taken by another player on this team`
      );
    }

    // Also check generic jerseys
    const team = await Team.findById(player.team).select("genericJerseys").lean();
    if (team?.genericJerseys) {
      const duplicateGeneric = team.genericJerseys.find(
        (gj: any) => gj.jerseyNumber === data.jerseyNumber
      );
      if (duplicateGeneric) {
        throw new Error(
          `Jersey number ${data.jerseyNumber} is already taken by a generic jersey on this team`
        );
      }
    }
  }

  return Player.findByIdAndUpdate(playerId, data, { new: true }).lean();
}

/**
 * Add generic jersey to team
 */
export async function addGenericJersey(
  teamId: string,
  jerseyData: {
    jerseyNumber?: number;
    jerseySize?: string;
    jerseyName?: string;
  }
) {
  await connectDB();

  // Check for duplicate jersey number if provided
  if (jerseyData.jerseyNumber !== null && jerseyData.jerseyNumber !== undefined) {
    // Check against existing players
    const existingPlayer = await Player.findOne({
      team: teamId,
      jerseyNumber: jerseyData.jerseyNumber,
    }).lean();

    if (existingPlayer) {
      throw new Error(
        `Jersey number ${jerseyData.jerseyNumber} is already taken by player ${existingPlayer.playerName}`
      );
    }

    // Check against existing generic jerseys
    const team = await Team.findById(teamId).select("genericJerseys").lean();
    if (team?.genericJerseys) {
      const duplicateGeneric = team.genericJerseys.find(
        (gj: any) => gj.jerseyNumber === jerseyData.jerseyNumber
      );
      if (duplicateGeneric) {
        throw new Error(
          `Jersey number ${jerseyData.jerseyNumber} is already taken by another generic jersey`
        );
      }
    }
  }

  return Team.findByIdAndUpdate(
    teamId,
    {
      $push: { genericJerseys: jerseyData },
    },
    { new: true }
  ).lean();
}

/**
 * Update generic jersey
 */
export async function updateGenericJersey(
  teamId: string,
  genericIndex: number,
  jerseyData: {
    jerseyNumber?: number;
    jerseySize?: string;
    jerseyName?: string;
  }
) {
  await connectDB();

  // Check for duplicate jersey number if provided
  if (jerseyData.jerseyNumber !== null && jerseyData.jerseyNumber !== undefined) {
    // Check against existing players
    const existingPlayer = await Player.findOne({
      team: teamId,
      jerseyNumber: jerseyData.jerseyNumber,
    }).lean();

    if (existingPlayer) {
      throw new Error(
        `Jersey number ${jerseyData.jerseyNumber} is already taken by player ${existingPlayer.playerName}`
      );
    }

    // Check against other generic jerseys (excluding current one)
    const team = await Team.findById(teamId).select("genericJerseys").lean();
    if (team?.genericJerseys) {
      const duplicateGeneric = team.genericJerseys.find(
        (gj: any, idx: number) =>
          idx !== genericIndex && gj.jerseyNumber === jerseyData.jerseyNumber
      );
      if (duplicateGeneric) {
        throw new Error(
          `Jersey number ${jerseyData.jerseyNumber} is already taken by another generic jersey`
        );
      }
    }
  }

  const updateKey = (
    Object.keys(jerseyData) as Array<keyof typeof jerseyData>
  ).reduce((acc, key) => {
    acc[`genericJerseys.${genericIndex}.${key}`] = jerseyData[key];
    return acc;
  }, {} as any);

  return Team.findByIdAndUpdate(
    teamId,
    { $set: updateKey },
    { new: true }
  ).lean();
}

/**
 * Remove generic jersey from team
 */
export async function removeGenericJersey(
  teamId: string,
  genericIndex: number
) {
  await connectDB();

  const team = await Team.findById(teamId);
  if (!team) throw new Error("Team not found");

  team.genericJerseys.splice(genericIndex, 1);
  await team.save();

  return team.toObject();
}

/**
 * Get jersey statistics for dashboard
 * Only counts teams in active or register divisions
 */
export async function getJerseyStats(locationIds: string[]) {
  await connectDB();

  const filter: any = {
    $or: [{ active: true }, { register: true }],
  };

  if (locationIds.length > 0) {
    filter.location = { $in: locationIds };
  }

  const divisions = await Division.find(filter).select("_id").lean();
  const divisionIds = divisions.map((d) => d._id);

  if (!divisionIds.length) {
    return {
      totalTeams: 0,
      teamsWithDesign: 0,
      teamsWithoutDesign: 0,
      completeTeams: 0,
    };
  }

  const teams = await Team.find({ division: { $in: divisionIds } })
    .populate("players", "jerseyNumber jerseySize")
    .lean();

  const totalTeams = teams.length;

  const teamsWithDesign = teams.filter(
    (t) => t.isCustomJersey || t.jerseyEdition
  ).length;

  const teamsWithoutDesign = teams.filter(
    (t) => !t.isCustomJersey && !t.jerseyEdition
  ).length;

  const completeTeams = teams.filter((t) => {
    const hasDesign = t.isCustomJersey || t.jerseyEdition;
    const allPlayersReady =
      t.players.length > 0 &&
      t.players.every(
        (p: any) => p.jerseyNumber != null && p.jerseySize != null
      );
    return hasDesign && allPlayersReady;
  }).length;

  return {
    totalTeams,
    teamsWithDesign,
    teamsWithoutDesign,
    completeTeams,
  };
}


----- lib\db\queries\levels.ts -----

// src/lib/db/queries/levels.ts

/**
 * SOLID - Single Responsibility Principle (SRP)
 * Level data access functions ONLY
 */

import { connectDB } from "../mongodb";
import Level from "@/models/Level";

/**
 * Get all levels (sorted by grade ascending - 1 is highest)
 */
export async function getAllLevels(activeFilter?: string | null, activeOnly?: boolean) {
  await connectDB();

  const filter: any = {};

  if (activeOnly) {
    // For division forms - only show active levels
    filter.active = true;
  } else if (activeFilter === "active") {
    filter.active = true;
  } else if (activeFilter === "inactive") {
    filter.active = false;
  }
  // If activeFilter is null/undefined, show all

  return Level.find(filter).sort({ grade: 1 }).lean();
}

/**
 * Get level by ID
 */
export async function getLevelById(id: string) {
  await connectDB();
  return Level.findById(id).lean();
}

/**
 * Create new level
 */
export async function createLevel(data: { name: string; grade: number; active?: boolean }) {
  await connectDB();

  const level = await Level.create(data);

  return level.toObject();
}

/**
 * Update level
 */
export async function updateLevel(
  id: string,
  data: {
    name?: string;
    grade?: number;
    active?: boolean;
  }
) {
  await connectDB();
  return Level.findByIdAndUpdate(id, data, { new: true }).lean();
}

/**
 * Check if level name exists
 */
export async function levelNameExists(
  name: string,
  excludeId?: string
): Promise<boolean> {
  await connectDB();

  const query: any = { name };
  if (excludeId) {
    query._id = { $ne: excludeId };
  }

  const count = await Level.countDocuments(query);
  return count > 0;
}

/**
 * Check if grade exists
 */
export async function gradeExists(
  grade: number,
  excludeId?: string
): Promise<boolean> {
  await connectDB();

  const query: any = { grade };
  if (excludeId) {
    query._id = { $ne: excludeId };
  }

  const count = await Level.countDocuments(query);
  return count > 0;
}


----- lib\db\queries\locations.ts -----

// src/lib/db/queries/locations.ts

/**
 * SOLID - Single Responsibility Principle (SRP)
 * Location data access functions ONLY
 */

import { connectDB } from "../mongodb";
import Location from "@/models/Location";
import Division from "@/models/Division";
import { LeanLocation } from "@/types/location";

/**
 * Get all locations
 */
export async function getAllLocations() {
  await connectDB();
  return Location.find().sort({ name: 1 }).lean();
}

/**
 * Get locations by city
 */
export async function getLocationsByCity(cityId: string) {
  await connectDB();

  // First get city to find its locations
  const City = (await import("@/models/City")).default;
  const city = await City.findById(cityId)
    .populate("locations")
    .lean<{ locations: LeanLocation[] }>();

  if (!city) return [];

  return city.locations || [];
}

/**
 * Get location by ID
 */
export async function getLocationById(id: string) {
  await connectDB();
  return Location.findById(id).lean();
}

/**
 * Create new location
 */
export async function createLocation(data: {
  name: string;
  address: string;
  city: string;
  coordinates?: {
    latitude?: number;
    longitude?: number;
  };
}) {
  await connectDB();

  const location = await Location.create(data);

  // Add location to city's locations array
  const City = (await import("@/models/City")).default;
  await City.findByIdAndUpdate(data.city, {
    $push: { locations: location._id },
  });

  return location.toObject();
}

/**
 * Update location
 */
export async function updateLocation(
  id: string,
  data: {
    name?: string;
    address?: string;
    coordinates?: {
      latitude?: number;
      longitude?: number;
    };
  }
) {
  await connectDB();
  return Location.findByIdAndUpdate(id, data, { new: true }).lean();
}

/**
 * Delete location
 */
export async function deleteLocation(id: string) {
  await connectDB();

  // Remove from city's locations array
  const location = await Location.findById(id);
  if (location) {
    const City = (await import("@/models/City")).default;
    await City.updateMany({ locations: id }, { $pull: { locations: id } });
  }

  return Location.findByIdAndDelete(id);
}

/**
 * Check if location has active divisions
 */
export async function locationHasActiveDivisions(
  locationId: string
): Promise<boolean> {
  await connectDB();
  const count = await Division.countDocuments({
    location: locationId,
    active: true,
  });
  return count > 0;
}

/**
 * Get division count for location
 */
export async function getLocationDivisionCount(
  locationId: string
): Promise<number> {
  await connectDB();
  return Division.countDocuments({ location: locationId });
}


----- lib\db\queries\payments.ts -----

// src/lib/db/queries/payments.ts

/**
 * SOLID - Single Responsibility Principle (SRP)
 * Payment data access functions ONLY
 */

import { connectDB } from "../mongodb";
import Player from "@/models/Player";
import PaymentMethod from "@/models/PaymentMethod";
import Division from "@/models/Division";
import Location from "@/models/Location";
import Team from "@/models/Team";

/**
 * Get payment status for a player
 */
export async function getPlayerPaymentStatus(playerId: string) {
  await connectDB();

  const player = await Player.findById(playerId)
    .populate("paymentMethods")
    .lean();

  if (!player || !player.paymentMethods || player.paymentMethods.length === 0) {
    return { status: "unpaid", paymentMethod: null };
  }

  const paymentMethod = player.paymentMethods[0] as any;

  if (paymentMethod.status === "COMPLETED") {
    return { status: "paid", paymentMethod };
  }

  if (paymentMethod.paymentType === "INSTALLMENTS") {
    const subscriptionPayments =
      paymentMethod.installments?.subscriptionPayments || [];
    const failedCount = subscriptionPayments.filter(
      (p: any) => p.status === "failed"
    ).length;

    if (failedCount === 0) return { status: "on-track", paymentMethod };
    if (failedCount >= 3) return { status: "critical", paymentMethod };
    return { status: "has-issues", paymentMethod };
  }

  return { status: "unpaid", paymentMethod };
}

/**
 * Get all players with payment status for dashboard
 * Uses aggregation pipeline for efficient DB-level filtering and pagination
 */
export async function getPlayersWithPaymentStatus({
  page = 1,
  limit = 12,
  locationId,
  divisionId,
  teamId,
  paymentStatusFilter = "all",
  search,
}: {
  page?: number;
  limit?: number;
  locationId?: string;
  divisionId?: string;
  teamId?: string;
  paymentStatusFilter?: string;
  search?: string;
}) {
  await connectDB();

  // Build filter for active divisions only
  const divisionFilter: any = { $or: [{ active: true }, { register: true }] };
  if (locationId) divisionFilter.location = locationId;
  if (divisionId) divisionFilter._id = divisionId;

  const divisions = await Division.find(divisionFilter).select("_id");
  const divisionIds = divisions.map((d) => d._id);

  if (!divisionIds.length) {
    return {
      players: [],
      pagination: { total: 0, page, limit, totalPages: 0 },
    };
  }

  // Build base match filter
  const matchFilter: any = { division: { $in: divisionIds } };
  if (teamId) matchFilter.team = teamId;

  if (search) {
    const searchRegex = new RegExp(search, "i");
    const matchingTeams = await Team.find({
      teamName: { $regex: searchRegex },
    }).select("_id");

    matchFilter.$or = [
      { playerName: { $regex: searchRegex } },
      { team: { $in: matchingTeams.map((t) => t._id) } },
    ];
  }

  // Build aggregation pipeline
  const pipeline: any[] = [
    { $match: matchFilter },
    {
      $lookup: {
        from: "paymentmethods",
        localField: "_id",
        foreignField: "player",
        as: "paymentMethods",
      },
    },
    {
      $addFields: {
        paymentMethod: { $arrayElemAt: ["$paymentMethods", 0] },
      },
    },
    {
      $addFields: {
        paymentStatus: {
          $cond: {
            if: { $eq: [{ $size: "$paymentMethods" }, 0] },
            then: "unpaid",
            else: {
              $cond: {
                if: { $eq: ["$paymentMethod.status", "COMPLETED"] },
                then: "paid",
                else: {
                  $cond: {
                    if: { $eq: ["$paymentMethod.paymentType", "INSTALLMENTS"] },
                    then: {
                      $let: {
                        vars: {
                          failedCount: {
                            $size: {
                              $filter: {
                                input: {
                                  $ifNull: [
                                    "$paymentMethod.installments.subscriptionPayments",
                                    [],
                                  ],
                                },
                                cond: { $eq: ["$$this.status", "failed"] },
                              },
                            },
                          },
                        },
                        in: {
                          $cond: {
                            if: { $eq: ["$$failedCount", 0] },
                            then: "on-track",
                            else: {
                              $cond: {
                                if: { $gte: ["$$failedCount", 3] },
                                then: "critical",
                                else: "has-issues",
                              },
                            },
                          },
                        },
                      },
                    },
                    else: "unpaid",
                  },
                },
              },
            },
          },
        },
      },
    },
  ];

  // Add payment status filter if needed
  if (paymentStatusFilter !== "all") {
    pipeline.push({ $match: { paymentStatus: paymentStatusFilter } });
  }

  // Get total count before pagination
  const countPipeline = [...pipeline, { $count: "total" }];
  const countResult = await Player.aggregate(countPipeline);
  const total = countResult[0]?.total || 0;

  // Add sorting and pagination
  pipeline.push(
    { $sort: { createdAt: -1 } },
    { $skip: (page - 1) * limit },
    { $limit: limit }
  );

  // Execute aggregation
  const players = await Player.aggregate(pipeline);

  // Populate references
  await Player.populate(players, [
    {
      path: "division",
      populate: [
        { path: "location", select: "name" },
        { path: "city", select: "cityName" },
      ],
    },
    { path: "team", select: "teamName" },
    { path: "user", select: "name email phoneNumber" },
  ]);

  return {
    players,
    pagination: {
      total,
      page,
      limit,
      totalPages: Math.ceil(total / limit),
    },
  };
}


----- lib\db\queries\players.ts -----

// src/lib/db/queries/players.ts

/**
 * SOLID - Single Responsibility Principle (SRP)
 * Player data access functions ONLY
 */
// src/lib/db/queries/players.ts

/**
 * SOLID - Single Responsibility Principle (SRP)
 * Player data access functions ONLY
 */

import { connectDB } from "../mongodb";
import Player from "@/models/Player";
import Team from "@/models/Team";
import Division from "@/models/Division";
import Location from "@/models/Location";

/**
 * Calculate player payment status with installment details
 */
async function getPlayerPaymentStatus(playerId: string, divisionId: string) {
  await connectDB();

  const PaymentMethod = (await import("@/models/PaymentMethod")).default;

  const payment = await PaymentMethod.findOne({
    player: playerId,
    division: divisionId,
  }).lean();

  if (!payment) {
    return {
      status: "unpaid",
      type: null,
      installmentProgress: null,
    };
  }

  if (payment.status === "COMPLETED") {
    return {
      status: "paid",
      type: payment.paymentType,
      installmentProgress: null,
    };
  }

  if (
    payment.paymentType === "INSTALLMENTS" &&
    payment.status === "IN_PROGRESS"
  ) {
    // Build installment progress (7 weeks)
    const totalWeeks = 7;
    const progress = Array(totalWeeks)
      .fill("pending")
      .map((_, index) => {
        const weekNumber = index + 1;
        const weekPayment = payment.installments?.subscriptionPayments?.find(
          (p: any) => p.paymentNumber === weekNumber
        );

        if (!weekPayment)
          return { week: weekNumber, status: "pending" as const };

        return {
          week: weekNumber,
          status:
            weekPayment.status === "succeeded"
              ? ("succeeded" as const)
              : ("failed" as const),
          amountPaid: weekPayment.amountPaid,
          dueDate: weekPayment.dueDate,
        };
      });

    return {
      status: "in_progress",
      type: "INSTALLMENTS",
      installmentProgress: progress,
      remainingBalance: payment.installments?.remainingBalance,
      nextPaymentDate: payment.installments?.nextPaymentDate,
    };
  }

  return {
    status: "unpaid",
    type: payment.paymentType,
    installmentProgress: null,
  };
}

/**
 * Get players with filters and payment status
 */
export async function getPlayers({
  page = 1,
  limit = 12,
  divisionId,
  teamId,
  locationId,
  freeAgentsOnly = false,
  hasUserAccount,
  search,
  activeFilter = "active",
}: {
  page?: number;
  limit?: number;
  divisionId?: string;
  locationId?: string;
  teamId?: string;
  freeAgentsOnly?: boolean;
  hasUserAccount?: boolean;
  search?: string;
  activeFilter?: "active" | "inactive" | "all";
}) {
  await connectDB();

  // --- Step 1: Get valid divisions based on active filter ---
  const divisionFilter: any = {};

  if (activeFilter === "active") {
    divisionFilter.$or = [{ active: true }, { register: true }];
  } else if (activeFilter === "inactive") {
    divisionFilter.active = false;
    divisionFilter.register = false;
  }
  // If "all", no active/register filter

  if (divisionId) divisionFilter._id = divisionId;
  if (locationId) divisionFilter.location = locationId;

  const validDivisions = await Division.find(divisionFilter).select("_id");
  const validDivisionIds = validDivisions.map((d) => d._id);

  if (!validDivisionIds.length) {
    // No divisions match, return empty result
    return {
      players: [],
      pagination: { total: 0, page, limit, totalPages: 0 },
    };
  }

  // --- Step 2: Build player filter ---
  const filter: any = {
    division: { $in: validDivisionIds },
  };

  if (teamId) filter.team = teamId;

  if (freeAgentsOnly) filter.freeAgent = true; // filter by freeAgent boolean, includes both with and without teams

  if (hasUserAccount !== undefined) {
    filter.user = hasUserAccount
      ? { $exists: true, $ne: null }
      : { $in: [null] };
  }

  if (search) {
    const searchRegex = new RegExp(search, "i");

    // find divisions that match search
    const matchingDivisions = await Division.find({
      divisionName: { $regex: searchRegex },
    }).select("_id");

    // find teams that match search
    const matchingTeams = await Team.find({
      teamName: { $regex: searchRegex },
    }).select("_id");

    // find locations that match search
    const matchingLocations = await Location.find({
      name: { $regex: searchRegex },
    }).select("_id");

    filter.$or = [
      { playerName: { $regex: searchRegex } },
      { "user.email": { $regex: searchRegex } },
      { team: { $in: matchingTeams.map((t) => t._id) } },
      { division: { $in: matchingDivisions.map((d) => d._id) } },
      {
        division: {
          $in: matchingDivisions
            .filter((d) =>
              matchingLocations.some((l) => l._id.equals(d.location))
            )
            .map((d) => d._id),
        },
      },
    ];
  }

  const skip = (page - 1) * limit;

  // --- Step 3: Query players with pagination ---
  const [players, total] = await Promise.all([
    Player.find(filter)
      .populate("team", "teamName teamCode")
      .populate({
        path: "division",
        select: "divisionName location city",
        populate: [
          { path: "location", select: "name" },
          { path: "city", select: "cityName" },
        ],
      })
      .populate("user", "name email")
      .sort({ createdAt: -1 })
      .skip(skip)
      .limit(limit)
      .lean(),
    Player.countDocuments(filter),
  ]);

  // --- Step 4: Return result with pagination ---
  return {
    players,
    pagination: {
      total,
      page,
      limit,
      totalPages: Math.ceil(total / limit),
    },
  };
}

/**
 * Get free agents in a division
 */
export async function getFreeAgentsByDivision(divisionId: string) {
  await connectDB();

  return Player.find({
    division: divisionId,
    $or: [{ team: { $exists: false } }, { team: null }],
  })
    .select("playerName jerseyNumber user")
    .lean();
}

/**
 * Get all free agents in a division with their current team status
 */
export async function getDivisionFreeAgents(divisionId: string) {
  await connectDB();

  const players = await Player.find({
    division: divisionId,
    freeAgent: true,
  })
    .select("playerName team user instagram jerseyNumber createdAt freeAgent")
    .populate("team", "teamName teamCode")
    .populate("user", "name email phoneNumber")
    .sort({ playerName: 1 })
    .lean();

  return players;
}

/**
 * Get player by ID
 */
export async function getPlayerById(id: string) {
  await connectDB();

  const player = await Player.findById(id)
    .populate("team", "teamName teamCode")
    .populate({
      path: "division",
      populate: [
        { path: "location", select: "name" },
        { path: "city", select: "cityName region" },
        { path: "level", select: "name grade" },
      ],
    })
    .populate("user", "name email phoneNumber instagram")
    .lean();

  if (!player) return null;

  // Get payment status
  const divisionId = (player.division as any)?._id || player.division;
  const paymentInfo = await getPlayerPaymentStatus(id, divisionId.toString());

  return {
    ...player,
    paymentStatus: paymentInfo.status,
    paymentType: paymentInfo.type,
    installmentProgress: paymentInfo.installmentProgress,
    remainingBalance: paymentInfo.remainingBalance,
    nextPaymentDate: paymentInfo.nextPaymentDate,
  };
}

/**
 * Create new player
 */
export async function createPlayer(data: {
  playerName: string;
  division: string;
  team?: string;
  jerseyNumber?: number | null;
  jerseySize?: string;
  jerseyName?: string;
  instagram?: string;
  user?: string;
}) {
  await connectDB();

  // Filter out null values before creating
  const cleanData: any = {
    playerName: data.playerName,
    division: data.division,
  };

  if (data.team) cleanData.team = data.team;
  if (data.jerseyNumber !== null && data.jerseyNumber !== undefined) {
    cleanData.jerseyNumber = data.jerseyNumber;
  }
  if (data.jerseySize) cleanData.jerseySize = data.jerseySize;
  if (data.jerseyName) cleanData.jerseyName = data.jerseyName;
  if (data.instagram) cleanData.instagram = data.instagram;
  if (data.user) cleanData.user = data.user;

  const player = await Player.create(data);

  // If team specified, add player to team's players array
  if (data.team) {
    await Team.findByIdAndUpdate(data.team, {
      $addToSet: { players: player._id },
    });
  }

  return player.toObject();
}

/**
 * Update player
 */
export async function updatePlayer(
  id: string,
  data: {
    playerName?: string;
    division?: string;
    team?: string | null;
    jerseyNumber?: number | null;
    jerseySize?: string | null;
    jerseyName?: string | null;
    instagram?: string | null;
    user?: string | null;
  }
) {
  await connectDB();

  const player = await Player.findById(id);

  if (!player) {
    throw new Error("Player not found");
  }

  // Handle team changes
  if (data.team !== undefined) {
    const oldTeam = player.team;

    // Remove from old team if exists
    if (oldTeam) {
      await Team.findByIdAndUpdate(oldTeam, {
        $pull: { players: player._id },
      });
    }

    // Add to new team if specified
    if (data.team) {
      await Team.findByIdAndUpdate(data.team, {
        $addToSet: { players: player._id },
      });
    }
  }

  // Update player
  Object.assign(player, data);
  await player.save();

  return player.toObject();
}

/**
 * Delete player
 */
export async function deletePlayer(id: string) {
  await connectDB();

  const player = await Player.findById(id);

  if (!player) {
    throw new Error("Player not found");
  }

  // Check if player has payment records
  const PaymentMethod = (await import("@/models/PaymentMethod")).default;
  const hasPayments = await PaymentMethod.exists({ player: id });

  if (hasPayments) {
    throw new Error(
      "Cannot delete player with payment records. Archive instead."
    );
  }

  // Remove from team if assigned
  if (player.team) {
    await Team.findByIdAndUpdate(player.team, {
      $pull: { players: player._id },
    });
  }

  // Remove from user if linked
  if (player.user) {
    const User = (await import("@/models/User")).default;
    await User.findByIdAndUpdate(player.user, {
      $pull: { basketball: player._id },
    });
  }

  await Player.findByIdAndDelete(id);
}

/**
 * Add player to team
 */
export async function addPlayerToTeam(playerId: string, teamId: string) {
  await connectDB();

  const player = await Player.findById(playerId);

  if (!player) {
    throw new Error("Player not found");
  }

  // Remove from old team if exists
  if (player.team) {
    await Team.findByIdAndUpdate(player.team, {
      $pull: { players: playerId },
    });
  }

  // Update player's team
  await Player.findByIdAndUpdate(playerId, { team: teamId });

  // Add player to team's players array
  await Team.findByIdAndUpdate(teamId, {
    $addToSet: { players: playerId },
  });
}

/**
 * Remove player from team (make free agent)
 */
export async function removePlayerFromTeam(playerId: string, teamId: string) {
  await connectDB();

  // Remove team from player
  await Player.findByIdAndUpdate(playerId, { team: null });

  // Remove player from team's players array
  await Team.findByIdAndUpdate(teamId, {
    $pull: { players: playerId },
  });

  // If player was captain, remove captain assignment
  const team = await Team.findById(teamId);
  if (team?.teamCaptain?.toString() === playerId) {
    await Team.findByIdAndUpdate(teamId, { teamCaptain: null });
  }
}


----- lib\db\queries\prices.ts -----

// src/lib/db/queries/prices.ts

/**
 * SOLID - Single Responsibility Principle (SRP)
 * Price data access functions ONLY
 */

import { connectDB } from "../mongodb";
import Price from "@/models/Price";

/**
 * Get all prices (sorted by type, then amount)
 */
export async function getAllPrices() {
  await connectDB();
  return Price.find().sort({ type: 1, amount: 1 }).lean();
}

/**
 * Get prices by type
 */
export async function getPricesByType(type: string) {
  await connectDB();
  return Price.find({ type }).sort({ amount: 1 }).lean();
}

/**
 * Get price by ID
 */
export async function getPriceById(id: string) {
  await connectDB();
  return Price.findById(id).lean();
}

/**
 * Create new price
 */
export async function createPrice(data: {
  name: string;
  priceId: string;
  amount: number;
  type: string;
}) {
  await connectDB();

  const price = await Price.create(data);

  return price.toObject();
}

/**
 * Check if Stripe price ID exists
 */
export async function stripePriceIdExists(priceId: string): Promise<boolean> {
  await connectDB();

  const count = await Price.countDocuments({ priceId });
  return count > 0;
}

/**
 * Get division count using this price
 */
export async function getPriceDivisionCount(priceId: string): Promise<number> {
  await connectDB();

  const Division = (await import("@/models/Division")).default;

  const count = await Division.countDocuments({
    $or: [
      { "prices.earlyBird": priceId },
      { "prices.regular": priceId },
      { "prices.installment": priceId },
      { "prices.firstInstallment": priceId },
      { "prices.free": priceId },
    ],
  });

  return count;
}


----- lib\db\queries\teams.ts -----

// src/lib/db/queries/teams.ts

/**
 * SOLID - Single Responsibility Principle (SRP)
 * Team data access functions ONLY
 */

import { connectDB } from "../mongodb";
import Team from "@/models/Team";
import Division from "@/models/Division";
import Player from "@/models/Player";

/**
 * Get teams with pagination and filters
 */
export async function getTeams({
  page = 1,
  limit = 12,
  divisionId,
  locationId,
  search,
  viewMode = "card",
  activeFilter = "active",
  noCaptain = false,
  noPlayers = false,
}: {
  page?: number;
  limit?: number;
  divisionId?: string;
  locationId?: string;
  search?: string;
  viewMode?: "card" | "list";
  activeFilter?: "active" | "inactive" | "all";
  noCaptain?: boolean;
  noPlayers?: boolean;
}) {
  await connectDB();

  const skip = (page - 1) * limit;

  // --- Step 1: Get valid divisions based on active filter ---
  const divisionFilter: any = {};

  // If a specific divisionId is provided, bypass active filter
  if (divisionId) {
    divisionFilter._id = divisionId;
  } else {
    // Only apply active filter when no specific division is requested
    if (activeFilter === "active") {
      divisionFilter.$or = [{ active: true }, { register: true }];
    } else if (activeFilter === "inactive") {
      divisionFilter.active = false;
      divisionFilter.register = false;
    }
    // If "all", no active/register filter
  }

  if (locationId) divisionFilter.location = locationId;

  const validDivisions = await Division.find(divisionFilter).select("_id");
  const validDivisionIds = validDivisions.map((d) => d._id);

  if (!validDivisionIds.length) {
    // No divisions match, return empty result
    return {
      teams: [],
      pagination: { total: 0, page, limit, totalPages: 0 },
    };
  }

  // --- Step 2: Build team filter ---
  const filter: any = {
    division: { $in: validDivisionIds },
  };

  if (search) {
    filter.$or = [
      { teamName: { $regex: search, $options: "i" } },
      { teamCode: { $regex: search, $options: "i" } },
    ];
  }

  if (noCaptain) {
    filter.teamCaptain = { $in: [null] };
    filter.players = { $exists: true, $ne: [] }; // has players but no captain
  }

  if (noPlayers) {
    // Override players filter if noPlayers is set
    filter.players = { $size: 0 };
  }

  // --- Step 3: Query teams with pagination ---
  const [teams, total] = await Promise.all([
    Team.find(filter)
      .populate({
        path: "division",
        select: "divisionName startDate",
        populate: [
          { path: "location", select: "name" },
          { path: "city", select: "cityName region" },
        ],
      })
      .populate("teamCaptain", "playerName")
      .populate("players", "playerName jerseyNumber")
      .sort({ createdAt: -1 })
      .skip(skip)
      .limit(limit)
      .lean(),
    Team.countDocuments(filter),
  ]);

  // --- Step 4: Return result with pagination ---
  return {
    teams,
    pagination: {
      total,
      page,
      limit,
      totalPages: Math.ceil(total / limit),
    },
  };
}

/**
 * Get team by ID
 */
export async function getTeamById(id: string) {
  await connectDB();
  return Team.findById(id)
    .populate({
      path: "division",
      select: "divisionName startDate",
      populate: [
        { path: "location", select: "name" },
        { path: "city", select: "cityName region" },
        { path: "level", select: "name grade" },
      ],
    })
    .populate("teamCaptain", "playerName jerseyNumber user")
    .populate("players", "playerName jerseyNumber user")
    .populate("games")
    .lean();
}

/**
 * Create new team
 */
export async function createTeam(data: {
  teamName: string;
  teamNameShort: string;
  teamCode: string;
  division: string;
}) {
  await connectDB();

  const team = await Team.create({
    ...data,
    teamCode: data.teamCode.toUpperCase(),
    createdManually: true,
    wins: 0,
    losses: 0,
    pointDifference: 0,
    players: [],
    games: [],
  });

  // Add team to division's teams array
  await Division.findByIdAndUpdate(data.division, {
    $addToSet: { teams: team._id },
  });

  return team.toObject();
}

/**
 * Update team
 */
export async function updateTeam(
  id: string,
  data: {
    teamName?: string;
    teamNameShort?: string;
    teamCode?: string;
    division?: string;
    teamCaptain?: string | null;
    primaryColor?: string;
    secondaryColor?: string;
    tertiaryColor?: string;
    jerseyEdition?: string;
    isCustomJersey?: boolean;
  }
) {
  await connectDB();

  const updateData: any = { ...data };
  if (data.teamCode) {
    updateData.teamCode = data.teamCode.toUpperCase();
  }

  // Fetch team for division and captain change handling
  const team = await Team.findById(id);
  if (!team) {
    throw new Error("Team not found");
  }

  // If division is being changed, update division arrays and player divisions
  if (data.division) {
    const oldDivisionId = team.division.toString();
    const newDivisionId = data.division;

    // Only update if division actually changed
    if (oldDivisionId !== newDivisionId) {
      // Remove team from old division's teams array
      await Division.findByIdAndUpdate(oldDivisionId, {
        $pull: { teams: team._id },
      });

      // Add team to new division's teams array
      await Division.findByIdAndUpdate(newDivisionId, {
        $addToSet: { teams: team._id },
      });

      // Update all players in this team to the new division
      await Player.updateMany(
        { _id: { $in: team.players } },
        { $set: { division: newDivisionId } }
      );
    }
  }

  // If team captain is being changed, update player teamCaptain flags
  if (data.teamCaptain !== undefined) {
    const oldCaptainId = team.teamCaptain?.toString();
    const newCaptainId = data.teamCaptain;

    // Remove captain flag from old captain (if exists)
    if (oldCaptainId && oldCaptainId !== newCaptainId) {
      await Player.findByIdAndUpdate(oldCaptainId, {
        $set: { teamCaptain: false },
      });
    }

    // Set captain flag for new captain (if not null)
    if (newCaptainId) {
      await Player.findByIdAndUpdate(newCaptainId, {
        $set: { teamCaptain: true },
      });
    }
  }

  return Team.findByIdAndUpdate(id, updateData, { new: true }).lean();
}

/**
 * Delete team
 */
export async function deleteTeam(id: string) {
  await connectDB();

  const team = await Team.findById(id);

  if (!team) {
    throw new Error("Team not found");
  }

  if (team.players.length > 0) {
    throw new Error(
      "Cannot delete team with players. Remove all players first."
    );
  }

  if (team.games.length > 0) {
    throw new Error("Cannot delete team with game history.");
  }

  // Remove team from division's teams array
  await Division.findByIdAndUpdate(team.division, {
    $pull: { teams: team._id },
  });

  await Team.findByIdAndDelete(id);
}

/**
 * Check if team code exists in division
 */
export async function teamCodeExistsInDivision(
  teamCode: string,
  divisionId: string,
  excludeTeamId?: string
): Promise<boolean> {
  await connectDB();

  const query: any = {
    teamCode: teamCode.toUpperCase(),
    division: divisionId,
  };

  if (excludeTeamId) {
    query._id = { $ne: excludeTeamId };
  }

  const count = await Team.countDocuments(query);
  return count > 0;
}

/**
 * Get team stats
 */
export async function getTeamStats(teamId: string) {
  await connectDB();

  const team = await Team.findById(teamId).lean();

  if (!team) return null;

  return {
    wins: team.wins,
    losses: team.losses,
    pointDifference: team.pointDifference,
    record: `${team.wins}-${team.losses}`,
  };
}


----- lib\services\stripe-customer-service.ts -----

// src/lib/services/stripe-customer-service.ts

import Stripe from "stripe";

const stripe = new Stripe(process.env.STRIPE_SECRET_KEY!, {
  apiVersion: "2025-09-30.clover",
});

export interface CardInfo {
  hasCard: boolean;
  brand?: string;
  last4?: string;
  expMonth?: number;
  expYear?: number;
  isExpired: boolean;
  isValid: boolean;
  paymentMethodId?: string;
}

/**
 * Get customer's payment method info
 * Tries multiple methods to find a card:
 * 1. Default payment method
 * 2. Invoice settings default
 * 3. List all payment methods
 */
export async function getCustomerCardInfo(
  customerId: string
): Promise<CardInfo> {
  try {
    console.log("🔍 Getting card info for customer:", customerId);

    // Validate customerId
    if (!customerId || !customerId.startsWith("cus_")) {
      console.error("❌ Invalid customer ID format:", customerId);
      return { hasCard: false, isExpired: false, isValid: false };
    }

    // Get customer
    const customer = await stripe.customers.retrieve(customerId, {
      expand: ["invoice_settings.default_payment_method"],
    });

    if (customer.deleted) {
      console.log("❌ Customer is deleted");
      return { hasCard: false, isExpired: false, isValid: false };
    }

    console.log("✅ Customer retrieved:", {
      id: customer.id,
      hasDefaultPaymentMethod:
        !!customer.invoice_settings?.default_payment_method,
      defaultSource: customer.default_source,
    });

    // METHOD 1: Try invoice_settings.default_payment_method
    let paymentMethod: Stripe.PaymentMethod | null = null;
    const defaultPaymentMethod =
      customer.invoice_settings?.default_payment_method;

    if (defaultPaymentMethod) {
      if (typeof defaultPaymentMethod === "string") {
        console.log(
          "📝 Fetching payment method from invoice settings:",
          defaultPaymentMethod
        );
        paymentMethod = await stripe.paymentMethods.retrieve(
          defaultPaymentMethod
        );
      } else {
        paymentMethod = defaultPaymentMethod;
      }
    }

    // METHOD 2: Try listing all payment methods if no default found
    if (!paymentMethod) {
      console.log(
        "📝 No default payment method, listing all payment methods..."
      );
      const paymentMethods = await stripe.paymentMethods.list({
        customer: customerId,
        type: "card",
        limit: 100,
      });

      console.log("✅ Found payment methods:", paymentMethods.data.length);

      if (paymentMethods.data.length > 0) {
        // Use the most recently created one
        paymentMethod = paymentMethods.data[0];
        console.log("✅ Using payment method:", paymentMethod.id);
      }
    }

    // METHOD 3: Check default_source (legacy)
    if (!paymentMethod && customer.default_source) {
      console.log("📝 Checking default_source (legacy)...");
      if (typeof customer.default_source === "string") {
        // This could be a card or bank account
        // For now, we'll skip this as it's legacy
        console.log("⚠️ default_source is a string (legacy), skipping");
      }
    }

    // No payment method found
    if (!paymentMethod) {
      console.log("❌ No payment method found for customer");
      return { hasCard: false, isExpired: false, isValid: false };
    }

    console.log("✅ Payment method found:", {
      id: paymentMethod.id,
      type: paymentMethod.type,
    });

    // Check if it's a card type
    if (paymentMethod.type !== "card" || !paymentMethod.card) {
      console.log("❌ Payment method is not a card:", paymentMethod.type);
      return { hasCard: false, isExpired: false, isValid: false };
    }

    const card = paymentMethod.card;

    // Check if card is expired
    const now = new Date();
    const currentYear = now.getFullYear();
    const currentMonth = now.getMonth() + 1;

    const isExpired =
      card.exp_year < currentYear ||
      (card.exp_year === currentYear && card.exp_month < currentMonth);

    console.log("✅ Card found:", {
      brand: card.brand,
      last4: card.last4,
      expMonth: card.exp_month,
      expYear: card.exp_year,
      isExpired,
    });

    return {
      hasCard: true,
      brand: card.brand,
      last4: card.last4,
      expMonth: card.exp_month,
      expYear: card.exp_year,
      isExpired,
      isValid: !isExpired,
      paymentMethodId: paymentMethod.id,
    };
  } catch (error: any) {
    console.error("❌ Error getting customer card info:", {
      message: error.message,
      type: error.type,
      code: error.code,
      customerId,
    });
    return { hasCard: false, isExpired: false, isValid: false };
  }
}

/**
 * Charge customer's card
 */
export async function chargeCustomerCard({
  customerId,
  amount,
  description,
  metadata,
}: {
  customerId: string;
  amount: number;
  description: string;
  metadata: Record<string, string>;
}): Promise<Stripe.PaymentIntent> {
  console.log("💳 Attempting to charge card:", {
    customerId,
    amount,
    description,
  });

  try {
    // Validate inputs
    if (!customerId || !customerId.startsWith("cus_")) {
      throw new Error("Invalid customer ID format");
    }

    if (!amount || amount <= 0) {
      throw new Error("Invalid amount");
    }

    // Get customer to verify they exist
    const customer = await stripe.customers.retrieve(customerId);

    if (customer.deleted) {
      throw new Error("Customer account has been deleted");
    }

    console.log("✅ Customer found:", customer.id);

    // Find a payment method
    const paymentMethods = await stripe.paymentMethods.list({
      customer: customerId,
      type: "card",
      limit: 1,
    });

    if (paymentMethods.data.length === 0) {
      throw new Error("No payment method found for customer");
    }

    const paymentMethodId = paymentMethods.data[0].id;
    console.log("✅ Using payment method:", paymentMethodId);

    // Create payment intent
    const paymentIntent = await stripe.paymentIntents.create({
      amount,
      currency: "usd",
      customer: customerId,
      payment_method: paymentMethodId,
      off_session: true,
      confirm: true,
      description,
      metadata,
    });

    console.log("✅ Payment intent created:", {
      id: paymentIntent.id,
      status: paymentIntent.status,
      amount: paymentIntent.amount,
    });

    if (paymentIntent.status === "requires_action") {
      throw new Error("Payment requires additional authentication");
    }

    if (paymentIntent.status === "requires_payment_method") {
      throw new Error("Payment method declined");
    }

    return paymentIntent;
  } catch (error: any) {
    console.error("❌ Error charging customer card:", {
      message: error.message,
      type: error.type,
      code: error.code,
      decline_code: error.decline_code,
      customerId,
    });

    // Provide user-friendly error messages
    if (error.type === "StripeCardError") {
      const declineCode = error.decline_code || "generic_decline";
      const friendlyMessages: Record<string, string> = {
        insufficient_funds: "Card declined: Insufficient funds",
        card_declined: "Card was declined by your bank",
        expired_card: "Card has expired",
        incorrect_cvc: "Incorrect CVC code",
        processing_error: "Processing error occurred",
        generic_decline: "Card was declined",
      };
      throw new Error(friendlyMessages[declineCode] || error.message);
    } else if (error.type === "StripeInvalidRequestError") {
      throw new Error(`Invalid request: ${error.message}`);
    } else if (error.type === "StripeAuthenticationError") {
      throw new Error("Stripe authentication failed. Check your API keys.");
    } else if (error.type === "StripeRateLimitError") {
      throw new Error("Too many requests. Please try again in a moment.");
    } else {
      throw new Error(error.message || "Failed to charge card");
    }
  }
}


----- lib\utils\time.ts -----

// src/lib/utils/time.ts

/**
 * Convert military time (HH:mm) to 12-hour format (h:mm AM/PM)
 */
export function formatTime(militaryTime?: string): string {
  if (!militaryTime) return "";

  const [hours, minutes] = militaryTime.split(":").map(Number);

  if (isNaN(hours) || isNaN(minutes)) return militaryTime;

  const period = hours >= 12 ? "PM" : "AM";
  const displayHours = hours === 0 ? 12 : hours > 12 ? hours - 12 : hours;

  return `${displayHours}:${minutes.toString().padStart(2, "0")} ${period}`;
}

/**
 * Format time range for display
 */
export function formatTimeRange(startTime?: string, endTime?: string): string {
  if (!startTime || !endTime) return "";
  return `${formatTime(startTime)} - ${formatTime(endTime)}`;
}


----- lib\utils.ts -----

import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}


----- lib\validations\city.ts -----

// src/lib/validations/city.ts

/**
 * SOLID - Single Responsibility Principle (SRP)
 * City validation schemas ONLY
 */

/**
 * DRY Principle
 * Shared between API routes and form components
 */

import { z } from "zod";

export const createCitySchema = z.object({
  cityName: z.string().min(2, "City name must be at least 2 characters"),
  region: z.string().min(2, "Region is required"),
  country: z.string().min(2, "Country is required"),
  timezone: z.string().min(2, "Timezone is required"),
});

export const updateCitySchema = z.object({
  id: z.string(),
  cityName: z.string().min(2).optional(),
  region: z.string().min(2).optional(),
  country: z.string().min(2).optional(),
  timezone: z.string().min(2).optional(),
  active: z.boolean().optional(),
});

export type CreateCityInput = z.infer<typeof createCitySchema>;
export type UpdateCityInput = z.infer<typeof updateCitySchema>;


----- lib\validations\division.ts -----

// src/lib/validations/division.ts

/**
 * SOLID - Single Responsibility Principle (SRP)
 * Division validation schemas ONLY
 */

import { z } from "zod";

export const createDivisionSchema = z.object({
  divisionName: z
    .string()
    .min(2, "Division name must be at least 2 characters"),
  description: z.string().min(10, "Description must be at least 10 characters"),
  city: z.string().min(1, "City is required"),
  location: z.string().min(1, "Location is required"),
  level: z.string().min(1, "Level is required"),
  day: z.enum([
    "Monday",
    "Tuesday",
    "Wednesday",
    "Thursday",
    "Friday",
    "Saturday",
    "Sunday",
  ]),
  startDate: z.string().optional(),
  startTime: z.string().optional(),
  endTime: z.string().optional(),
  prices: z.object({
    earlyBird: z.string().min(1, "Early Bird price is required"),
    regular: z.string().min(1, "Regular price is required"),
    installment: z.string().min(1, "Early Bird installment price is required"),
    regularInstallment: z
      .string()
      .min(1, "Regular installment price is required"),
    firstInstallment: z.string().min(1, "Down payment price is required"),
  }),
  active: z.boolean(),
  register: z.boolean(),
});

export const updateDivisionSchema = z.object({
  id: z.string(),
  divisionName: z.string().min(2).optional(),
  description: z.string().min(10).optional(),
  location: z.string().optional(),
  level: z.string().optional(),
  day: z
    .enum([
      "Monday",
      "Tuesday",
      "Wednesday",
      "Thursday",
      "Friday",
      "Saturday",
      "Sunday",
    ])
    .optional(),
  startDate: z.string().optional(),
  startTime: z.string().optional(),
  endTime: z.string().optional(),
  active: z.boolean().optional(),
  register: z.boolean().optional(),
});

export type CreateDivisionInput = z.infer<typeof createDivisionSchema>;
export type UpdateDivisionInput = z.infer<typeof updateDivisionSchema>;


----- lib\validations\jersey.ts -----

// src/lib/validations/jersey.ts

/**
 * SOLID - Single Responsibility Principle (SRP)
 * Jersey validation schemas ONLY
 */

import { z } from "zod";

export const updateJerseyEditionSchema = z.object({
  teamId: z.string().min(1, "Team ID is required"),
  jerseyEdition: z.string().min(1, "Jersey edition is required"),
  primaryColor: z
    .string()
    .regex(/^#[0-9A-F]{6}$/i, "Must be a valid hex color"),
  secondaryColor: z
    .string()
    .regex(/^#[0-9A-F]{6}$/i, "Must be a valid hex color"),
  tertiaryColor: z
    .string()
    .regex(/^#[0-9A-F]{6}$/i, "Must be a valid hex color"),
});

export const updateJerseyCustomSchema = z.object({
  teamId: z.string().min(1, "Team ID is required"),
  imageData: z.object({
    id: z.string(),
    url: z.string().url(),
    publicId: z.string(),
  }),
});

export const removeJerseyDesignSchema = z.object({
  teamId: z.string().min(1, "Team ID is required"),
});

export const updatePlayerJerseySchema = z.object({
  playerId: z.string().min(1, "Player ID is required"),
  jerseyNumber: z.number().min(0).max(99).nullable().optional(),
  jerseySize: z.enum(["SM", "MD", "LG", "XL", "XXL"]).nullable().optional(),
  jerseyName: z.string().max(15).nullable().optional(),
});

export const addGenericJerseySchema = z.object({
  teamId: z.string().min(1, "Team ID is required"),
  jerseyNumber: z.number().min(0).max(99).optional(),
  jerseySize: z.enum(["SM", "MD", "LG", "XL", "XXL"]).optional(),
  jerseyName: z.string().max(15).optional(),
});

export const updateGenericJerseySchema = z.object({
  teamId: z.string().min(1, "Team ID is required"),
  genericIndex: z.number().min(0, "Index must be non-negative"),
  jerseyNumber: z.number().min(0).max(99).optional(),
  jerseySize: z.enum(["SM", "MD", "LG", "XL", "XXL"]).optional(),
  jerseyName: z.string().max(15).optional(),
});

export const removeGenericJerseySchema = z.object({
  teamId: z.string().min(1, "Team ID is required"),
  genericIndex: z.number().min(0, "Index must be non-negative"),
});

export type UpdateJerseyEditionInput = z.infer<
  typeof updateJerseyEditionSchema
>;
export type UpdateJerseyCustomInput = z.infer<typeof updateJerseyCustomSchema>;
export type RemoveJerseyDesignInput = z.infer<typeof removeJerseyDesignSchema>;
export type UpdatePlayerJerseyInput = z.infer<typeof updatePlayerJerseySchema>;
export type AddGenericJerseyInput = z.infer<typeof addGenericJerseySchema>;
export type UpdateGenericJerseyInput = z.infer<
  typeof updateGenericJerseySchema
>;
export type RemoveGenericJerseyInput = z.infer<
  typeof removeGenericJerseySchema
>;


----- lib\validations\level.ts -----

// src/lib/validations/level.ts

/**
 * SOLID - Single Responsibility Principle (SRP)
 * Level validation schemas ONLY
 */

import { z } from "zod";

export const createLevelSchema = z.object({
  name: z.string().min(2, "Level name must be at least 2 characters"),
  grade: z.number().min(1, "Grade must be at least 1"),
  active: z.boolean().optional(),
});

export const updateLevelSchema = z.object({
  id: z.string(),
  name: z.string().min(2).optional(),
  grade: z.number().min(1).optional(),
  active: z.boolean().optional(),
});

export type CreateLevelInput = z.infer<typeof createLevelSchema>;
export type UpdateLevelInput = z.infer<typeof updateLevelSchema>;


----- lib\validations\location.ts -----

// src/lib/validations/location.ts

/**
 * SOLID - Single Responsibility Principle (SRP)
 * Location validation schemas ONLY
 */

import { z } from "zod";

export const createLocationSchema = z.object({
  name: z.string().min(2, "Location name must be at least 2 characters"),
  address: z.string().min(5, "Address is required"),
  city: z.string().min(1, "City is required"),
  coordinates: z
    .object({
      latitude: z.number().optional(),
      longitude: z.number().optional(),
    })
    .optional(),
});

export const updateLocationSchema = z.object({
  id: z.string(),
  name: z.string().min(2).optional(),
  address: z.string().min(5).optional(),
  city: z.string().optional(),
  coordinates: z
    .object({
      latitude: z.number().optional(),
      longitude: z.number().optional(),
    })
    .optional(),
});

export type CreateLocationInput = z.infer<typeof createLocationSchema>;
export type UpdateLocationInput = z.infer<typeof updateLocationSchema>;


----- lib\validations\player.ts -----

// src/lib/validations/player.ts - Update jersey sizes

/**
 * SOLID - Single Responsibility Principle (SRP)
 * Player validation schemas ONLY
 */

import { z } from "zod";

export const createPlayerSchema = z.object({
  playerName: z.string().min(2, "Player name must be at least 2 characters"),
  division: z.string().min(1, "Division is required"),
  team: z.string().optional(),
  jerseyNumber: z
    .number()
    .min(0, "Jersey number must be 0 or greater")
    .max(99, "Jersey number must be 99 or less")
    .optional()
    .nullable(),
  jerseySize: z
    .enum(["S", "M", "L", "XL", "2XL"]) // Updated to match actual sizes
    .optional(),
  jerseyName: z
    .string()
    .max(15, "Jersey name must be 15 characters or less")
    .optional(),
  instagram: z.string().optional(),
  user: z.string().optional(),
});

export const updatePlayerSchema = z.object({
  id: z.string(),
  playerName: z.string().min(2).optional(),
  division: z.string().optional(),
  team: z.string().nullable().optional(),
  jerseyNumber: z.number().min(0).max(99).nullable().optional(),
  jerseySize: z
    .enum(["S", "M", "L", "XL", "2XL"]) // Updated to match actual sizes
    .optional()
    .nullable(),
  jerseyName: z.string().max(15).optional().nullable(),
  instagram: z.string().optional().nullable(),
  user: z.string().nullable().optional(),
});

export type CreatePlayerInput = z.infer<typeof createPlayerSchema>;
export type UpdatePlayerInput = z.infer<typeof updatePlayerSchema>;


----- lib\validations\price.ts -----

// src/lib/validations/price.ts

/**
 * SOLID - Single Responsibility Principle (SRP)
 * Price validation schemas ONLY
 */

import { z } from "zod";

export const createPriceSchema = z.object({
  name: z.string().min(2, "Price name must be at least 2 characters"),
  priceId: z
    .string()
    .min(5, "Stripe price ID is required")
    .startsWith("price_", "Must be a valid Stripe price ID"),
  amount: z.number().min(0, "Amount must be 0 or greater"),
  type: z.enum([
    "earlyBird",
    "regular",
    "installment",
    "regularInstallment",
    "firstInstallment",
    "free",
  ]),
});

export type CreatePriceInput = z.infer<typeof createPriceSchema>;


----- lib\validations\team.ts -----

// src/lib/validations/team.ts

/**
 * SOLID - Single Responsibility Principle (SRP)
 * Team validation schemas ONLY
 */

import { z } from "zod";

export const createTeamSchema = z.object({
  teamName: z.string().min(2, "Team name must be at least 2 characters"),
  teamNameShort: z.string().min(2, "Short name must be at least 2 characters"),
  teamCode: z.string().min(2, "Team code must be at least 2 characters"),
  city: z.string().min(1, "City is required"),
  location: z.string().min(1, "Location is required"),
  division: z.string().min(1, "Division is required"),
});

export const updateTeamSchema = z.object({
  id: z.string(),
  teamName: z.string().min(2).optional(),
  teamNameShort: z.string().min(2).optional(),
  teamCode: z.string().min(2).optional(),
  division: z.string().optional(),
  teamCaptain: z.string().nullable().optional(),
  primaryColor: z.string().optional(),
  secondaryColor: z.string().optional(),
  tertiaryColor: z.string().optional(),
  jerseyEdition: z.string().optional(),
  isCustomJersey: z.boolean().optional(),
});

export type CreateTeamInput = z.infer<typeof createTeamSchema>;
export type UpdateTeamInput = z.infer<typeof updateTeamSchema>;


----- middleware.ts -----

// src/middleware.ts

/**
 * SOLID - Single Responsibility Principle (SRP)
 * Route protection ONLY
 */

/**
 * Security
 * Protects all admin routes from unauthorized access
 */

import { withAuth } from "next-auth/middleware";
import { NextResponse } from "next/server";

export default withAuth(
  function middleware(req) {
    const token = req.nextauth.token;
    const path = req.nextUrl.pathname;

    // Check if admin is active
    if (token && !token.isActive) {
      return NextResponse.redirect(new URL("/login?error=inactive", req.url));
    }

    // Admin management routes - EXECUTIVE only
    if (path.includes("/settings/admins") && token?.role !== "EXECUTIVE") {
      return NextResponse.redirect(new URL("/unauthorized", req.url));
    }

    return NextResponse.next();
  },
  {
    callbacks: {
      authorized: ({ token }) => !!token,
    },
    pages: {
      signIn: "/login",
    },
  }
);

// Protect all admin routes
export const config = {
  matcher: ["/admin/:path*", "/api/v1/:path*"],
};


----- models\Admin.ts -----

// src/models/Admin.ts

/**
 * SOLID - Single Responsibility Principle (SRP)
 * This model defines ONLY the Admin data structure and schema
 * No business logic, no queries - just the data model
 */

/**
 * Security
 * - Password hashing with bcrypt
 * - Password never returned in queries
 */

import mongoose, { Document, Model } from "mongoose";
import bcrypt from "bcryptjs";

const Schema = mongoose.Schema;

// Type definitions
export type AdminRole =
  | "EXECUTIVE"
  | "COMMISSIONER"
  | "SCOREKEEPER"
  | "PHOTOGRAPHER";

// TypeScript interface
export interface IAdmin extends Document {
  name: string;
  email: string;
  password: string;
  phoneNumber?: string;
  role: AdminRole;
  assignedLocations: mongoose.Types.ObjectId[];
  allLocations: boolean;
  isActive: boolean;
  lastLogin?: Date;
  createdAt: Date;
  updatedAt: Date;
  comparePassword(candidatePassword: string): Promise<boolean>;
}

// Schema definition
const adminSchema = new Schema<IAdmin>(
  {
    name: {
      type: String,
      required: [true, "Name is required"],
      trim: true,
    },
    email: {
      type: String,
      required: [true, "Email is required"],
      unique: true,
      lowercase: true,
      trim: true,
    },
    password: {
      type: String,
      required: [true, "Password is required"],
      select: false, // Never include password in queries by default
    },
    phoneNumber: {
      type: String,
      trim: true,
    },
    role: {
      type: String,
      enum: ["EXECUTIVE", "COMMISSIONER", "SCOREKEEPER", "PHOTOGRAPHER"],
      required: [true, "Role is required"],
    },
    assignedLocations: [
      {
        type: Schema.Types.ObjectId,
        ref: "Location",
      },
    ],
    allLocations: {
      type: Boolean,
      default: false,
    },
    isActive: {
      type: Boolean,
      default: true,
    },
    lastLogin: {
      type: Date,
    },
  },
  {
    timestamps: true, // Adds createdAt and updatedAt
  }
);

// Indexes for performance
adminSchema.index({ email: 1 });
adminSchema.index({ role: 1 });
adminSchema.index({ isActive: 1 });

// Hash password before saving
adminSchema.pre("save", async function (next) {
  // Only hash if password is modified
  if (!this.isModified("password")) return next();

  try {
    const salt = await bcrypt.genSalt(10);
    this.password = await bcrypt.hash(this.password, salt);
    next();
  } catch (error: any) {
    next(error);
  }
});

// Instance method to compare passwords
adminSchema.methods.comparePassword = async function (
  candidatePassword: string
): Promise<boolean> {
  return bcrypt.compare(candidatePassword, this.password);
};

// Middleware to set allLocations based on role
adminSchema.pre("save", function (next) {
  if (this.role === "EXECUTIVE" || this.role === "COMMISSIONER") {
    this.allLocations = true;
  }
  next();
});

// Export model
export default (mongoose.models.Admin as Model<IAdmin>) ||
  mongoose.model<IAdmin>("Admin", adminSchema);


----- models\ChatChannel.ts -----

// src/models/ChatChannel.ts

/**
 * SOLID - Single Responsibility Principle (SRP)
 * ChatChannel model - chat channel data structure ONLY
 */

import mongoose from "mongoose";

const Schema = mongoose.Schema;

export type ChatChannelType =
  | "division"
  | "team"
  | "game"
  | "direct"
  | "support";

export interface IChatChannel extends mongoose.Document {
  channelName: string;
  channelType: ChatChannelType;
  referenceId?: mongoose.Types.ObjectId;
  participants: Array<{
    userId: mongoose.Types.ObjectId;
    userName: string;
    joinedAt: Date;
  }>;
  isActive: boolean;
  lastMessageAt: Date;
  messageCount: number;
  createdAt: Date;
  updatedAt: Date;
}

const chatChannelSchema = new Schema<IChatChannel>(
  {
    channelName: {
      type: String,
      required: [true, "Channel name is required"],
      unique: true,
    },
    channelType: {
      type: String,
      enum: ["division", "team", "game", "direct", "support"],
      required: [true, "Channel type is required"],
    },
    referenceId: {
      type: Schema.Types.ObjectId,
    },
    participants: [
      {
        userId: {
          type: Schema.Types.ObjectId,
          ref: "User",
        },
        userName: {
          type: String,
          required: true,
        },
        joinedAt: {
          type: Date,
          default: Date.now,
        },
      },
    ],
    isActive: {
      type: Boolean,
      default: true,
    },
    lastMessageAt: {
      type: Date,
      default: Date.now,
    },
    messageCount: {
      type: Number,
      default: 0,
    },
  },
  {
    timestamps: true,
  }
);

// Indexes
chatChannelSchema.index({ channelName: 1 });
chatChannelSchema.index({ channelType: 1 });
chatChannelSchema.index({ "participants.userId": 1 });
chatChannelSchema.index({ isActive: 1, lastMessageAt: -1 });

export default (mongoose.models.ChatChannel as mongoose.Model<IChatChannel>) ||
  mongoose.model<IChatChannel>("ChatChannel", chatChannelSchema);


----- models\ChatMessage.ts -----

// src/models/ChatMessage.ts

/**
 * SOLID - Single Responsibility Principle (SRP)
 * ChatMessage model - chat message data structure ONLY
 */

import mongoose from "mongoose";

const Schema = mongoose.Schema;

export interface IChatMessage extends mongoose.Document {
  channelId: mongoose.Types.ObjectId;
  channelName: string;
  userId: mongoose.Types.ObjectId;
  userName: string;
  userEmail: string;
  content: string;
  message: string;
  messageType: "text" | "system" | "announcement";
  metadata: Record<string, any>;
  edited: boolean;
  editedAt?: Date;
  reactions: Array<{
    userId: string;
    userName: string;
    emoji: string;
    timestamp: Date;
  }>;
  timestamp: Date;
  createdAt: Date;
  updatedAt: Date;
}

const chatMessageSchema = new Schema<IChatMessage>(
  {
    channelId: {
      type: Schema.Types.ObjectId,
      ref: "ChatChannel",
    },
    channelName: {
      type: String,
      required: [true, "Channel name is required"],
    },
    userId: {
      type: Schema.Types.ObjectId,
      ref: "User",
    },
    userName: {
      type: String,
      required: [true, "User name is required"],
    },
    userEmail: {
      type: String,
      required: [true, "User email is required"],
    },
    content: {
      type: String,
      required: [true, "Content is required"],
    },
    message: {
      type: String,
      required: [true, "Message is required"],
    },
    messageType: {
      type: String,
      enum: ["text", "system", "announcement"],
      default: "text",
    },
    metadata: {
      type: Schema.Types.Mixed,
      default: {},
    },
    edited: {
      type: Boolean,
      default: false,
    },
    editedAt: Date,
    reactions: [
      {
        userId: String,
        userName: String,
        emoji: String,
        timestamp: Date,
      },
    ],
    timestamp: {
      type: Date,
      default: Date.now,
    },
  },
  {
    timestamps: true,
  }
);

// Indexes
chatMessageSchema.index({ channelName: 1, createdAt: -1 });
chatMessageSchema.index({ userId: 1, createdAt: -1 });

export default (mongoose.models.ChatMessage as mongoose.Model<IChatMessage>) ||
  mongoose.model<IChatMessage>("ChatMessage", chatMessageSchema);


----- models\City.ts -----

// src/models/City.ts

/**
 * SOLID - Single Responsibility Principle (SRP)
 * City model - ONLY city data structure
 */

import mongoose from "mongoose";

const Schema = mongoose.Schema;

export interface ICity extends mongoose.Document {
  cityName: string;
  region: string;
  country: string;
  timezone: string;
  active: boolean;
  locations: mongoose.Types.ObjectId[];
  createdAt: Date;
  updatedAt: Date;
}

const citySchema = new Schema<ICity>(
  {
    cityName: {
      type: String,
      required: [true, "City name is required"],
      trim: true,
    },
    region: {
      type: String,
      required: [true, "Region is required"],
      trim: true,
    },
    country: {
      type: String,
      required: [true, "Country is required"],
      trim: true,
    },
    timezone: {
      type: String,
      required: [true, "Timezone is required"],
    },
    active: {
      type: Boolean,
      default: true,
    },
    locations: [
      {
        type: Schema.Types.ObjectId,
        ref: "Location",
      },
    ],
  },
  {
    timestamps: true,
  }
);

// Indexes
citySchema.index({ cityName: 1, region: 1, country: 1 }, { unique: true });
citySchema.index({ active: 1 });

export default (mongoose.models.City as mongoose.Model<ICity>) ||
  mongoose.model<ICity>("City", citySchema);


----- models\Division.ts -----

// src/models/Division.ts

/**
 * SOLID - Single Responsibility Principle (SRP)
 * Division model - division data structure ONLY
 */

import mongoose from "mongoose";

const Schema = mongoose.Schema;

export interface IDivision extends mongoose.Document {
  divisionName: string;
  city: mongoose.Types.ObjectId;
  location: mongoose.Types.ObjectId;
  level: mongoose.Types.ObjectId;
  day: string;
  startDate: Date;
  startTime: string;
  endTime: string;
  active: boolean;
  register: boolean;
  description: string;
  teams: mongoose.Types.ObjectId[];
  games: mongoose.Types.ObjectId[];
  earlyBirdOpen: boolean;
  prices: {
    earlyBird?: mongoose.Types.ObjectId;
    regular?: mongoose.Types.ObjectId;
    installment?: mongoose.Types.ObjectId;
    firstInstallment?: mongoose.Types.ObjectId;
    free?: mongoose.Types.ObjectId;
  };
  jerseyDeadline?: Date; // NEW: Jersey selection deadline

  createdAt: Date;
  updatedAt: Date;
}

const divisionSchema = new Schema<IDivision>(
  {
    divisionName: {
      type: String,
      required: [true, "Division name is required"],
      trim: true,
    },
    city: {
      type: Schema.Types.ObjectId,
      ref: "City",
      required: [true, "City is required"],
    },
    location: {
      type: Schema.Types.ObjectId,
      ref: "Location",
      required: [true, "Location is required"],
    },
    level: {
      type: Schema.Types.ObjectId,
      ref: "Level",
      required: [true, "Level is required"],
    },
    day: {
      type: String,
      required: [true, "Day is required"],
    },
    startDate: {
      type: Date,
    },
    startTime: {
      type: String,
    },
    endTime: {
      type: String,
    },
    active: {
      type: Boolean,
      default: false,
    },
    register: {
      type: Boolean,
      default: false,
    },
    description: {
      type: String,
      required: [true, "Description is required"],
    },
    teams: [
      {
        type: Schema.Types.ObjectId,
        ref: "Team",
      },
    ],
    games: [
      {
        type: Schema.Types.ObjectId,
        ref: "Game",
      },
    ],

    prices: {
      earlyBird: {
        type: Schema.Types.ObjectId,
        ref: "Price",
      },
      regular: {
        type: Schema.Types.ObjectId,
        ref: "Price",
      },
      installment: {
        type: Schema.Types.ObjectId,
        ref: "Price",
      },
      regularInstallment: {
        type: mongoose.Schema.Types.ObjectId,
        ref: "Price",
      },
      firstInstallment: {
        type: Schema.Types.ObjectId,
        ref: "Price",
      },
      free: {
        type: Schema.Types.ObjectId,
        ref: "Price",
      },
    },
    jerseyDeadline: {
      type: Date,
    },
  },
  {
    timestamps: true,
  }
);

// Indexes
divisionSchema.index({ city: 1, location: 1 });
divisionSchema.index({ active: 1 });
divisionSchema.index({ register: 1 });
divisionSchema.index({ level: 1 });

export default (mongoose.models.Division as mongoose.Model<IDivision>) ||
  mongoose.model<IDivision>("Division", divisionSchema);


----- models\Game.ts -----

// src/models/Game.ts

/**
 * SOLID - Single Responsibility Principle (SRP)
 * Game model - game data structure ONLY
 */

import mongoose from "mongoose";

const Schema = mongoose.Schema;

export interface IGame extends mongoose.Document {
  gameName: string;
  date: Date;
  time: string;
  homeTeam: mongoose.Types.ObjectId;
  awayTeam: mongoose.Types.ObjectId;
  homeTeamScore: number;
  awayTeamScore: number;
  status: boolean;
  started: boolean;
  division: mongoose.Types.ObjectId;
  players: mongoose.Types.ObjectId[];
  playerOfTheGame?: mongoose.Types.ObjectId;
  youtubeLink?: string;
  isPlayoffGame: boolean;
  gamePhotosCount: number;
  createdAt: Date;
  updatedAt: Date;
}

const gameSchema = new Schema<IGame>(
  {
    gameName: {
      type: String,
      required: [true, "Game name is required"],
    },
    date: {
      type: Date,
      required: [true, "Game date is required"],
    },
    time: {
      type: String,
      required: [true, "Game time is required"],
    },
    homeTeam: {
      type: Schema.Types.ObjectId,
      ref: "Team",
      required: [true, "Home team is required"],
    },
    awayTeam: {
      type: Schema.Types.ObjectId,
      ref: "Team",
      required: [true, "Away team is required"],
    },
    homeTeamScore: {
      type: Number,
      default: 0,
    },
    awayTeamScore: {
      type: Number,
      default: 0,
    },
    status: {
      type: Boolean,
      default: false,
    },
    started: {
      type: Boolean,
      default: false,
    },
    division: {
      type: Schema.Types.ObjectId,
      ref: "Division",
      required: [true, "Division is required"],
    },

    players: [
      {
        type: Schema.Types.ObjectId,
        ref: "Player",
      },
    ],
    playerOfTheGame: {
      type: Schema.Types.ObjectId,
      ref: "Player",
    },
    youtubeLink: String,
    isPlayoffGame: {
      type: Boolean,
      default: false,
    },
    gamePhotosCount: {
      type: Number,
      default: 0,
    },
  },
  {
    timestamps: true,
  }
);

// Indexes
gameSchema.index({ division: 1, date: -1 });
gameSchema.index({ date: -1 });
gameSchema.index({ status: 1 });
gameSchema.index({ gamePhotosCount: 1 });

export default (mongoose.models.Game as mongoose.Model<IGame>) ||
  mongoose.model<IGame>("Game", gameSchema);


----- models\GamePhoto.ts -----

// src/models/GamePhoto.ts

/**
 * SOLID - Single Responsibility Principle (SRP)
 * GamePhoto model - game photo data structure ONLY
 */

import mongoose from "mongoose";

const Schema = mongoose.Schema;

export interface IGamePhoto extends mongoose.Document {
  url: string;
  publicId: string;
  thumbnail: string;
  game: mongoose.Types.ObjectId;
  tags: string[];
  isHighlight: boolean;
  uploadedAt: Date;
  createdAt: Date;
  updatedAt: Date;
}

const gamePhotoSchema = new Schema<IGamePhoto>(
  {
    url: {
      type: String,
      required: [true, "Photo URL is required"],
    },
    publicId: {
      type: String,
      required: [true, "Cloudinary public ID is required"],
      unique: true,
    },
    thumbnail: {
      type: String,
      required: [true, "Thumbnail URL is required"],
    },
    game: {
      type: Schema.Types.ObjectId,
      ref: "Game",
      required: [true, "Game is required"],
    },
    tags: [String],
    isHighlight: {
      type: Boolean,
      default: false,
    },
    uploadedAt: {
      type: Date,
      default: Date.now,
    },
  },
  {
    timestamps: true,
  }
);

// Indexes
gamePhotoSchema.index({ game: 1, uploadedAt: -1 });
gamePhotoSchema.index({ publicId: 1 }, { unique: true });
gamePhotoSchema.index({ isHighlight: 1 });

export default (mongoose.models.GamePhoto as mongoose.Model<IGamePhoto>) ||
  mongoose.model<IGamePhoto>("GamePhoto", gamePhotoSchema);


----- models\JerseyOrder.ts -----

// src/models/JerseyOrder.ts

/**
 * SOLID - Single Responsibility Principle (SRP)
 * JerseyOrder model - jersey order tracking data structure ONLY
 */

import mongoose from "mongoose";

const Schema = mongoose.Schema;

export interface IJerseyOrder extends mongoose.Document {
  team: mongoose.Types.ObjectId;
  division: mongoose.Types.ObjectId;
  type: "MANUFACTURER_ORDER" | "IN_STOCK";
  players: Array<{
    playerId: mongoose.Types.ObjectId;
    jerseyNumber?: number;
    jerseySize?: string;
    jerseyName?: string;
  }>;
  adminStatus:
    | "INCOMPLETE"
    | "PENDING_REVIEW"
    | "READY_TO_ORDER"
    | "ORDERED"
    | "COMPLETED";
  manufacturerStatus:
    | "PENDING"
    | "IN_PRODUCTION"
    | "QUALITY_CHECK"
    | "COMPLETED"
    | "SHIPPED";
  inStockStatus: "PENDING" | "ASSIGNED" | "DELIVERED";
  adminNotes?: string;
  manufacturerNotes?: string;
  dateOrdered?: Date;
  dateProductionCompleted?: Date;
  dateAssigned?: Date;
  lastUpdated: Date;
  createdAt: Date;
  updatedAt: Date;
}

const jerseyOrderSchema = new Schema<IJerseyOrder>(
  {
    team: {
      type: Schema.Types.ObjectId,
      ref: "Team",
      required: [true, "Team is required"],
    },
    division: {
      type: Schema.Types.ObjectId,
      ref: "Division",
      required: [true, "Division is required"],
    },
    type: {
      type: String,
      enum: ["MANUFACTURER_ORDER", "IN_STOCK"],
      required: [true, "Order type is required"],
    },
    players: [
      {
        playerId: {
          type: Schema.Types.ObjectId,
          ref: "Player",
        },
        jerseyNumber: Number,
        jerseySize: String,
        jerseyName: String,
      },
    ],
    adminStatus: {
      type: String,
      enum: [
        "INCOMPLETE",
        "PENDING_REVIEW",
        "READY_TO_ORDER",
        "ORDERED",
        "COMPLETED",
      ],
      default: "INCOMPLETE",
    },
    manufacturerStatus: {
      type: String,
      enum: [
        "PENDING",
        "IN_PRODUCTION",
        "QUALITY_CHECK",
        "COMPLETED",
        "SHIPPED",
      ],
      default: "PENDING",
    },
    inStockStatus: {
      type: String,
      enum: ["PENDING", "ASSIGNED", "DELIVERED"],
      default: "PENDING",
    },
    adminNotes: String,
    manufacturerNotes: String,
    dateOrdered: Date,
    dateProductionCompleted: Date,
    dateAssigned: Date,
    lastUpdated: {
      type: Date,
      default: Date.now,
    },
  },
  {
    timestamps: true,
  }
);

// Indexes
jerseyOrderSchema.index({ team: 1 });
jerseyOrderSchema.index({ division: 1 });
jerseyOrderSchema.index({ type: 1 });
jerseyOrderSchema.index({ adminStatus: 1 });
jerseyOrderSchema.index({ manufacturerStatus: 1 });
jerseyOrderSchema.index({ "players.playerId": 1 });

export default (mongoose.models.JerseyOrder as mongoose.Model<IJerseyOrder>) ||
  mongoose.model<IJerseyOrder>("JerseyOrder", jerseyOrderSchema);


----- models\Level.ts -----

// src/models/Level.ts

/**
 * SOLID - Single Responsibility Principle (SRP)
 * Level model - skill tier data structure ONLY
 */

import mongoose from "mongoose";

const Schema = mongoose.Schema;

export interface ILevel extends mongoose.Document {
  name: string;
  grade: number;
  active: boolean;
  createdAt: Date;
  updatedAt: Date;
}

const levelSchema = new Schema<ILevel>(
  {
    name: {
      type: String,
      required: [true, "Level name is required"],
      unique: true,
      trim: true,
    },
    grade: {
      type: Number,
      required: [true, "Grade is required"],
      min: [1, "Grade must be at least 1"],
    },
    active: {
      type: Boolean,
      default: true,
    },
  },
  {
    timestamps: true,
  }
);

// Indexes
levelSchema.index({ grade: 1 });
levelSchema.index({ name: 1 });

export default (mongoose.models.Level as mongoose.Model<ILevel>) ||
  mongoose.model<ILevel>("Level", levelSchema);


----- models\Location.ts -----

// src/models/Location.ts

/**
 * SOLID - Single Responsibility Principle (SRP)
 * Location model - ONLY location data structure
 */

import mongoose from "mongoose";

const Schema = mongoose.Schema;

export interface ILocation extends mongoose.Document {
  name: string;
  address: string;
  city: mongoose.Types.ObjectId;
  coordinates?: {
    latitude: number;
    longitude: number;
  };
  isActive: boolean;
  createdAt: Date;
  updatedAt: Date;
}

const locationSchema = new Schema<ILocation>(
  {
    name: {
      type: String,
      required: [true, "Location name is required"],
      trim: true,
    },
    address: {
      type: String,
      required: [true, "Address is required"],
      trim: true,
    },
    city: {
      type: Schema.Types.ObjectId,
      ref: "City",
      required: [true, "City is required"],
    },
    coordinates: {
      latitude: { type: Number },
      longitude: { type: Number },
    },
    isActive: {
      type: Boolean,
      default: true,
    },
  },
  {
    timestamps: true,
  }
);

// Indexes
locationSchema.index({ city: 1 });
locationSchema.index({ isActive: 1 });
locationSchema.index({ "coordinates.latitude": 1, "coordinates.longitude": 1 });

export default (mongoose.models.Location as mongoose.Model<ILocation>) ||
  mongoose.model<ILocation>("Location", locationSchema);


----- models\MessageForward.ts -----

// src/models/MessageForward.ts

/**
 * SOLID - Single Responsibility Principle (SRP)
 * MessageForward model - message forwarding tracking data structure ONLY
 */

import mongoose from "mongoose";

const Schema = mongoose.Schema;

export interface IMessageForward extends mongoose.Document {
  userId: mongoose.Types.ObjectId;
  channelName: string;
  messageContent: string;
  sentBy: string;
  channels: ("sms" | "email")[];
  results: {
    sms?: "sent" | "failed" | "skipped";
    email?: "sent" | "failed" | "skipped";
  };
  errorMessages?: {
    sms?: string;
    email?: string;
  };
  createdAt: Date;
  updatedAt: Date;
}

const messageForwardSchema = new Schema<IMessageForward>(
  {
    userId: {
      type: Schema.Types.ObjectId,
      ref: "User",
      required: [true, "User ID is required"],
    },
    channelName: {
      type: String,
      required: [true, "Channel name is required"],
    },
    messageContent: {
      type: String,
      required: [true, "Message content is required"],
    },
    sentBy: {
      type: String,
      default: "Support Team",
    },
    channels: [
      {
        type: String,
        enum: ["sms", "email"],
        required: true,
      },
    ],
    results: {
      sms: {
        type: String,
        enum: ["sent", "failed", "skipped"],
      },
      email: {
        type: String,
        enum: ["sent", "failed", "skipped"],
      },
    },
    errorMessages: {
      sms: String,
      email: String,
    },
  },
  {
    timestamps: true,
  }
);

// Indexes for rate limiting
messageForwardSchema.index({ userId: 1, createdAt: -1 });
messageForwardSchema.index({ channelName: 1, createdAt: -1 });

export default (mongoose.models
  .MessageForward as mongoose.Model<IMessageForward>) ||
  mongoose.model<IMessageForward>("MessageForward", messageForwardSchema);


----- models\PaymentMethod.ts -----

// src/models/PaymentMethod.ts

/**
 * SOLID - Single Responsibility Principle (SRP)
 * PaymentMethod model - payment tracking data structure ONLY
 */

import mongoose from "mongoose";

const Schema = mongoose.Schema;

export interface IPaymentMethod extends mongoose.Document {
  player: mongoose.Types.ObjectId;
  division: mongoose.Types.ObjectId;
  paymentType: "FULL_PAYMENT" | "INSTALLMENTS";
  pricingTier: "EARLY_BIRD" | "REGULAR";
  originalPrice: number;
  amountPaid: number;
  status: "PENDING" | "IN_PROGRESS" | "COMPLETED";
  installments?: {
    subscriptionId: string;
    totalAmountDue: number;
    remainingBalance: number;
    nextPaymentDate?: Date;
    subscriptionPayments: Array<{
      invoiceId: string;
      status: "succeeded" | "failed" | "pending";
      amountPaid: number;
      attemptCount: number;
      lastAttempt?: Date;
      paymentLink: string;
      paymentNumber: number;
      dueDate?: Date;
    }>;
  };
  createdAt: Date;
  updatedAt: Date;
}

const paymentMethodSchema = new Schema<IPaymentMethod>(
  {
    player: {
      type: Schema.Types.ObjectId,
      ref: "Player",
      required: [true, "Player is required"],
    },
    division: {
      type: Schema.Types.ObjectId,
      ref: "Division",
      required: [true, "Division is required"],
    },
    paymentType: {
      type: String,
      enum: ["FULL_PAYMENT", "INSTALLMENTS"],
      required: [true, "Payment type is required"],
    },
    pricingTier: {
      type: String,
      enum: ["EARLY_BIRD", "REGULAR"],
      required: [true, "Pricing tier is required"],
    },
    originalPrice: {
      type: Number,
      required: [true, "Original price is required"],
    },
    amountPaid: {
      type: Number,
      default: 0,
    },
    status: {
      type: String,
      enum: ["PENDING", "IN_PROGRESS", "COMPLETED"],
      default: "PENDING",
    },
    installments: {
      subscriptionId: String,
      totalAmountDue: Number,
      remainingBalance: Number,
      nextPaymentDate: Date,
      subscriptionPayments: [
        {
          invoiceId: String,
          status: {
            type: String,
            enum: ["succeeded", "failed", "pending"],
          },
          amountPaid: Number,
          attemptCount: Number,
          lastAttempt: Date,
          paymentLink: String,
          paymentNumber: Number,
          dueDate: Date,
        },
      ],
    },
  },
  {
    timestamps: true,
  }
);

// Indexes
paymentMethodSchema.index({ player: 1, division: 1 });
paymentMethodSchema.index({ division: 1, status: 1 });
paymentMethodSchema.index({ status: 1 });

// Middleware: Auto-calculate remaining balance when installment payments update
paymentMethodSchema.pre("save", function (next) {
  if (
    this.paymentType === "INSTALLMENTS" &&
    this.installments?.subscriptionPayments
  ) {
    const totalPaid = this.installments.subscriptionPayments
      .filter((payment) => payment.status === "succeeded")
      .reduce((sum, payment) => sum + (payment.amountPaid || 0), 0);

    if (this.installments.totalAmountDue) {
      this.installments.remainingBalance =
        this.installments.totalAmountDue - totalPaid;
    }
    this.amountPaid = totalPaid;

    // Auto-complete if all payments succeeded
    const allPaid = this.installments.subscriptionPayments.every(
      (p) => p.status === "succeeded"
    );
    if (allPaid && this.installments.remainingBalance === 0) {
      this.status = "COMPLETED";
    }
  }
  next();
});

export default (mongoose.models
  .PaymentMethod as mongoose.Model<IPaymentMethod>) ||
  mongoose.model<IPaymentMethod>("PaymentMethod", paymentMethodSchema);


----- models\Player.ts -----

// src/models/Player.ts

/**
 * SOLID - Single Responsibility Principle (SRP)
 * Player model - player profile data structure ONLY
 */

import mongoose from "mongoose";

const Schema = mongoose.Schema;

// src/models/Player.ts - Add paymentMethods to interface

export interface IPlayer extends mongoose.Document {
  createdAt: Date;
  freeAgent: boolean;
  agreeToRefundPolicy: boolean;
  agreeToTerms: boolean;
  receiveNews: boolean;
  customerId?: string;
  subscriptionPayments: Array<any>;
  playerName: string;
  playerImage?: {
    id: string;
    image: string;
  };
  instagram?: string;
  jerseyNumber?: number;
  jerseyNumberTwo?: number;
  jerseyNumberThree?: number;
  jerseySize?: string;
  jerseyName?: string;
  team?: mongoose.Types.ObjectId;
  teamCaptain: boolean;
  paymentStatus: {
    hasPaid?: boolean;
    reminderCount?: number;
    teamCreatedDate?: Date;
    lastAttempt?: Date;
    email?: string;
    phoneNumber?: string;
  };
  paymentMethods: mongoose.Types.ObjectId[]; // ADD THIS LINE
  user?: mongoose.Types.ObjectId;
  division?: mongoose.Types.ObjectId;
  averageStats?: any;
  allStats: Array<any>;
}

const playerSchema = new Schema<IPlayer>(
  {
    playerName: {
      type: String,
      required: [true, "Player name is required"],
      trim: true,
    },
    user: {
      type: Schema.Types.ObjectId,
      ref: "User",
    },
    team: {
      type: Schema.Types.ObjectId,
      ref: "Team",
    },
    division: {
      type: Schema.Types.ObjectId,
      ref: "Division",
    },
    paymentStatus: {
      hasPaid: Boolean,
      reminderCount: Number,
      teamCreatedDate: Date,
      lastAttempt: Date,
      email: String,
      phoneNumber: String,
    },
  
    paymentMethods: [
      {
        type: mongoose.Schema.Types.ObjectId,
        ref: "PaymentMethod",
      },
    ],
    jerseyNumber: Number,
    jerseySize: String,
    jerseyName: String,
    instagram: String,
    teamCaptain: {
      type: Boolean,
      default: false,
    },
    freeAgent: {
      type: Boolean,
      default: false,
    },
    agreeToRefundPolicy: {
      type: Boolean,
      default: false,
    },
    agreeToTerms: {
      type: Boolean,
      default: false,
    },
    receiveNews: {
      type: Boolean,
      default: false,
    },
    customerId: String,
    playerImage: {
      id: String,
      image: String,
    },
    averageStats: {
      points: { type: Number, default: 0 },
      rebounds: { type: Number, default: 0 },
      assists: { type: Number, default: 0 },
      blocks: { type: Number, default: 0 },
      steals: { type: Number, default: 0 },
      threesMade: { type: Number, default: 0 },
      twosMade: { type: Number, default: 0 },
      freeThrowsMade: { type: Number, default: 0 },
    },
  },
  {
    timestamps: true,
  }
);

// Indexes
playerSchema.index({ playerName: "text" });
playerSchema.index({ user: 1 });
playerSchema.index({ team: 1 });
playerSchema.index({ division: 1 });
playerSchema.index({ freeAgent: 1 });

export default (mongoose.models.Player as mongoose.Model<IPlayer>) ||
  mongoose.model<IPlayer>("Player", playerSchema);


----- models\Price.ts -----

// src/models/Price.ts

/**
 * SOLID - Single Responsibility Principle (SRP)
 * Price model - pricing data structure ONLY
 */

import mongoose from "mongoose";

const Schema = mongoose.Schema;

export interface IPrice extends mongoose.Document {
  name: string;
  priceId: string;
  amount: number;
  type:
    | "earlyBird"
    | "regular"
    | "installment"
    | "regularInstallment"
    | "firstInstallment"
    | "free";
  createdAt: Date;
  updatedAt: Date;
}

const priceSchema = new Schema<IPrice>(
  {
    name: {
      type: String,
      required: [true, "Price name is required"],
    },
    priceId: {
      type: String,
      required: [true, "Stripe price ID is required"],
      unique: true,
    },
    amount: {
      type: Number,
      required: [true, "Amount is required"],
    },
    type: {
      type: String,
      enum: [
        "earlyBird",
        "regular",
        "installment",
        "regularInstallment",
        "firstInstallment",
        "free",
      ],
      required: [true, "Price type is required"],
    },
  },
  {
    timestamps: true,
  }
);

// Indexes
priceSchema.index({ priceId: 1 });
priceSchema.index({ type: 1 });

export default (mongoose.models.Price as mongoose.Model<IPrice>) ||
  mongoose.model<IPrice>("Price", priceSchema);


----- models\Team.ts -----

// src/models/Team.ts

/**
 * SOLID - Single Responsibility Principle (SRP)
 * Team model - team data structure ONLY
 */

import mongoose from "mongoose";

const Schema = mongoose.Schema;

export interface ITeam extends mongoose.Document {
  teamName: string;
  teamNameShort: string;
  teamCode: string;
  teamCaptain?: mongoose.Types.ObjectId;
  division: mongoose.Types.ObjectId;
  players: mongoose.Types.ObjectId[];
  games: mongoose.Types.ObjectId[];
  primaryColor?: string;
  secondaryColor?: string;
  tertiaryColor?: string;
  wins: number;
  losses: number;
  pointDifference: number;
  createdManually: boolean;
  isCustomJersey: boolean;
  jerseyEdition?: string;
  jerseyImages: Array<{
    id: string;
    url: string;
    publicId: string;
  }>;
  genericJerseys: Array<{
    jerseyNumber?: number;
    jerseySize?: string;
    jerseyName?: string;
  }>;
  createdAt: Date;
  updatedAt: Date;
}

const teamSchema = new Schema<ITeam>(
  {
    teamName: {
      type: String,
      required: [true, "Team name is required"],
      trim: true,
    },
    teamNameShort: {
      type: String,
      required: [true, "Short team name is required"],
      trim: true,
    },
    teamCode: {
      type: String,
      required: [true, "Team code is required"],
      unique: true,
      uppercase: true,
    },
    teamCaptain: {
      type: Schema.Types.ObjectId,
      ref: "Player",
    },

    division: {
      type: Schema.Types.ObjectId,
      ref: "Division",
      required: [true, "Division is required"],
    },
    players: [
      {
        type: Schema.Types.ObjectId,
        ref: "Player",
      },
    ],
    games: [
      {
        type: Schema.Types.ObjectId,
        ref: "Game",
      },
    ],
    primaryColor: String,
    secondaryColor: String,
    tertiaryColor: String,
    wins: {
      type: Number,
      default: 0,
    },
    losses: {
      type: Number,
      default: 0,
    },
    pointDifference: {
      type: Number,
      default: 0,
    },

    createdManually: {
      type: Boolean,
      default: false,
    },
    isCustomJersey: {
      type: Boolean,
      default: false,
    },
    jerseyEdition: String,
    jerseyImages: [
      {
        id: String,
        url: String,
        publicId: String,
      },
    ],
    genericJerseys: [
      {
        jerseyNumber: Number,
        jerseySize: String,
        jerseyName: String,
      },
    ],
  },
  {
    timestamps: true,
  }
);

// Indexes
teamSchema.index({ division: 1 });
teamSchema.index({ teamCode: 1 });
teamSchema.index({ players: 1 });

export default (mongoose.models.Team as mongoose.Model<ITeam>) ||
  mongoose.model<ITeam>("Team", teamSchema);


----- models\User.ts -----

// src/models/User.ts

/**
 * SOLID - Single Responsibility Principle (SRP)
 * User model - customer account data structure ONLY
 */

import mongoose from "mongoose";

const Schema = mongoose.Schema;

export interface IUser extends mongoose.Document {
  name: string;
  email: string;
  phoneNumber?: string;
  instagram?: string;
  password?: string;
  type: string;
  stripeCustomerId?: string;
  jerseyInformation?: {
    jerseySize?: string;
    jerseyName?: string;
    jerseyNumber?: string;
  };
  basketball: mongoose.Types.ObjectId[];
  resetToken?: string;
  resetTokenExpiry?: Date;
  createdAt: Date;
  updatedAt: Date;
}

const userSchema = new Schema<IUser>(
  {
    name: {
      type: String,
      required: [true, "Name is required"],
      trim: true,
    },
    email: {
      type: String,
      required: [true, "Email is required"],
      unique: true,
      lowercase: true,
      trim: true,
    },
    phoneNumber: String,
    instagram: String,
    password: String,
    type: {
      type: String,
      required: [true, "User type is required"],
    },
    stripeCustomerId: {
      type: String,
      sparse: true,
    },
    jerseyInformation: {
      jerseySize: String,
      jerseyName: String,
      jerseyNumber: String,
    },
    basketball: [
      {
        type: Schema.Types.ObjectId,
        ref: "Player",
      },
    ],
    resetToken: String,
    resetTokenExpiry: Date,
  },
  {
    timestamps: true,
  }
);

// Indexes
userSchema.index({ email: 1 });
userSchema.index({ stripeCustomerId: 1 });

export default (mongoose.models.User as mongoose.Model<IUser>) ||
  mongoose.model<IUser>("User", userSchema);


----- types\auth.ts -----

// src/types/auth.ts

/**
 * SOLID - Interface Segregation Principle (ISP)
 * Define focused auth-related types only
 */

import { AdminRole } from "@/models/Admin";

export interface AuthUser {
  id: string;
  email: string;
  name: string;
  role: AdminRole;
  allLocations: boolean;
  assignedLocations: string[];
  isActive: boolean;
}

export interface LoginCredentials {
  email: string;
  password: string;
}


----- types\city.ts -----

// src/types/city.ts
import { ICity } from "@/models/City";

export interface LeanCity extends Omit<ICity, "_id"> {
  _id: string;
}


----- types\division.ts -----

// src/types/division.ts
import { ILocation } from "@/models/Location";
import { ILevel } from "@/models/Level";
import { IDivision } from "@/models/Division";

export interface PopulatedDivision {
  _id: string;
  divisionName: string;
  description: string;
  city: string | { _id: string; cityName: string; region: string };
  location: { _id: string; name: string };
  level: { _id: string; name: string; grade: number };
  day: string;
  startDate?: Date;
  startTime?: string;
  endTime?: string;
  active: boolean;
  register: boolean;
  prices: {
    earlyBird?: { _id: string; amount: number; name: string };
    regular?: { _id: string; amount: number; name: string };
    installment?: { _id: string; amount: number; name: string };
    regularInstallment?: { _id: string; amount: number; name: string };
    firstInstallment?: { _id: string; amount: number; name: string };
    free?: { _id: string; amount: number; name: string };
  };
}


----- types\jersey.ts -----

// src/types/jersey.ts

/**
 * SOLID - Interface Segregation Principle (ISP)
 * Define focused jersey-related types only
 */

import { ITeam } from "@/models/Team";
import { IPlayer } from "@/models/Player";
import { IDivision } from "@/models/Division";

export interface JerseyEdition {
  id: string;
  name: string;
  description: string;
}

export interface TeamJerseyDetails
  extends Omit<ITeam, "division" | "players" | "_id"> {
  _id: string;
  division: {
    _id: string;
    divisionName: string;
    day: string;
    jerseyDeadline?: Date;
    location: { name: string };
    level: { name: string };
  };
  players: Array<{
    _id: string;
    playerName: string;
    jerseyNumber?: number;
    jerseySize?: string;
    jerseyName?: string;
    user?: string;
    paymentStatus?: {
      hasPaid?: boolean;
    };
  }>;
}

export interface DivisionWithTeams {
  _id: string;
  divisionName: string;
  location: {
    _id: string;
    name: string;
  };
  day: string;
  level: {
    name: string;
  };
  jerseyDeadline?: Date;
  teamCount: number;
  teams?: TeamWithJerseyInfo[];
}

export interface TeamWithJerseyInfo {
  _id: string;
  teamName: string;
  primaryColor?: string;
  secondaryColor?: string;
  tertiaryColor?: string;
  isCustomJersey: boolean;
  jerseyEdition?: string;
  jerseyImages: Array<{
    id: string;
    url: string;
    publicId: string;
  }>;
  players: Array<{
    _id: string;
    jerseyNumber?: number;
    jerseySize?: string;
    paymentStatus?: {
      hasPaid?: boolean;
    };
    user?: string;
  }>;
  genericJerseys: Array<{
    jerseyNumber?: number;
    jerseySize?: string;
    jerseyName?: string;
  }>;
}

export interface JerseyStats {
  totalTeams: number;
  teamsWithDesign: number;
  teamsWithoutDesign: number;
  completeTeams: number;
}

export interface GenericJersey {
  jerseyNumber?: number;
  jerseySize?: string;
  jerseyName?: string;
}


----- types\level.ts -----

// src/types/level.ts
import { ILevel } from "@/models/Level";

export interface LeanLevel extends Omit<ILevel, "_id"> {
  _id: string;
}


----- types\location.ts -----

// src/types/location.ts
import { ILocation } from "@/models/Location";

export interface LeanLocation extends Omit<ILocation, "_id"> {
  _id: string;
}


----- types\team.ts -----

// src/types/team.ts

/**
 * Team with populated references
 */
import { ITeam } from "@/models/Team";
import { IPlayer } from "@/models/Player";
import { IDivision } from "@/models/Division";

export interface PopulatedTeam
  extends Omit<ITeam, "division" | "teamCaptain" | "players" | "_id"> {
  _id: string;
  division: {
    _id: string;
    divisionName: string;
    location: { name: string };
    city: { cityName: string };
  };
  teamCaptain?: {
    _id: string;
    playerName: string;
  };
  players: Array<{
    _id: string;
    playerName: string;
    jerseyNumber?: number;
  }>;
}

export interface LeanTeam extends Omit<ITeam, "_id"> {
  _id: string;
}
